(* defs2sml --- generate wrapper code from .defs file.                      *)
(* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                        *)

(* FUNCTIONS FOR ``STANDARD MESSAGES''.
 *
 * Author: Henning Niss
 *)

structure Messages :> Messages =
struct

    val version = "0.0.0"

    fun getArguments () = CommandLine.name () :: CommandLine.arguments()

    (* Functions for generating appropriate ``standard'' copyright
       messages, disclaimers etc in the generated files. *)

    val text_length = 74
    fun pad string = StringCvt.padRight #" " text_length string
    fun say stream string = TextIO.output(stream, string ^ "\n")
    fun print stream string =
	let fun p (SOME "C") = say stream ("/* " ^ pad string ^ "*/")
	      | p (SOME "SIG") = say stream ("(* " ^ pad string ^ "*)")
	      | p (SOME "SML") = say stream ("(* " ^ pad string ^ "*)")
	      | p _ = Util.shouldntHappen  ("No target or wrong target name")
	in  p (State.getStringOption "target")
	end

    fun showCommandLine () = 
	WSeq.flatten (WSeq.prsep (WSeq.$" ") (fn s => WSeq.$s) (getArguments()))

    fun copyright stream =
        ( map (print stream)
	    ["mgtk --- an SML binding for GTK.",
	     "(c) Ken Friis Larsen and Henning Niss 1999, 2000. ", ""]
        ; ())

    fun autogenerated stream =
	( map (print stream)
	    ["This file is generated automatically. Search for AUTOMATICALLY to find",
             "the beginning of the autogenerated code.","",
             "Command used to generate the file: ",
             "  " ^ showCommandLine ()]
	; say stream "\n")

    fun autostart stream =
	( say stream "\n"
	; map (print stream)
            ["","Start of AUTOMATICALLY generated code.",""]
	; say stream "\n")

end (* structure Messages *)
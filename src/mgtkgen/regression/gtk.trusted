------------------------------------------------------------
/* mgtk --- an SML binding for GTK.                                          */
/* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         */
/*                                                                           */
/* This file is generated automatically. Search for AUTOMATICALLY to find    */
/* the beginning of the autogenerated code.                                  */
/*                                                                           */
/* Command used to generate the file:                                        */
/*   ../defs2sml -c --no-header -o gtk.c gtk.defs                            */




/*                                                                           */
/* Start of AUTOMATICALLY generated code.                                    */
/*                                                                           */


/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_window_type (value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res,0) = Val_int(GDK_WINDOW_ROOT);
  Field(res,1) = Val_int(GDK_WINDOW_TOPLEVEL);
  Field(res,2) = Val_int(GDK_WINDOW_CHILD);
  Field(res,3) = Val_int(GDK_WINDOW_DIALOG);
  Field(res,4) = Val_int(GDK_WINDOW_TEMP);
  Field(res,5) = Val_int(GDK_WINDOW_PIXMAP);
  Field(res,6) = Val_int(GDK_WINDOW_FOREIGN);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_window_class (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_INPUT_OUTPUT);
  Field(res,1) = Val_int(GDK_INPUT_ONLY);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_image_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_IMAGE_NORMAL);
  Field(res,1) = Val_int(GDK_IMAGE_SHARED);
  Field(res,2) = Val_int(GDK_IMAGE_FASTEST);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_visual_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_VISUAL_STATIC_GRAY);
  Field(res,1) = Val_int(GDK_VISUAL_GRAYSCALE);
  Field(res,2) = Val_int(GDK_VISUAL_STATIC_COLOR);
  Field(res,3) = Val_int(GDK_VISUAL_PSEUDO_COLOR);
  Field(res,4) = Val_int(GDK_VISUAL_TRUE_COLOR);
  Field(res,5) = Val_int(GDK_VISUAL_DIRECT_COLOR);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_font_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_FONT_FONT);
  Field(res,1) = Val_int(GDK_FONT_FONTSET);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_window_attributes_type (value dummy) { /* ML */
  value res = alloc_tuple(8);
  Field(res,0) = Val_int(GDK_WA_TITLE);
  Field(res,1) = Val_int(GDK_WA_X);
  Field(res,2) = Val_int(GDK_WA_Y);
  Field(res,3) = Val_int(GDK_WA_CURSOR);
  Field(res,4) = Val_int(GDK_WA_COLORMAP);
  Field(res,5) = Val_int(GDK_WA_VISUAL);
  Field(res,6) = Val_int(GDK_WA_WMCLASS);
  Field(res,7) = Val_int(GDK_WA_NOREDIR);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_window_hints (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_HINT_POS);
  Field(res,1) = Val_int(GDK_HINT_MIN_SIZE);
  Field(res,2) = Val_int(GDK_HINT_MAX_SIZE);
  Field(res,3) = Val_int(GDK_HINT_BASE_SIZE);
  Field(res,4) = Val_int(GDK_HINT_ASPECT);
  Field(res,5) = Val_int(GDK_HINT_RESIZE_INC);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_function (value dummy) { /* ML */
  value res = alloc_tuple(15);
  Field(res,0) = Val_int(GDK_COPY);
  Field(res,1) = Val_int(GDK_INVERT);
  Field(res,2) = Val_int(GDK_XOR);
  Field(res,3) = Val_int(GDK_CLEAR);
  Field(res,4) = Val_int(GDK_AND);
  Field(res,5) = Val_int(GDK_AND_REVERSE);
  Field(res,6) = Val_int(GDK_AND_INVERT);
  Field(res,7) = Val_int(GDK_NOOP);
  Field(res,8) = Val_int(GDK_OR);
  Field(res,9) = Val_int(GDK_EQUIV);
  Field(res,10) = Val_int(GDK_OR_REVERSE);
  Field(res,11) = Val_int(GDK_COPY_INVERT);
  Field(res,12) = Val_int(GDK_OR_INVERT);
  Field(res,13) = Val_int(GDK_NAND);
  Field(res,14) = Val_int(GDK_SET);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gdk_fill (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GDK_SOLID);
  Field(res,1) = Val_int(GDK_TILED);
  Field(res,2) = Val_int(GDK_STIPPLED);
  Field(res,3) = Val_int(GDK_OPAQUE_STIPPLED);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_fill_rule (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_EVEN_ODD_RULE);
  Field(res,1) = Val_int(GDK_WINDING_RULE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_line_style (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_LINE_SOLID);
  Field(res,1) = Val_int(GDK_LINE_ON_OFF_DASH);
  Field(res,2) = Val_int(GDK_LINE_DOUBLE_DASH);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gdk_cap_style (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GDK_CAP_NOT_LAST);
  Field(res,1) = Val_int(GDK_CAP_BUTT);
  Field(res,2) = Val_int(GDK_CAP_ROUND);
  Field(res,3) = Val_int(GDK_CAP_PROJECTING);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_join_style (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_JOIN_MITER);
  Field(res,1) = Val_int(GDK_JOIN_ROUND);
  Field(res,2) = Val_int(GDK_JOIN_BEVEL);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_cursor_type (value dummy) { /* ML */
  value res = alloc_tuple(80);
  Field(res,0) = Val_int(GDK_NUM_GLYPHS);
  Field(res,1) = Val_int(GDK_X_CURSOR);
  Field(res,2) = Val_int(GDK_ARROW);
  Field(res,3) = Val_int(GDK_BASED_ARROW_DOWN);
  Field(res,4) = Val_int(GDK_BASED_ARROW_UP);
  Field(res,5) = Val_int(GDK_BOAT);
  Field(res,6) = Val_int(GDK_BOGOSITY);
  Field(res,7) = Val_int(GDK_BOTTOM_LEFT_CORNER);
  Field(res,8) = Val_int(GDK_BOTTOM_RIGHT_CORNER);
  Field(res,9) = Val_int(GDK_BOTTOM_SIDE);
  Field(res,10) = Val_int(GDK_BOTTOM_TEE);
  Field(res,11) = Val_int(GDK_BOX_SPIRAL);
  Field(res,12) = Val_int(GDK_CENTER_PTR);
  Field(res,13) = Val_int(GDK_CIRCLE);
  Field(res,14) = Val_int(GDK_CLOCK);
  Field(res,15) = Val_int(GDK_COFFEE_MUG);
  Field(res,16) = Val_int(GDK_CROSS);
  Field(res,17) = Val_int(GDK_CROSS_REVERSE);
  Field(res,18) = Val_int(GDK_CROSSHAIR);
  Field(res,19) = Val_int(GDK_DIAMOND_CROSS);
  Field(res,20) = Val_int(GDK_DOT);
  Field(res,21) = Val_int(GDK_DOTBOX);
  Field(res,22) = Val_int(GDK_DOUBLE_ARROW);
  Field(res,23) = Val_int(GDK_DRAFT_LARGE);
  Field(res,24) = Val_int(GDK_DRAFT_SMALL);
  Field(res,25) = Val_int(GDK_DRAPED_BOX);
  Field(res,26) = Val_int(GDK_EXCHANGE);
  Field(res,27) = Val_int(GDK_FLEUR);
  Field(res,28) = Val_int(GDK_GOBBLER);
  Field(res,29) = Val_int(GDK_GUMBY);
  Field(res,30) = Val_int(GDK_HAND1);
  Field(res,31) = Val_int(GDK_HAND2);
  Field(res,32) = Val_int(GDK_HEART);
  Field(res,33) = Val_int(GDK_ICON);
  Field(res,34) = Val_int(GDK_IRON_CROSS);
  Field(res,35) = Val_int(GDK_LEFT_PTR);
  Field(res,36) = Val_int(GDK_LEFT_SIDE);
  Field(res,37) = Val_int(GDK_LEFT_TEE);
  Field(res,38) = Val_int(GDK_LEFTBUTTON);
  Field(res,39) = Val_int(GDK_LL_ANGLE);
  Field(res,40) = Val_int(GDK_LR_ANGLE);
  Field(res,41) = Val_int(GDK_MAN);
  Field(res,42) = Val_int(GDK_MIDDLEBUTTON);
  Field(res,43) = Val_int(GDK_MOUSE);
  Field(res,44) = Val_int(GDK_PENCIL);
  Field(res,45) = Val_int(GDK_PIRATE);
  Field(res,46) = Val_int(GDK_PLUS);
  Field(res,47) = Val_int(GDK_QUESTION_ARROW);
  Field(res,48) = Val_int(GDK_RIGHT_PTR);
  Field(res,49) = Val_int(GDK_RIGHT_SIDE);
  Field(res,50) = Val_int(GDK_RIGHT_TEE);
  Field(res,51) = Val_int(GDK_RIGHTBUTTON);
  Field(res,52) = Val_int(GDK_RTL_LOGO);
  Field(res,53) = Val_int(GDK_SAILBOAT);
  Field(res,54) = Val_int(GDK_SB_DOWN_ARROW);
  Field(res,55) = Val_int(GDK_SB_H_DOUBLE_ARROW);
  Field(res,56) = Val_int(GDK_SB_LEFT_ARROW);
  Field(res,57) = Val_int(GDK_SB_RIGHT_ARROW);
  Field(res,58) = Val_int(GDK_SB_UP_ARROW);
  Field(res,59) = Val_int(GDK_SB_V_DOUBLE_ARROW);
  Field(res,60) = Val_int(GDK_SHUTTLE);
  Field(res,61) = Val_int(GDK_SIZING);
  Field(res,62) = Val_int(GDK_SPIDER);
  Field(res,63) = Val_int(GDK_SPRAYCAN);
  Field(res,64) = Val_int(GDK_STAR);
  Field(res,65) = Val_int(GDK_TARGET);
  Field(res,66) = Val_int(GDK_TCROSS);
  Field(res,67) = Val_int(GDK_TOP_LEFT_ARROW);
  Field(res,68) = Val_int(GDK_TOP_LEFT_CORNER);
  Field(res,69) = Val_int(GDK_TOP_RIGHT_CORNER);
  Field(res,70) = Val_int(GDK_TOP_SIDE);
  Field(res,71) = Val_int(GDK_TOP_TEE);
  Field(res,72) = Val_int(GDK_TREK);
  Field(res,73) = Val_int(GDK_UL_ANGLE);
  Field(res,74) = Val_int(GDK_UMBRELLA);
  Field(res,75) = Val_int(GDK_UR_ANGLE);
  Field(res,76) = Val_int(GDK_WATCH);
  Field(res,77) = Val_int(GDK_XTERM);
  Field(res,78) = Val_int(GDK_LAST_CURSOR);
  Field(res,79) = Val_int(GDK_CURSOR_IS_PIXMAP);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_filter_return (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_FILTER_CONTINUE);
  Field(res,1) = Val_int(GDK_FILTER_TRANSLATE);
  Field(res,2) = Val_int(GDK_FILTER_REMOVE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_visibility_state (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_VISIBILITY_UNOBSCURED);
  Field(res,1) = Val_int(GDK_VISIBILITY_PARTIAL);
  Field(res,2) = Val_int(GDK_VISIBILITY_FULLY_OBSCURED);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_event_type (value dummy) { /* ML */
  value res = alloc_tuple(32);
  Field(res,0) = Val_int(GDK_NOTHING);
  Field(res,1) = Val_int(GDK_DELETE);
  Field(res,2) = Val_int(GDK_DESTROY);
  Field(res,3) = Val_int(GDK_EXPOSE);
  Field(res,4) = Val_int(GDK_MOTION_NOTIFY);
  Field(res,5) = Val_int(GDK_BUTTON_PRESS);
  Field(res,6) = Val_int(GDK_2BUTTON_PRESS);
  Field(res,7) = Val_int(GDK_3BUTTON_PRESS);
  Field(res,8) = Val_int(GDK_BUTTON_RELEASE);
  Field(res,9) = Val_int(GDK_KEY_PRESS);
  Field(res,10) = Val_int(GDK_KEY_RELEASE);
  Field(res,11) = Val_int(GDK_ENTER_NOTIFY);
  Field(res,12) = Val_int(GDK_LEAVE_NOTIFY);
  Field(res,13) = Val_int(GDK_FOCUS_CHANGE);
  Field(res,14) = Val_int(GDK_CONFIGURE);
  Field(res,15) = Val_int(GDK_MAP);
  Field(res,16) = Val_int(GDK_UNMAP);
  Field(res,17) = Val_int(GDK_PROPERTY_NOTIFY);
  Field(res,18) = Val_int(GDK_SELECTION_CLEAR);
  Field(res,19) = Val_int(GDK_SELECTION_REQUEST);
  Field(res,20) = Val_int(GDK_SELECTION_NOTIFY);
  Field(res,21) = Val_int(GDK_PROXIMITY_IN);
  Field(res,22) = Val_int(GDK_PROXIMITY_OUT);
  Field(res,23) = Val_int(GDK_DRAG_ENTER);
  Field(res,24) = Val_int(GDK_DRAG_LEAVE);
  Field(res,25) = Val_int(GDK_DRAG_MOTION);
  Field(res,26) = Val_int(GDK_DRAG_STATUS);
  Field(res,27) = Val_int(GDK_DROP_START);
  Field(res,28) = Val_int(GDK_DROP_FINISHED);
  Field(res,29) = Val_int(GDK_CLIENT_EVENT);
  Field(res,30) = Val_int(GDK_VISIBILITY_NOTIFY);
  Field(res,31) = Val_int(GDK_NO_EXPOSE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_event_mask (value dummy) { /* ML */
  value res = alloc_tuple(21);
  Field(res,0) = Val_int(GDK_EXPOSURE_MASK);
  Field(res,1) = Val_int(GDK_POINTER_MOTION_MASK);
  Field(res,2) = Val_int(GDK_POINTER_MOTION_HINT_MASK);
  Field(res,3) = Val_int(GDK_BUTTON_MOTION_MASK);
  Field(res,4) = Val_int(GDK_BUTTON1_MOTION_MASK);
  Field(res,5) = Val_int(GDK_BUTTON2_MOTION_MASK);
  Field(res,6) = Val_int(GDK_BUTTON3_MOTION_MASK);
  Field(res,7) = Val_int(GDK_BUTTON_PRESS_MASK);
  Field(res,8) = Val_int(GDK_BUTTON_RELEASE_MASK);
  Field(res,9) = Val_int(GDK_KEY_PRESS_MASK);
  Field(res,10) = Val_int(GDK_KEY_RELEASE_MASK);
  Field(res,11) = Val_int(GDK_ENTER_NOTIFY_MASK);
  Field(res,12) = Val_int(GDK_LEAVE_NOTIFY_MASK);
  Field(res,13) = Val_int(GDK_FOCUS_CHANGE_MASK);
  Field(res,14) = Val_int(GDK_STRUCTURE_MASK);
  Field(res,15) = Val_int(GDK_PROPERTY_CHANGE_MASK);
  Field(res,16) = Val_int(GDK_VISIBILITY_NOTIFY_MASK);
  Field(res,17) = Val_int(GDK_PROXIMITY_IN_MASK);
  Field(res,18) = Val_int(GDK_PROXIMITY_OUT_MASK);
  Field(res,19) = Val_int(GDK_SUBSTRUCTURE_MASK);
  Field(res,20) = Val_int(GDK_ALL_EVENTS_MASK);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_notify_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_NOTIFY_ANCESTOR);
  Field(res,1) = Val_int(GDK_NOTIFY_VIRTUAL);
  Field(res,2) = Val_int(GDK_NOTIFY_INFERIOR);
  Field(res,3) = Val_int(GDK_NOTIFY_NONLINEAR);
  Field(res,4) = Val_int(GDK_NOTIFY_NONLINEAR_VIRTUAL);
  Field(res,5) = Val_int(GDK_NOTIFY_UNKNOWN);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_crossing_mode (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_CROSSING_NORMAL);
  Field(res,1) = Val_int(GDK_CROSSING_GRAB);
  Field(res,2) = Val_int(GDK_CROSSING_UNGRAB);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_modifier_type (value dummy) { /* ML */
  value res = alloc_tuple(15);
  Field(res,0) = Val_int(GDK_SHIFT_MASK);
  Field(res,1) = Val_int(GDK_LOCK_MASK);
  Field(res,2) = Val_int(GDK_CONTROL_MASK);
  Field(res,3) = Val_int(GDK_MOD1_MASK);
  Field(res,4) = Val_int(GDK_MOD2_MASK);
  Field(res,5) = Val_int(GDK_MOD3_MASK);
  Field(res,6) = Val_int(GDK_MOD4_MASK);
  Field(res,7) = Val_int(GDK_MOD5_MASK);
  Field(res,8) = Val_int(GDK_BUTTON1_MASK);
  Field(res,9) = Val_int(GDK_BUTTON2_MASK);
  Field(res,10) = Val_int(GDK_BUTTON3_MASK);
  Field(res,11) = Val_int(GDK_BUTTON4_MASK);
  Field(res,12) = Val_int(GDK_BUTTON5_MASK);
  Field(res,13) = Val_int(GDK_RELEASE_MASK);
  Field(res,14) = Val_int(GDK_MODIFIER_MASK);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_subwindow_mode (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_CLIP_BY_CHILDREN);
  Field(res,1) = Val_int(GDK_INCLUDE_INFERIORS);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_input_condition (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_INPUT_READ);
  Field(res,1) = Val_int(GDK_INPUT_WRITE);
  Field(res,2) = Val_int(GDK_INPUT_EXCEPTION);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gdk_status (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GDK_OK);
  Field(res,1) = Val_int(GDK_ERROR);
  Field(res,2) = Val_int(GDK_ERROR_PARAM);
  Field(res,3) = Val_int(GDK_ERROR_FILE);
  Field(res,4) = Val_int(GDK_ERROR_MEM);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_byte_order (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_LSB_FIRST);
  Field(res,1) = Val_int(GDK_MSB_FIRST);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_gc_values_mask (value dummy) { /* ML */
  value res = alloc_tuple(18);
  Field(res,0) = Val_int(GDK_GC_FOREGROUND);
  Field(res,1) = Val_int(GDK_GC_BACKGROUND);
  Field(res,2) = Val_int(GDK_GC_FONT);
  Field(res,3) = Val_int(GDK_GC_FUNCTION);
  Field(res,4) = Val_int(GDK_GC_FILL);
  Field(res,5) = Val_int(GDK_GC_TILE);
  Field(res,6) = Val_int(GDK_GC_STIPPLE);
  Field(res,7) = Val_int(GDK_GC_CLIP_MASK);
  Field(res,8) = Val_int(GDK_GC_SUBWINDOW);
  Field(res,9) = Val_int(GDK_GC_TS_X_ORIGIN);
  Field(res,10) = Val_int(GDK_GC_TS_Y_ORIGIN);
  Field(res,11) = Val_int(GDK_GC_CLIP_X_ORIGIN);
  Field(res,12) = Val_int(GDK_GC_CLIP_Y_ORIGIN);
  Field(res,13) = Val_int(GDK_GC_EXPOSURES);
  Field(res,14) = Val_int(GDK_GC_LINE_WIDTH);
  Field(res,15) = Val_int(GDK_GC_LINE_STYLE);
  Field(res,16) = Val_int(GDK_GC_CAP_STYLE);
  Field(res,17) = Val_int(GDK_GC_JOIN_STYLE);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_selection (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_SELECTION_PRIMARY);
  Field(res,1) = Val_int(GDK_SELECTION_SECONDARY);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gdk_property_state (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GDK_PROPERTY_NEW_VALUE);
  Field(res,1) = Val_int(GDK_PROPERTY_DELETE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_prop_mode (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_PROP_MODE_REPLACE);
  Field(res,1) = Val_int(GDK_PROP_MODE_PREPEND);
  Field(res,2) = Val_int(GDK_PROP_MODE_APPEND);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gdk_input_source (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GDK_SOURCE_MOUSE);
  Field(res,1) = Val_int(GDK_SOURCE_PEN);
  Field(res,2) = Val_int(GDK_SOURCE_ERASER);
  Field(res,3) = Val_int(GDK_SOURCE_CURSOR);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_input_mode (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_MODE_DISABLED);
  Field(res,1) = Val_int(GDK_MODE_SCREEN);
  Field(res,2) = Val_int(GDK_MODE_WINDOW);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_axis_use (value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res,0) = Val_int(GDK_AXIS_IGNORE);
  Field(res,1) = Val_int(GDK_AXIS_X);
  Field(res,2) = Val_int(GDK_AXIS_Y);
  Field(res,3) = Val_int(GDK_AXIS_PRESSURE);
  Field(res,4) = Val_int(GDK_AXIS_XTILT);
  Field(res,5) = Val_int(GDK_AXIS_YTILT);
  Field(res,6) = Val_int(GDK_AXIS_LAST);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gdk_target (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GDK_TARGET_BITMAP);
  Field(res,1) = Val_int(GDK_TARGET_COLORMAP);
  Field(res,2) = Val_int(GDK_TARGET_DRAWABLE);
  Field(res,3) = Val_int(GDK_TARGET_PIXMAP);
  Field(res,4) = Val_int(GDK_TARGET_STRING);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_selection_type (value dummy) { /* ML */
  value res = alloc_tuple(8);
  Field(res,0) = Val_int(GDK_SELECTION_TYPE_ATOM);
  Field(res,1) = Val_int(GDK_SELECTION_TYPE_BITMAP);
  Field(res,2) = Val_int(GDK_SELECTION_TYPE_COLORMAP);
  Field(res,3) = Val_int(GDK_SELECTION_TYPE_DRAWABLE);
  Field(res,4) = Val_int(GDK_SELECTION_TYPE_INTEGER);
  Field(res,5) = Val_int(GDK_SELECTION_TYPE_PIXMAP);
  Field(res,6) = Val_int(GDK_SELECTION_TYPE_WINDOW);
  Field(res,7) = Val_int(GDK_SELECTION_TYPE_STRING);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_extension_mode (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_EXTENSION_EVENTS_NONE);
  Field(res,1) = Val_int(GDK_EXTENSION_EVENTS_ALL);
  Field(res,2) = Val_int(GDK_EXTENSION_EVENTS_CURSOR);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_im_style (value dummy) { /* ML */
  value res = alloc_tuple(11);
  Field(res,0) = Val_int(GDK_IM_PREEDIT_AREA);
  Field(res,1) = Val_int(GDK_IM_PREEDIT_CALLBACKS);
  Field(res,2) = Val_int(GDK_IM_PREEDIT_POSITION);
  Field(res,3) = Val_int(GDK_IM_PREEDIT_NOTHING);
  Field(res,4) = Val_int(GDK_IM_PREEDIT_NONE);
  Field(res,5) = Val_int(GDK_IM_PREEDIT_MASK);
  Field(res,6) = Val_int(GDK_IM_STATUS_AREA);
  Field(res,7) = Val_int(GDK_IM_STATUS_CALLBACKS);
  Field(res,8) = Val_int(GDK_IM_STATUS_NOTHING);
  Field(res,9) = Val_int(GDK_IM_STATUS_NONE);
  Field(res,10) = Val_int(GDK_IM_STATUS_MASK);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_ic_attributes_type (value dummy) { /* ML */
  value res = alloc_tuple(24);
  Field(res,0) = Val_int(GDK_IC_STYLE);
  Field(res,1) = Val_int(GDK_IC_CLIENT_WINDOW);
  Field(res,2) = Val_int(GDK_IC_FOCUS_WINDOW);
  Field(res,3) = Val_int(GDK_IC_FILTER_EVENTS);
  Field(res,4) = Val_int(GDK_IC_SPOT_LOCATION);
  Field(res,5) = Val_int(GDK_IC_LINE_SPACING);
  Field(res,6) = Val_int(GDK_IC_CURSOR);
  Field(res,7) = Val_int(GDK_IC_PREEDIT_FONTSET);
  Field(res,8) = Val_int(GDK_IC_PREEDIT_AREA);
  Field(res,9) = Val_int(GDK_IC_PREEDIT_AREA_NEEDED);
  Field(res,10) = Val_int(GDK_IC_PREEDIT_FOREGROUND);
  Field(res,11) = Val_int(GDK_IC_PREEDIT_BACKGROUND);
  Field(res,12) = Val_int(GDK_IC_PREEDIT_PIXMAP);
  Field(res,13) = Val_int(GDK_IC_PREEDIT_COLORMAP);
  Field(res,14) = Val_int(GDK_IC_STATUS_FONTSET);
  Field(res,15) = Val_int(GDK_IC_STATUS_AREA);
  Field(res,16) = Val_int(GDK_IC_STATUS_AREA_NEEDED);
  Field(res,17) = Val_int(GDK_IC_STATUS_FOREGROUND);
  Field(res,18) = Val_int(GDK_IC_STATUS_BACKGROUND);
  Field(res,19) = Val_int(GDK_IC_STATUS_PIXMAP);
  Field(res,20) = Val_int(GDK_IC_STATUS_COLORMAP);
  Field(res,21) = Val_int(GDK_IC_ALL_REQ);
  Field(res,22) = Val_int(GDK_IC_PREEDIT_AREA_REQ);
  Field(res,23) = Val_int(GDK_IC_PREEDIT_POSITION_REQ);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_wm_decoration (value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res,0) = Val_int(GDK_DECOR_ALL);
  Field(res,1) = Val_int(GDK_DECOR_BORDER);
  Field(res,2) = Val_int(GDK_DECOR_RESIZEH);
  Field(res,3) = Val_int(GDK_DECOR_TITLE);
  Field(res,4) = Val_int(GDK_DECOR_MENU);
  Field(res,5) = Val_int(GDK_DECOR_MINIMIZE);
  Field(res,6) = Val_int(GDK_DECOR_MAXIMIZE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_wm_function (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_FUNC_ALL);
  Field(res,1) = Val_int(GDK_FUNC_RESIZE);
  Field(res,2) = Val_int(GDK_FUNC_MOVE);
  Field(res,3) = Val_int(GDK_FUNC_MINIMIZE);
  Field(res,4) = Val_int(GDK_FUNC_MAXIMIZE);
  Field(res,5) = Val_int(GDK_FUNC_CLOSE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_color_context_mode (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_CC_MODE_UNDEFINED);
  Field(res,1) = Val_int(GDK_CC_MODE_BW);
  Field(res,2) = Val_int(GDK_CC_MODE_STD_CMAP);
  Field(res,3) = Val_int(GDK_CC_MODE_TRUE);
  Field(res,4) = Val_int(GDK_CC_MODE_MY_GRAY);
  Field(res,5) = Val_int(GDK_CC_MODE_PALETTE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_overlap_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_OVERLAP_RECTANGLE_IN);
  Field(res,1) = Val_int(GDK_OVERLAP_RECTANGLE_OUT);
  Field(res,2) = Val_int(GDK_OVERLAP_RECTANGLE_PART);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gdk_drag_action (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GDK_ACTION_DEFAULT);
  Field(res,1) = Val_int(GDK_ACTION_COPY);
  Field(res,2) = Val_int(GDK_ACTION_MOVE);
  Field(res,3) = Val_int(GDK_ACTION_LINK);
  Field(res,4) = Val_int(GDK_ACTION_PRIVATE);
  Field(res,5) = Val_int(GDK_ACTION_ASK);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_drag_protocol (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_DRAG_PROTO_MOTIF);
  Field(res,1) = Val_int(GDK_DRAG_PROTO_XDND);
  Field(res,2) = Val_int(GDK_DRAG_PROTO_ROOTWIN);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gdk_rgb_dither (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_RGB_DITHER_NONE);
  Field(res,1) = Val_int(GDK_RGB_DITHER_NORMAL);
  Field(res,2) = Val_int(GDK_RGB_DITHER_MAX);
  return res;
}

#define gdk_drag_context_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_drag_context (value val) {
  gdk_drag_context_unref (gdk_drag_context_val(val)); 
}

value Val_gdk_drag_context (void* obj) {
  value res;
  gdk_drag_context_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_drag_context, 0, 1);
  gdk_drag_context_val(res) = obj;
  return res;
}

#define gdk_colormap_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_colormap (value val) {
  gdk_colormap_unref (gdk_colormap_val(val)); 
}

value Val_gdk_colormap (void* obj) {
  value res;
  gdk_colormap_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_colormap, 0, 1);
  gdk_colormap_val(res) = obj;
  return res;
}

#define gdk_font_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_font (value val) {
  gdk_font_unref (gdk_font_val(val)); 
}

value Val_gdk_font (void* obj) {
  value res;
  gdk_font_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_font, 0, 1);
  gdk_font_val(res) = obj;
  return res;
}

#define gdk_window_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_window (value val) {
  gdk_window_unref (gdk_window_val(val)); 
}

value Val_gdk_window (void* obj) {
  value res;
  gdk_window_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_window, 0, 1);
  gdk_window_val(res) = obj;
  return res;
}

#define gdk_pixmap_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_pixmap (value val) {
  gdk_pixmap_unref (gdk_pixmap_val(val)); 
}

value Val_gdk_pixmap (void* obj) {
  value res;
  gdk_pixmap_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_pixmap, 0, 1);
  gdk_pixmap_val(res) = obj;
  return res;
}

#define gdk_bitmap_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_bitmap (value val) {
  gdk_bitmap_unref (gdk_bitmap_val(val)); 
}

value Val_gdk_bitmap (void* obj) {
  value res;
  gdk_bitmap_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_bitmap, 0, 1);
  gdk_bitmap_val(res) = obj;
  return res;
}

#define gdk_drawable_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_drawable (value val) {
  gdk_window_unref (gdk_drawable_val(val)); 
}

value Val_gdk_drawable (void* obj) {
  value res;
  gdk_window_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_drawable, 0, 1);
  gdk_drawable_val(res) = obj;
  return res;
}

#define gdk_event_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_event (value val) {
  gdk_event_free (gdk_event_val(val)); 
}

value Val_gdk_event (void* obj) {
  value res;
  void* copy = gdk_event_copy(obj);
  res = alloc_final (2, ml_finalize_gdk_event, 0, 1);
  gdk_event_val(res) = copy;
  return res;
}

#define gdk_color_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_color (value val) {
  gdk_color_free (gdk_color_val(val)); 
}

value Val_gdk_color (void* obj) {
  value res;
  void* copy = gdk_color_copy(obj);
  res = alloc_final (2, ml_finalize_gdk_color, 0, 1);
  gdk_color_val(res) = copy;
  return res;
}

#define gdk_gc_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gdk_gc (value val) {
  gdk_gc_unref (gdk_gc_val(val)); 
}

value Val_gdk_gc (void* obj) {
  value res;
  gdk_gc_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_gc, 0, 1);
  gdk_gc_val(res) = obj;
  return res;
}

/* ML type: unit -> unit */
EXTERNML value mgtk_gdk_beep(value dummy) { /* ML */
  gdk_beep();
  return Val_unit;
}

/* ML type: string -> gdk_font */
EXTERNML value mgtk_gdk_font_load(value name) { /* ML */
  return Val_gdk_font(gdk_font_load(String_val(name)));
}

/* ML type: string -> gdk_font */
EXTERNML value mgtk_gdk_fontset_load(value name) { /* ML */
  return Val_gdk_font(gdk_fontset_load(String_val(name)));
}

/* ML type: gdk_colormap -> gdk_color -> bool */
EXTERNML value mgtk_gdk_color_alloc(value colormap, value color) { /* ML */
  return Val_bool(gdk_color_alloc(gdk_colormap_val(colormap), gdk_color_val(color)));
}

/* ML type: gdk_colormap -> gdk_color -> bool */
EXTERNML value mgtk_gdk_color_black(value colormap, value color) { /* ML */
  return Val_bool(gdk_color_black(gdk_colormap_val(colormap), gdk_color_val(color)));
}

/* ML type: gdk_colormap -> gdk_color -> bool */
EXTERNML value mgtk_gdk_color_change(value colormap, value color) { /* ML */
  return Val_bool(gdk_color_change(gdk_colormap_val(colormap), gdk_color_val(color)));
}

/* ML type: string -> bool * gdk_color */
EXTERNML value mgtk_gdk_color_parse(value spec) { /* ML */
  value res;
  GdkColor rescolor;
  value rescall = gdk_color_parse(String_val(spec), &rescolor);
  Push_roots(r, 1);
  r[0] = alloc_tuple(2);
  Field(r[0], 0) = Val_bool(rescall);
  Field(r[0], 1) = Val_gdk_color(&rescolor);
  res = r[0];
  Pop_roots();
  return res;
}

/* ML type: gdk_colormap -> gdk_color -> bool */
EXTERNML value mgtk_gdk_color_white(value colormap, value color) { /* ML */
  return Val_bool(gdk_color_white(gdk_colormap_val(colormap), gdk_color_val(color)));
}

/* ML type: gdk_colormap -> gdk_color -> bool -> bool -> bool */
EXTERNML value mgtk_gdk_colormap_alloc_color(value colormap, value color, value writeable, value best_match) { /* ML */
  return Val_bool(gdk_colormap_alloc_color(gdk_colormap_val(colormap), gdk_color_val(color), Bool_val(writeable), Bool_val(best_match)));
}

/* ML type: gdk_colormap -> int -> unit */
EXTERNML value mgtk_gdk_colormap_change(value colormap, value ncolors) { /* ML */
  gdk_colormap_change(gdk_colormap_val(colormap), Int_val(ncolors));
  return Val_unit;
}

/* ML type: gdk_colormap -> gdk_color -> int -> unit */
EXTERNML value mgtk_gdk_colormap_free_colors(value colormap, value colors, value ncolors) { /* ML */
  gdk_colormap_free_colors(gdk_colormap_val(colormap), gdk_color_val(colors), Int_val(ncolors));
  return Val_unit;
}

/* ML type: unit -> gdk_colormap */
EXTERNML value mgtk_gdk_colormap_get_system(value dummy) { /* ML */
  return Val_gdk_colormap(gdk_colormap_get_system());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gdk_colormap_get_system_size(value dummy) { /* ML */
  return Val_int(gdk_colormap_get_system_size());
}

/* ML type: gdk_gc -> gdk_color -> unit */
EXTERNML value mgtk_gdk_gc_set_foreground(value gc, value color) { /* ML */
  gdk_gc_set_foreground(gdk_gc_val(gc), gdk_color_val(color));
  return Val_unit;
}

/* ML type: gdk_gc -> gdk_color -> unit */
EXTERNML value mgtk_gdk_gc_set_background(value gc, value color) { /* ML */
  gdk_gc_set_background(gdk_gc_val(gc), gdk_color_val(color));
  return Val_unit;
}

/* ML type: gdk_gc -> gdk_font -> unit */
EXTERNML value mgtk_gdk_gc_set_font(value gc, value font) { /* ML */
  gdk_gc_set_font(gdk_gc_val(gc), gdk_font_val(font));
  return Val_unit;
}

/* ML type: gdk_drawable -> int -> int -> int -> int -> unit */
EXTERNML value mgtk_gdk_window_clear_area(value drawable, value x1, value y1, value x2, value y2) { /* ML */
  gdk_window_clear_area(gdk_drawable_val(drawable), Int_val(x1), Int_val(y1), Int_val(x2), Int_val(y2));
  return Val_unit;
}

/* ML type: gdk_drawable -> gdk_gc -> int -> int -> unit */
EXTERNML value mgtk_gdk_draw_point(value drawable, value gc, value x, value y) { /* ML */
  gdk_draw_point(gdk_drawable_val(drawable), gdk_gc_val(gc), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_gc * int * int * int * int -> unit */
EXTERNML value mgtk_gdk_draw_line(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value gc = Field(mgtk_params, 1);
  value x1 = Field(mgtk_params, 2);
  value y1 = Field(mgtk_params, 3);
  value x2 = Field(mgtk_params, 4);
  value y2 = Field(mgtk_params, 5);
  gdk_draw_line(gdk_drawable_val(drawable), gdk_gc_val(gc), Int_val(x1), Int_val(y1), Int_val(x2), Int_val(y2));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_gc * bool * int * int * int * int -> unit */
EXTERNML value mgtk_gdk_draw_rectangle(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value gc = Field(mgtk_params, 1);
  value filled = Field(mgtk_params, 2);
  value x = Field(mgtk_params, 3);
  value y = Field(mgtk_params, 4);
  value width = Field(mgtk_params, 5);
  value height = Field(mgtk_params, 6);
  gdk_draw_rectangle(gdk_drawable_val(drawable), gdk_gc_val(gc), Bool_val(filled), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_gc * bool * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gdk_draw_arc(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value gc = Field(mgtk_params, 1);
  value filled = Field(mgtk_params, 2);
  value x = Field(mgtk_params, 3);
  value y = Field(mgtk_params, 4);
  value width = Field(mgtk_params, 5);
  value height = Field(mgtk_params, 6);
  value angle1 = Field(mgtk_params, 7);
  value angle2 = Field(mgtk_params, 8);
  gdk_draw_arc(gdk_drawable_val(drawable), gdk_gc_val(gc), Bool_val(filled), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(angle1), Int_val(angle2));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_font * gdk_gc * int * int * string -> unit */
EXTERNML value mgtk_gdk_draw_string(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value font = Field(mgtk_params, 1);
  value gc = Field(mgtk_params, 2);
  value x = Field(mgtk_params, 3);
  value y = Field(mgtk_params, 4);
  value str = Field(mgtk_params, 5);
  gdk_draw_string(gdk_drawable_val(drawable), gdk_font_val(font), gdk_gc_val(gc), Int_val(x), Int_val(y), String_val(str));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_font * gdk_gc * int * int * string * int -> unit */
EXTERNML value mgtk_gdk_draw_text(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value font = Field(mgtk_params, 1);
  value gc = Field(mgtk_params, 2);
  value x = Field(mgtk_params, 3);
  value y = Field(mgtk_params, 4);
  value text = Field(mgtk_params, 5);
  value text_length = Field(mgtk_params, 6);
  gdk_draw_text(gdk_drawable_val(drawable), gdk_font_val(font), gdk_gc_val(gc), Int_val(x), Int_val(y), String_val(text), Int_val(text_length));
  return Val_unit;
}

/* ML type: gdk_drawable * gdk_gc * gdk_drawable * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gdk_draw_pixmap(value mgtk_params) { /* ML */
  value drawable = Field(mgtk_params, 0);
  value gc = Field(mgtk_params, 1);
  value src = Field(mgtk_params, 2);
  value xsrc = Field(mgtk_params, 3);
  value ysrc = Field(mgtk_params, 4);
  value xdest = Field(mgtk_params, 5);
  value ydest = Field(mgtk_params, 6);
  value width = Field(mgtk_params, 7);
  value height = Field(mgtk_params, 8);
  gdk_draw_pixmap(gdk_drawable_val(drawable), gdk_gc_val(gc), gdk_drawable_val(src), Int_val(xsrc), Int_val(ysrc), Int_val(xdest), Int_val(ydest), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: unit -> int */
EXTERNML value mgtk_gdk_screen_width(value dummy) { /* ML */
  return Val_int(gdk_screen_width());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gdk_screen_height(value dummy) { /* ML */
  return Val_int(gdk_screen_height());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gdk_screen_width_mm(value dummy) { /* ML */
  return Val_int(gdk_screen_width_mm());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gdk_screen_height_mm(value dummy) { /* ML */
  return Val_int(gdk_screen_height_mm());
}

/* ML type: gdk_drag_context -> int -> word -> unit */
EXTERNML value mgtk_gdk_drag_status(value context, value action, value time) { /* ML */
  gdk_drag_status(gdk_drag_context_val(context), Int_val(action), Int_val(time));
  return Val_unit;
}

/* ML type: word -> word -> word -> string */
EXTERNML value mgtk_gtk_check_version(value required_major, value required_minor, value required_micro) { /* ML */
  return copy_string(gtk_check_version(Int_val(required_major), Int_val(required_minor), Int_val(required_micro)));
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_exit(value error_code) { /* ML */
  gtk_exit(Int_val(error_code));
  return Val_unit;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_accel_flags (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_ACCEL_VISIBLE);
  Field(res,1) = Val_int(GTK_ACCEL_SIGNAL_VISIBLE);
  Field(res,2) = Val_int(GTK_ACCEL_LOCKED);
  Field(res,3) = Val_int(GTK_ACCEL_MASK);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_calendar_display_options (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_CALENDAR_SHOW_HEADING);
  Field(res,1) = Val_int(GTK_CALENDAR_SHOW_DAY_NAMES);
  Field(res,2) = Val_int(GTK_CALENDAR_NO_MONTH_CHANGE);
  Field(res,3) = Val_int(GTK_CALENDAR_SHOW_WEEK_NUMBERS);
  Field(res,4) = Val_int(GTK_CALENDAR_WEEK_START_MONDAY);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_cell_type (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_CELL_EMPTY);
  Field(res,1) = Val_int(GTK_CELL_TEXT);
  Field(res,2) = Val_int(GTK_CELL_PIXMAP);
  Field(res,3) = Val_int(GTK_CELL_PIXTEXT);
  Field(res,4) = Val_int(GTK_CELL_WIDGET);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_clist_drag_pos (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_CLIST_DRAG_NONE);
  Field(res,1) = Val_int(GTK_CLIST_DRAG_BEFORE);
  Field(res,2) = Val_int(GTK_CLIST_DRAG_INTO);
  Field(res,3) = Val_int(GTK_CLIST_DRAG_AFTER);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_button_action (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_BUTTON_IGNORED);
  Field(res,1) = Val_int(GTK_BUTTON_SELECTS);
  Field(res,2) = Val_int(GTK_BUTTON_DRAGS);
  Field(res,3) = Val_int(GTK_BUTTON_EXPANDS);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_ctree_pos (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_CTREE_POS_BEFORE);
  Field(res,1) = Val_int(GTK_CTREE_POS_AS_CHILD);
  Field(res,2) = Val_int(GTK_CTREE_POS_AFTER);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_ctree_line_style (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_CTREE_LINES_NONE);
  Field(res,1) = Val_int(GTK_CTREE_LINES_SOLID);
  Field(res,2) = Val_int(GTK_CTREE_LINES_DOTTED);
  Field(res,3) = Val_int(GTK_CTREE_LINES_TABBED);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_ctree_expander_style (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_CTREE_EXPANDER_NONE);
  Field(res,1) = Val_int(GTK_CTREE_EXPANDER_SQUARE);
  Field(res,2) = Val_int(GTK_CTREE_EXPANDER_TRIANGLE);
  Field(res,3) = Val_int(GTK_CTREE_EXPANDER_CIRCULAR);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_ctree_expansion_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_CTREE_EXPANSION_EXPAND);
  Field(res,1) = Val_int(GTK_CTREE_EXPANSION_EXPAND_RECURSIVE);
  Field(res,2) = Val_int(GTK_CTREE_EXPANSION_COLLAPSE);
  Field(res,3) = Val_int(GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE);
  Field(res,4) = Val_int(GTK_CTREE_EXPANSION_TOGGLE);
  Field(res,5) = Val_int(GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_debug_flag (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_DEBUG_OBJECTS);
  Field(res,1) = Val_int(GTK_DEBUG_MISC);
  Field(res,2) = Val_int(GTK_DEBUG_SIGNALS);
  Field(res,3) = Val_int(GTK_DEBUG_DND);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_dest_defaults (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_DEST_DEFAULT_MOTION);
  Field(res,1) = Val_int(GTK_DEST_DEFAULT_HIGHLIGHT);
  Field(res,2) = Val_int(GTK_DEST_DEFAULT_DROP);
  Field(res,3) = Val_int(GTK_DEST_DEFAULT_ALL);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_target_flags (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_TARGET_SAME_APP);
  Field(res,1) = Val_int(GTK_TARGET_SAME_WIDGET);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_arrow_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_ARROW_UP);
  Field(res,1) = Val_int(GTK_ARROW_DOWN);
  Field(res,2) = Val_int(GTK_ARROW_LEFT);
  Field(res,3) = Val_int(GTK_ARROW_RIGHT);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_attach_options (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_EXPAND);
  Field(res,1) = Val_int(GTK_SHRINK);
  Field(res,2) = Val_int(GTK_FILL);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_button_box_style (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_BUTTONBOX_DEFAULT_STYLE);
  Field(res,1) = Val_int(GTK_BUTTONBOX_SPREAD);
  Field(res,2) = Val_int(GTK_BUTTONBOX_EDGE);
  Field(res,3) = Val_int(GTK_BUTTONBOX_START);
  Field(res,4) = Val_int(GTK_BUTTONBOX_END);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_curve_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_CURVE_TYPE_LINEAR);
  Field(res,1) = Val_int(GTK_CURVE_TYPE_SPLINE);
  Field(res,2) = Val_int(GTK_CURVE_TYPE_FREE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_direction_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_DIR_TAB_FORWARD);
  Field(res,1) = Val_int(GTK_DIR_TAB_BACKWARD);
  Field(res,2) = Val_int(GTK_DIR_UP);
  Field(res,3) = Val_int(GTK_DIR_DOWN);
  Field(res,4) = Val_int(GTK_DIR_LEFT);
  Field(res,5) = Val_int(GTK_DIR_RIGHT);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_justification (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_JUSTIFY_LEFT);
  Field(res,1) = Val_int(GTK_JUSTIFY_RIGHT);
  Field(res,2) = Val_int(GTK_JUSTIFY_CENTER);
  Field(res,3) = Val_int(GTK_JUSTIFY_FILL);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_match_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_MATCH_ALL);
  Field(res,1) = Val_int(GTK_MATCH_ALL_TAIL);
  Field(res,2) = Val_int(GTK_MATCH_HEAD);
  Field(res,3) = Val_int(GTK_MATCH_TAIL);
  Field(res,4) = Val_int(GTK_MATCH_EXACT);
  Field(res,5) = Val_int(GTK_MATCH_LAST);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_menu_direction_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_MENU_DIR_PARENT);
  Field(res,1) = Val_int(GTK_MENU_DIR_CHILD);
  Field(res,2) = Val_int(GTK_MENU_DIR_NEXT);
  Field(res,3) = Val_int(GTK_MENU_DIR_PREV);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_menu_factory_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_MENU_FACTORY_MENU);
  Field(res,1) = Val_int(GTK_MENU_FACTORY_MENU_BAR);
  Field(res,2) = Val_int(GTK_MENU_FACTORY_OPTION_MENU);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_metric_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_PIXELS);
  Field(res,1) = Val_int(GTK_INCHES);
  Field(res,2) = Val_int(GTK_CENTIMETERS);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_orientation (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_ORIENTATION_HORIZONTAL);
  Field(res,1) = Val_int(GTK_ORIENTATION_VERTICAL);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_corner_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_CORNER_TOP_LEFT);
  Field(res,1) = Val_int(GTK_CORNER_BOTTOM_LEFT);
  Field(res,2) = Val_int(GTK_CORNER_TOP_RIGHT);
  Field(res,3) = Val_int(GTK_CORNER_BOTTOM_RIGHT);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_pack_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_PACK_START);
  Field(res,1) = Val_int(GTK_PACK_END);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_path_priority_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_PATH_PRIO_LOWEST);
  Field(res,1) = Val_int(GTK_PATH_PRIO_GTK);
  Field(res,2) = Val_int(GTK_PATH_PRIO_APPLICATION);
  Field(res,3) = Val_int(GTK_PATH_PRIO_RC);
  Field(res,4) = Val_int(GTK_PATH_PRIO_HIGHEST);
  Field(res,5) = Val_int(GTK_PATH_PRIO_MASK);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_path_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_PATH_WIDGET);
  Field(res,1) = Val_int(GTK_PATH_WIDGET_CLASS);
  Field(res,2) = Val_int(GTK_PATH_CLASS);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_policy_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_POLICY_ALWAYS);
  Field(res,1) = Val_int(GTK_POLICY_AUTOMATIC);
  Field(res,2) = Val_int(GTK_POLICY_NEVER);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_position_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_POS_LEFT);
  Field(res,1) = Val_int(GTK_POS_RIGHT);
  Field(res,2) = Val_int(GTK_POS_TOP);
  Field(res,3) = Val_int(GTK_POS_BOTTOM);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_preview_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_PREVIEW_COLOR);
  Field(res,1) = Val_int(GTK_PREVIEW_GRAYSCALE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_relief_style (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_RELIEF_NORMAL);
  Field(res,1) = Val_int(GTK_RELIEF_HALF);
  Field(res,2) = Val_int(GTK_RELIEF_NONE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_resize_mode (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_RESIZE_PARENT);
  Field(res,1) = Val_int(GTK_RESIZE_QUEUE);
  Field(res,2) = Val_int(GTK_RESIZE_IMMEDIATE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_signal_run_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_RUN_FIRST);
  Field(res,1) = Val_int(GTK_RUN_LAST);
  Field(res,2) = Val_int(GTK_RUN_BOTH);
  Field(res,3) = Val_int(GTK_RUN_NO_RECURSE);
  Field(res,4) = Val_int(GTK_RUN_ACTION);
  Field(res,5) = Val_int(GTK_RUN_NO_HOOKS);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_scroll_type (value dummy) { /* ML */
  value res = alloc_tuple(6);
  Field(res,0) = Val_int(GTK_SCROLL_NONE);
  Field(res,1) = Val_int(GTK_SCROLL_STEP_BACKWARD);
  Field(res,2) = Val_int(GTK_SCROLL_STEP_FORWARD);
  Field(res,3) = Val_int(GTK_SCROLL_PAGE_BACKWARD);
  Field(res,4) = Val_int(GTK_SCROLL_PAGE_FORWARD);
  Field(res,5) = Val_int(GTK_SCROLL_JUMP);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_selection_mode (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_SELECTION_SINGLE);
  Field(res,1) = Val_int(GTK_SELECTION_BROWSE);
  Field(res,2) = Val_int(GTK_SELECTION_MULTIPLE);
  Field(res,3) = Val_int(GTK_SELECTION_EXTENDED);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_shadow_type (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_SHADOW_NONE);
  Field(res,1) = Val_int(GTK_SHADOW_IN);
  Field(res,2) = Val_int(GTK_SHADOW_OUT);
  Field(res,3) = Val_int(GTK_SHADOW_ETCHED_IN);
  Field(res,4) = Val_int(GTK_SHADOW_ETCHED_OUT);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_state_type (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_STATE_NORMAL);
  Field(res,1) = Val_int(GTK_STATE_ACTIVE);
  Field(res,2) = Val_int(GTK_STATE_PRELIGHT);
  Field(res,3) = Val_int(GTK_STATE_SELECTED);
  Field(res,4) = Val_int(GTK_STATE_INSENSITIVE);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_submenu_direction (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_DIRECTION_LEFT);
  Field(res,1) = Val_int(GTK_DIRECTION_RIGHT);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_submenu_placement (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_TOP_BOTTOM);
  Field(res,1) = Val_int(GTK_LEFT_RIGHT);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_toolbar_style (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_TOOLBAR_ICONS);
  Field(res,1) = Val_int(GTK_TOOLBAR_TEXT);
  Field(res,2) = Val_int(GTK_TOOLBAR_BOTH);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_trough_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_TROUGH_NONE);
  Field(res,1) = Val_int(GTK_TROUGH_START);
  Field(res,2) = Val_int(GTK_TROUGH_END);
  Field(res,3) = Val_int(GTK_TROUGH_JUMP);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_update_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_UPDATE_CONTINUOUS);
  Field(res,1) = Val_int(GTK_UPDATE_DISCONTINUOUS);
  Field(res,2) = Val_int(GTK_UPDATE_DELAYED);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_visibility (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_VISIBILITY_NONE);
  Field(res,1) = Val_int(GTK_VISIBILITY_PARTIAL);
  Field(res,2) = Val_int(GTK_VISIBILITY_FULL);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_window_position (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_WIN_POS_NONE);
  Field(res,1) = Val_int(GTK_WIN_POS_CENTER);
  Field(res,2) = Val_int(GTK_WIN_POS_MOUSE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_window_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_WINDOW_TOPLEVEL);
  Field(res,1) = Val_int(GTK_WINDOW_DIALOG);
  Field(res,2) = Val_int(GTK_WINDOW_POPUP);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_sort_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_SORT_ASCENDING);
  Field(res,1) = Val_int(GTK_SORT_DESCENDING);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_font_metric_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_FONT_METRIC_PIXELS);
  Field(res,1) = Val_int(GTK_FONT_METRIC_POINTS);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_font_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_FONT_BITMAP);
  Field(res,1) = Val_int(GTK_FONT_SCALABLE);
  Field(res,2) = Val_int(GTK_FONT_SCALABLE_BITMAP);
  Field(res,3) = Val_int(GTK_FONT_ALL);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_font_filter_type (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_FONT_FILTER_BASE);
  Field(res,1) = Val_int(GTK_FONT_FILTER_USER);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_object_flags (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_DESTROYED);
  Field(res,1) = Val_int(GTK_FLOATING);
  Field(res,2) = Val_int(GTK_CONNECTED);
  Field(res,3) = Val_int(GTK_CONSTRUCTED);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_arg_flags (value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res,0) = Val_int(GTK_ARG_READABLE);
  Field(res,1) = Val_int(GTK_ARG_WRITABLE);
  Field(res,2) = Val_int(GTK_ARG_CONSTRUCT);
  Field(res,3) = Val_int(GTK_ARG_CONSTRUCT_ONLY);
  Field(res,4) = Val_int(GTK_ARG_CHILD_ARG);
  Field(res,5) = Val_int(GTK_ARG_MASK);
  Field(res,6) = Val_int(GTK_ARG_READWRITE);
  return res;
}

/* ML type: unit -> int * int * int */
EXTERNML value mgtk_get_gtk_packer_options (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GTK_PACK_EXPAND);
  Field(res,1) = Val_int(GTK_FILL_X);
  Field(res,2) = Val_int(GTK_FILL_Y);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_side_type (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_SIDE_TOP);
  Field(res,1) = Val_int(GTK_SIDE_BOTTOM);
  Field(res,2) = Val_int(GTK_SIDE_LEFT);
  Field(res,3) = Val_int(GTK_SIDE_RIGHT);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_anchor_type (value dummy) { /* ML */
  value res = alloc_tuple(17);
  Field(res,0) = Val_int(GTK_ANCHOR_CENTER);
  Field(res,1) = Val_int(GTK_ANCHOR_NORTH);
  Field(res,2) = Val_int(GTK_ANCHOR_NORTH_WEST);
  Field(res,3) = Val_int(GTK_ANCHOR_NORTH_EAST);
  Field(res,4) = Val_int(GTK_ANCHOR_SOUTH);
  Field(res,5) = Val_int(GTK_ANCHOR_SOUTH_WEST);
  Field(res,6) = Val_int(GTK_ANCHOR_SOUTH_EAST);
  Field(res,7) = Val_int(GTK_ANCHOR_WEST);
  Field(res,8) = Val_int(GTK_ANCHOR_EAST);
  Field(res,9) = Val_int(GTK_ANCHOR_N);
  Field(res,10) = Val_int(GTK_ANCHOR_NW);
  Field(res,11) = Val_int(GTK_ANCHOR_NE);
  Field(res,12) = Val_int(GTK_ANCHOR_S);
  Field(res,13) = Val_int(GTK_ANCHOR_SW);
  Field(res,14) = Val_int(GTK_ANCHOR_SE);
  Field(res,15) = Val_int(GTK_ANCHOR_W);
  Field(res,16) = Val_int(GTK_ANCHOR_E);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_progress_bar_style (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_PROGRESS_CONTINUOUS);
  Field(res,1) = Val_int(GTK_PROGRESS_DISCRETE);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_progress_bar_orientation (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_PROGRESS_LEFT_TO_RIGHT);
  Field(res,1) = Val_int(GTK_PROGRESS_RIGHT_TO_LEFT);
  Field(res,2) = Val_int(GTK_PROGRESS_BOTTOM_TO_TOP);
  Field(res,3) = Val_int(GTK_PROGRESS_TOP_TO_BOTTOM);
  return res;
}

/* ML type: unit -> int * int * int * int */
EXTERNML value mgtk_get_gtk_rc_flags (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_RC_FG);
  Field(res,1) = Val_int(GTK_RC_BG);
  Field(res,2) = Val_int(GTK_RC_TEXT);
  Field(res,3) = Val_int(GTK_RC_BASE);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_rc_token_type (value dummy) { /* ML */
  value res = alloc_tuple(29);
  Field(res,0) = Val_int(GTK_RC_TOKEN_INVALID);
  Field(res,1) = Val_int(GTK_RC_TOKEN_INCLUDE);
  Field(res,2) = Val_int(GTK_RC_TOKEN_NORMAL);
  Field(res,3) = Val_int(GTK_RC_TOKEN_ACTIVE);
  Field(res,4) = Val_int(GTK_RC_TOKEN_PRELIGHT);
  Field(res,5) = Val_int(GTK_RC_TOKEN_SELECTED);
  Field(res,6) = Val_int(GTK_RC_TOKEN_INSENSITIVE);
  Field(res,7) = Val_int(GTK_RC_TOKEN_FG);
  Field(res,8) = Val_int(GTK_RC_TOKEN_BG);
  Field(res,9) = Val_int(GTK_RC_TOKEN_BASE);
  Field(res,10) = Val_int(GTK_RC_TOKEN_TEXT);
  Field(res,11) = Val_int(GTK_RC_TOKEN_FONT);
  Field(res,12) = Val_int(GTK_RC_TOKEN_FONTSET);
  Field(res,13) = Val_int(GTK_RC_TOKEN_BG_PIXMAP);
  Field(res,14) = Val_int(GTK_RC_TOKEN_PIXMAP_PATH);
  Field(res,15) = Val_int(GTK_RC_TOKEN_STYLE);
  Field(res,16) = Val_int(GTK_RC_TOKEN_BINDING);
  Field(res,17) = Val_int(GTK_RC_TOKEN_BIND);
  Field(res,18) = Val_int(GTK_RC_TOKEN_WIDGET);
  Field(res,19) = Val_int(GTK_RC_TOKEN_WIDGET_CLASS);
  Field(res,20) = Val_int(GTK_RC_TOKEN_CLASS);
  Field(res,21) = Val_int(GTK_RC_TOKEN_LOWEST);
  Field(res,22) = Val_int(GTK_RC_TOKEN_GTK);
  Field(res,23) = Val_int(GTK_RC_TOKEN_APPLICATION);
  Field(res,24) = Val_int(GTK_RC_TOKEN_RC);
  Field(res,25) = Val_int(GTK_RC_TOKEN_HIGHEST);
  Field(res,26) = Val_int(GTK_RC_TOKEN_ENGINE);
  Field(res,27) = Val_int(GTK_RC_TOKEN_MODULE_PATH);
  Field(res,28) = Val_int(GTK_RC_TOKEN_LAST);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_spin_button_update_policy (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_UPDATE_ALWAYS);
  Field(res,1) = Val_int(GTK_UPDATE_IF_VALID);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_spin_type (value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res,0) = Val_int(GTK_SPIN_STEP_FORWARD);
  Field(res,1) = Val_int(GTK_SPIN_STEP_BACKWARD);
  Field(res,2) = Val_int(GTK_SPIN_PAGE_FORWARD);
  Field(res,3) = Val_int(GTK_SPIN_PAGE_BACKWARD);
  Field(res,4) = Val_int(GTK_SPIN_HOME);
  Field(res,5) = Val_int(GTK_SPIN_END);
  Field(res,6) = Val_int(GTK_SPIN_USER_DEFINED);
  return res;
}

/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_toolbar_child_type (value dummy) { /* ML */
  value res = alloc_tuple(5);
  Field(res,0) = Val_int(GTK_TOOLBAR_CHILD_SPACE);
  Field(res,1) = Val_int(GTK_TOOLBAR_CHILD_BUTTON);
  Field(res,2) = Val_int(GTK_TOOLBAR_CHILD_TOGGLEBUTTON);
  Field(res,3) = Val_int(GTK_TOOLBAR_CHILD_RADIOBUTTON);
  Field(res,4) = Val_int(GTK_TOOLBAR_CHILD_WIDGET);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_toolbar_space_style (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_TOOLBAR_SPACE_EMPTY);
  Field(res,1) = Val_int(GTK_TOOLBAR_SPACE_LINE);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_get_gtk_tree_view_mode (value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res,0) = Val_int(GTK_TREE_VIEW_LINE);
  Field(res,1) = Val_int(GTK_TREE_VIEW_ITEM);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_fundamental_type (value dummy) { /* ML */
  value res = alloc_tuple(22);
  Field(res,0) = Val_int(GTK_TYPE_INVALID);
  Field(res,1) = Val_int(GTK_TYPE_NONE);
  Field(res,2) = Val_int(GTK_TYPE_CHAR);
  Field(res,3) = Val_int(GTK_TYPE_UCHAR);
  Field(res,4) = Val_int(GTK_TYPE_BOOL);
  Field(res,5) = Val_int(GTK_TYPE_INT);
  Field(res,6) = Val_int(GTK_TYPE_UINT);
  Field(res,7) = Val_int(GTK_TYPE_LONG);
  Field(res,8) = Val_int(GTK_TYPE_ULONG);
  Field(res,9) = Val_int(GTK_TYPE_FLOAT);
  Field(res,10) = Val_int(GTK_TYPE_DOUBLE);
  Field(res,11) = Val_int(GTK_TYPE_STRING);
  Field(res,12) = Val_int(GTK_TYPE_ENUM);
  Field(res,13) = Val_int(GTK_TYPE_FLAGS);
  Field(res,14) = Val_int(GTK_TYPE_BOXED);
  Field(res,15) = Val_int(GTK_TYPE_POINTER);
  Field(res,16) = Val_int(GTK_TYPE_SIGNAL);
  Field(res,17) = Val_int(GTK_TYPE_ARGS);
  Field(res,18) = Val_int(GTK_TYPE_CALLBACK);
  Field(res,19) = Val_int(GTK_TYPE_C_CALLBACK);
  Field(res,20) = Val_int(GTK_TYPE_FOREIGN);
  Field(res,21) = Val_int(GTK_TYPE_OBJECT);
  return res;
}

/* ML type: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_widget_flags (value dummy) { /* ML */
  value res = alloc_tuple(16);
  Field(res,0) = Val_int(GTK_TOPLEVEL);
  Field(res,1) = Val_int(GTK_NO_WINDOW);
  Field(res,2) = Val_int(GTK_REALIZED);
  Field(res,3) = Val_int(GTK_MAPPED);
  Field(res,4) = Val_int(GTK_VISIBLE);
  Field(res,5) = Val_int(GTK_SENSITIVE);
  Field(res,6) = Val_int(GTK_PARENT_SENSITIVE);
  Field(res,7) = Val_int(GTK_CAN_FOCUS);
  Field(res,8) = Val_int(GTK_HAS_FOCUS);
  Field(res,9) = Val_int(GTK_CAN_DEFAULT);
  Field(res,10) = Val_int(GTK_HAS_DEFAULT);
  Field(res,11) = Val_int(GTK_HAS_GRAB);
  Field(res,12) = Val_int(GTK_RC_STYLE);
  Field(res,13) = Val_int(GTK_COMPOSITE_CHILD);
  Field(res,14) = Val_int(GTK_NO_REPARENT);
  Field(res,15) = Val_int(GTK_APP_PAINTABLE);
  return res;
}

#define gtk_accel_group_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gtk_accel_group (value val) {
  gtk_accel_group_unref (gtk_accel_group_val(val)); 
}

value Val_gtk_accel_group (void* obj) {
  value res;
  gtk_accel_group_ref(obj);
  res = alloc_final (2, ml_finalize_gtk_accel_group, 0, 1);
  gtk_accel_group_val(res) = obj;
  return res;
}

#define gtk_style_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gtk_style (value val) {
  gtk_style_unref (gtk_style_val(val)); 
}

value Val_gtk_style (void* obj) {
  value res;
  gtk_style_ref(obj);
  res = alloc_final (2, ml_finalize_gtk_style, 0, 1);
  gtk_style_val(res) = obj;
  return res;
}

#define gtk_selection_data_val(x) (((void*) Field(x, 1)))

static void ml_finalize_gtk_selection_data (value val) {
  gtk_selection_data_free (gtk_selection_data_val(val)); 
}

value Val_gtk_selection_data (void* obj) {
  value res;
  void* copy = gtk_selection_data_copy(obj);
  res = alloc_final (2, ml_finalize_gtk_selection_data, 0, 1);
  gtk_selection_data_val(res) = copy;
  return res;
}

/* ML type: gtk_style * gdk_window * int * int * int * bool * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_arrow(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value arrow_type = Field(mgtk_params, 4);
  value fill = Field(mgtk_params, 5);
  value x = Field(mgtk_params, 6);
  value y = Field(mgtk_params, 7);
  value width = Field(mgtk_params, 8);
  value height = Field(mgtk_params, 9);
  gtk_draw_arrow(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(arrow_type), Bool_val(fill), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_box(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_box(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_box_gap(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  value gap_side = Field(mgtk_params, 8);
  value gap_x = Field(mgtk_params, 9);
  value gap_width = Field(mgtk_params, 10);
  gtk_draw_box_gap(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(gap_side), Int_val(gap_x), Int_val(gap_width));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_check(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_check(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_cross(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_cross(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_diamond(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_diamond(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_extension(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  value gap_side = Field(mgtk_params, 8);
  gtk_draw_extension(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(gap_side));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_flat_box(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_flat_box(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_focus(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value x = Field(mgtk_params, 2);
  value y = Field(mgtk_params, 3);
  value width = Field(mgtk_params, 4);
  value height = Field(mgtk_params, 5);
  gtk_draw_focus(gtk_style_val(style), gdk_window_val(window), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_handle(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  value orientation = Field(mgtk_params, 8);
  gtk_draw_handle(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(orientation));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_hline(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value x1 = Field(mgtk_params, 3);
  value x2 = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  gtk_draw_hline(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(x1), Int_val(x2), Int_val(y));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_option(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_option(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_oval(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_oval(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_ramp(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value arrow_type = Field(mgtk_params, 4);
  value x = Field(mgtk_params, 5);
  value y = Field(mgtk_params, 6);
  value width = Field(mgtk_params, 7);
  value height = Field(mgtk_params, 8);
  gtk_draw_ramp(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(arrow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_shadow(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_shadow(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_shadow_gap(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  value gap_side = Field(mgtk_params, 8);
  value gap_x = Field(mgtk_params, 9);
  value gap_width = Field(mgtk_params, 10);
  gtk_draw_shadow_gap(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(gap_side), Int_val(gap_x), Int_val(gap_width));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_slider(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  value orientation = Field(mgtk_params, 8);
  gtk_draw_slider(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height), Int_val(orientation));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * string -> unit */
EXTERNML value mgtk_gtk_draw_string(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value x = Field(mgtk_params, 3);
  value y = Field(mgtk_params, 4);
  value string = Field(mgtk_params, 5);
  gtk_draw_string(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(x), Int_val(y), String_val(string));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_tab(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value shadow_type = Field(mgtk_params, 3);
  value x = Field(mgtk_params, 4);
  value y = Field(mgtk_params, 5);
  value width = Field(mgtk_params, 6);
  value height = Field(mgtk_params, 7);
  gtk_draw_tab(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(shadow_type), Int_val(x), Int_val(y), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtk_style * gdk_window * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_draw_vline(value mgtk_params) { /* ML */
  value style = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value state_type = Field(mgtk_params, 2);
  value y1 = Field(mgtk_params, 3);
  value y2 = Field(mgtk_params, 4);
  value x = Field(mgtk_params, 5);
  gtk_draw_vline(gtk_style_val(style), gdk_window_val(window), Int_val(state_type), Int_val(y1), Int_val(y2), Int_val(x));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_grab_add(value widget) { /* ML */
  gtk_grab_add(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_grab_get_current(value dummy) { /* ML */
  return Val_GtkObj(gtk_grab_get_current());
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_grab_remove(value widget) { /* ML */
  gtk_grab_remove(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gdk_drag_context -> bool -> bool -> word -> unit */
EXTERNML value mgtk_gtk_drag_finish(value context, value success, value del, value time) { /* ML */
  gtk_drag_finish(gdk_drag_context_val(context), Bool_val(success), Bool_val(del), Int_val(time));
  return Val_unit;
}

/* ML type: gdk_drag_context -> gtkobj */
EXTERNML value mgtk_gtk_drag_get_source_widget(value context) { /* ML */
  return Val_GtkObj(gtk_drag_get_source_widget(gdk_drag_context_val(context)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_drag_highlight(value widget) { /* ML */
  gtk_drag_highlight(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_drag_unhighlight(value widget) { /* ML */
  gtk_drag_unhighlight(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> gdk_window -> int -> bool -> unit */
EXTERNML value mgtk_gtk_drag_dest_set_proxy(value widget, value proxy_window, value protocol, value use_coordinates) { /* ML */
  gtk_drag_dest_set_proxy(GtkObj_val(widget), gdk_window_val(proxy_window), Int_val(protocol), Bool_val(use_coordinates));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_drag_dest_unset(value widget) { /* ML */
  gtk_drag_dest_unset(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_drag_source_unset(value widget) { /* ML */
  gtk_drag_source_unset(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> unit */
EXTERNML value mgtk_gtk_drag_source_set_icon(value widget, value colormap, value pixmap, value mask) { /* ML */
  gtk_drag_source_set_icon(GtkObj_val(widget), gdk_colormap_val(colormap), gdk_pixmap_val(pixmap), gdk_bitmap_val(mask));
  return Val_unit;
}

/* ML type: gdk_drag_context -> gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_drag_set_icon_widget(value context, value widget, value hot_x, value hot_y) { /* ML */
  gtk_drag_set_icon_widget(gdk_drag_context_val(context), GtkObj_val(widget), Int_val(hot_x), Int_val(hot_y));
  return Val_unit;
}

/* ML type: gdk_drag_context * gdk_colormap * gdk_pixmap * gdk_bitmap * int * int -> unit */
EXTERNML value mgtk_gtk_drag_set_icon_pixmap(value mgtk_params) { /* ML */
  value context = Field(mgtk_params, 0);
  value colormap = Field(mgtk_params, 1);
  value pixmap = Field(mgtk_params, 2);
  value mask = Field(mgtk_params, 3);
  value hot_x = Field(mgtk_params, 4);
  value hot_y = Field(mgtk_params, 5);
  gtk_drag_set_icon_pixmap(gdk_drag_context_val(context), gdk_colormap_val(colormap), gdk_pixmap_val(pixmap), gdk_bitmap_val(mask), Int_val(hot_x), Int_val(hot_y));
  return Val_unit;
}

/* ML type: gdk_drag_context -> unit */
EXTERNML value mgtk_gtk_drag_set_icon_default(value context) { /* ML */
  gtk_drag_set_icon_default(gdk_drag_context_val(context));
  return Val_unit;
}

/* ML type: gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit */
EXTERNML value mgtk_gtk_drag_set_default_icon(value colormap, value pixmap, value mask, value hot_x, value hot_y) { /* ML */
  gtk_drag_set_default_icon(gdk_colormap_val(colormap), gdk_pixmap_val(pixmap), gdk_bitmap_val(mask), Int_val(hot_x), Int_val(hot_y));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_selection_remove_all(value widget) { /* ML */
  gtk_selection_remove_all(GtkObj_val(widget));
  return Val_unit;
}

/* *** Data stuff *** */


/* *** Adjustment stuff *** */

/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_value(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> value);
}


/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_lower(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> lower);
}


/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_upper(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> upper);
}


/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_step_increment(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> step_increment);
}


/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_page_increment(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> page_increment);
}


/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_adjustment_get_page_size(value wid) { /* ML */
  return copy_double((GTK_ADJUSTMENT(GtkObj_val(wid))) -> page_size);
}


/* ML type: real * real * real * real * real * real -> gtkobj */
EXTERNML value mgtk_gtk_adjustment_new(value mgtk_params) { /* ML */
  value valu = Field(mgtk_params, 0);
  value lower = Field(mgtk_params, 1);
  value upper = Field(mgtk_params, 2);
  value step_increment = Field(mgtk_params, 3);
  value page_increment = Field(mgtk_params, 4);
  value page_size = Field(mgtk_params, 5);
  return Val_GtkObj(gtk_adjustment_new(Double_val(valu), Double_val(lower), Double_val(upper), Double_val(step_increment), Double_val(page_increment), Double_val(page_size)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_adjustment_changed(value adjustment) { /* ML */
  gtk_adjustment_changed(GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_adjustment_value_changed(value adjustment) { /* ML */
  gtk_adjustment_value_changed(GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> unit */
EXTERNML value mgtk_gtk_adjustment_clamp_page(value adjustment, value lower, value upper) { /* ML */
  gtk_adjustment_clamp_page(GtkObj_val(adjustment), Double_val(lower), Double_val(upper));
  return Val_unit;
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_adjustment_set_value(value adjustment, value valu) { /* ML */
  gtk_adjustment_set_value(GtkObj_val(adjustment), Double_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> gdk_window */
EXTERNML value mgtk_gtk_widget_get_window(value widget) { /* ML */
  return Val_gdk_window(gtk_widget_get_window(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gdk_drawable */
EXTERNML value mgtk_gtk_widget_get_drawable(value widget) { /* ML */
  return Val_gdk_drawable(gtk_widget_get_drawable(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_widget_get_state(value widget) { /* ML */
  return Val_int(gtk_widget_get_state(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int * int * int * int */
EXTERNML value mgtk_gtk_widget_get_allocation(value widget) { /* ML */
  value res;
  int reswidth;
  int resheight;
  int resx;
  int resy;
  gtk_widget_get_allocation(GtkObj_val(widget), &reswidth, &resheight, &resx, &resy);
  res = alloc_tuple(4);
  Field(res, 0) = Val_int(reswidth);
  Field(res, 1) = Val_int(resheight);
  Field(res, 2) = Val_int(resx);
  Field(res, 3) = Val_int(resy);
  return res;
}

/* ML type: gtkobj -> int -> gdk_gc */
EXTERNML value mgtk_gtk_widget_get_style_fg_gc(value widget, value state) { /* ML */
  return Val_gdk_gc(gtk_widget_get_style_fg_gc(GtkObj_val(widget), Int_val(state)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_destroy(value widget) { /* ML */
  gtk_widget_destroy(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_unparent(value widget) { /* ML */
  gtk_widget_unparent(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_show(value widget) { /* ML */
  gtk_widget_show(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_show_now(value widget) { /* ML */
  gtk_widget_show_now(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_hide(value widget) { /* ML */
  gtk_widget_hide(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_show_all(value widget) { /* ML */
  gtk_widget_show_all(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_hide_all(value widget) { /* ML */
  gtk_widget_hide_all(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_map(value widget) { /* ML */
  gtk_widget_map(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_unmap(value widget) { /* ML */
  gtk_widget_unmap(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_realize(value widget) { /* ML */
  gtk_widget_realize(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_unrealize(value widget) { /* ML */
  gtk_widget_unrealize(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_queue_draw(value widget) { /* ML */
  gtk_widget_queue_draw(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_queue_resize(value widget) { /* ML */
  gtk_widget_queue_resize(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_draw_focus(value widget) { /* ML */
  gtk_widget_draw_focus(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_draw_default(value widget) { /* ML */
  gtk_widget_draw_default(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj * string * gtk_accel_group * word * int * int -> unit */
EXTERNML value mgtk_gtk_widget_add_accelerator(value mgtk_params) { /* ML */
  value widget = Field(mgtk_params, 0);
  value signal_name = Field(mgtk_params, 1);
  value group = Field(mgtk_params, 2);
  value key = Field(mgtk_params, 3);
  value modifiers = Field(mgtk_params, 4);
  value flags = Field(mgtk_params, 5);
  gtk_widget_add_accelerator(GtkObj_val(widget), String_val(signal_name), gtk_accel_group_val(group), Int_val(key), Int_val(modifiers), Int_val(flags));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group -> word -> int -> unit */
EXTERNML value mgtk_gtk_widget_remove_accelerator(value widget, value group, value key, value modifiers) { /* ML */
  gtk_widget_remove_accelerator(GtkObj_val(widget), gtk_accel_group_val(group), Int_val(key), Int_val(modifiers));
  return Val_unit;
}

/* ML type: gtkobj -> string -> bool -> unit */
EXTERNML value mgtk_gtk_widget_remove_accelerators(value widget, value signal_name, value visible_only) { /* ML */
  gtk_widget_remove_accelerators(GtkObj_val(widget), String_val(signal_name), Bool_val(visible_only));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group -> word -> int -> word */
EXTERNML value mgtk_gtk_widget_accelerator_signal(value widget, value group, value key, value modifiers) { /* ML */
  return Val_int(gtk_widget_accelerator_signal(GtkObj_val(widget), gtk_accel_group_val(group), Int_val(key), Int_val(modifiers)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_lock_accelerators(value widget) { /* ML */
  gtk_widget_lock_accelerators(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_unlock_accelerators(value widget) { /* ML */
  gtk_widget_unlock_accelerators(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> bool */
EXTERNML value mgtk_gtk_widget_accelerators_locked(value widget) { /* ML */
  return Val_bool(gtk_widget_accelerators_locked(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gdk_event -> bool */
EXTERNML value mgtk_gtk_widget_event(value widget, value event) { /* ML */
  return Val_bool(gtk_widget_event(GtkObj_val(widget), gdk_event_val(event)));
}

/* ML type: gtkobj -> bool */
EXTERNML value mgtk_gtk_widget_activate(value widget) { /* ML */
  return Val_bool(gtk_widget_activate(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> bool */
EXTERNML value mgtk_gtk_widget_set_scroll_adjustments(value widget, value hadjustment, value vadjustment) { /* ML */
  return Val_bool(gtk_widget_set_scroll_adjustments(GtkObj_val(widget), GtkObj_val(hadjustment), GtkObj_val(vadjustment)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_reparent(value widget, value new_parent) { /* ML */
  gtk_widget_reparent(GtkObj_val(widget), GtkObj_val(new_parent));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_widget_popup(value widget, value x, value y) { /* ML */
  gtk_widget_popup(GtkObj_val(widget), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_grab_focus(value widget) { /* ML */
  gtk_widget_grab_focus(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_grab_default(value widget) { /* ML */
  gtk_widget_grab_default(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_widget_set_name(value widget, value name) { /* ML */
  gtk_widget_set_name(GtkObj_val(widget), String_val(name));
  return Val_unit;
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_widget_get_name(value widget) { /* ML */
  return copy_string(gtk_widget_get_name(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_widget_set_state(value widget, value state) { /* ML */
  gtk_widget_set_state(GtkObj_val(widget), Int_val(state));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_widget_set_sensitive(value widget, value sensitive) { /* ML */
  gtk_widget_set_sensitive(GtkObj_val(widget), Bool_val(sensitive));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_widget_set_app_paintable(value widget, value app_paintable) { /* ML */
  gtk_widget_set_app_paintable(GtkObj_val(widget), Bool_val(app_paintable));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_set_parent(value widget, value parent) { /* ML */
  gtk_widget_set_parent(GtkObj_val(widget), GtkObj_val(parent));
  return Val_unit;
}

/* ML type: gtkobj -> gdk_window -> unit */
EXTERNML value mgtk_gtk_widget_set_parent_window(value widget, value parent_window) { /* ML */
  gtk_widget_set_parent_window(GtkObj_val(widget), gdk_window_val(parent_window));
  return Val_unit;
}

/* ML type: gtkobj -> gdk_window */
EXTERNML value mgtk_gtk_widget_get_parent_window(value widget) { /* ML */
  return Val_gdk_window(gtk_widget_get_parent_window(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_widget_set_uposition(value widget, value x, value y) { /* ML */
  gtk_widget_set_uposition(GtkObj_val(widget), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_widget_set_usize(value widget, value height, value width) { /* ML */
  gtk_widget_set_usize(GtkObj_val(widget), Int_val(height), Int_val(width));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_widget_set_events(value widget, value events) { /* ML */
  gtk_widget_set_events(GtkObj_val(widget), Int_val(events));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_widget_add_events(value widget, value events) { /* ML */
  gtk_widget_add_events(GtkObj_val(widget), Int_val(events));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_widget_set_extension_events(value widget, value events) { /* ML */
  gtk_widget_set_extension_events(GtkObj_val(widget), Int_val(events));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_widget_get_extension_events(value widget) { /* ML */
  return Val_int(gtk_widget_get_extension_events(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_widget_get_toplevel(value widget) { /* ML */
  return Val_GtkObj(gtk_widget_get_toplevel(GtkObj_val(widget)));
}

/* ML type: gtkobj -> word -> gtkobj */
EXTERNML value mgtk_gtk_widget_get_ancestor(value widget, value typ) { /* ML */
  return Val_GtkObj(gtk_widget_get_ancestor(GtkObj_val(widget), Int_val(typ)));
}

/* ML type: gtkobj -> gdk_colormap */
EXTERNML value mgtk_gtk_widget_get_colormap(value widget) { /* ML */
  return Val_gdk_colormap(gtk_widget_get_colormap(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_widget_get_events(value widget) { /* ML */
  return Val_int(gtk_widget_get_events(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gtkobj -> bool */
EXTERNML value mgtk_gtk_widget_is_ancestor(value widget, value ancestor) { /* ML */
  return Val_bool(gtk_widget_is_ancestor(GtkObj_val(widget), GtkObj_val(ancestor)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_widget_hide_on_delete(value widget) { /* ML */
  return Val_int(gtk_widget_hide_on_delete(GtkObj_val(widget)));
}

/* ML type: gtkobj -> gtk_style -> unit */
EXTERNML value mgtk_gtk_widget_set_style(value widget, value style) { /* ML */
  gtk_widget_set_style(GtkObj_val(widget), gtk_style_val(style));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_set_rc_style(value widget) { /* ML */
  gtk_widget_set_rc_style(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_ensure_style(value widget) { /* ML */
  gtk_widget_ensure_style(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_style */
EXTERNML value mgtk_gtk_widget_get_style(value widget) { /* ML */
  return Val_gtk_style(gtk_widget_get_style(GtkObj_val(widget)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_restore_default_style(value widget) { /* ML */
  gtk_widget_restore_default_style(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_widget_set_composite_name(value widget, value name) { /* ML */
  gtk_widget_set_composite_name(GtkObj_val(widget), String_val(name));
  return Val_unit;
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_widget_get_composite_name(value widget) { /* ML */
  return copy_string(gtk_widget_get_composite_name(GtkObj_val(widget)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_widget_reset_rc_styles(value widget) { /* ML */
  gtk_widget_reset_rc_styles(GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtk_style -> unit */
EXTERNML value mgtk_gtk_widget_push_style(value style) { /* ML */
  gtk_widget_push_style(gtk_style_val(style));
  return Val_unit;
}

/* ML type: gdk_colormap -> unit */
EXTERNML value mgtk_gtk_widget_push_colormap(value cmap) { /* ML */
  gtk_widget_push_colormap(gdk_colormap_val(cmap));
  return Val_unit;
}

/* ML type: unit -> unit */
EXTERNML value mgtk_gtk_widget_pop_style(value dummy) { /* ML */
  gtk_widget_pop_style();
  return Val_unit;
}

/* ML type: unit -> unit */
EXTERNML value mgtk_gtk_widget_pop_colormap(value dummy) { /* ML */
  gtk_widget_pop_colormap();
  return Val_unit;
}

/* ML type: gtk_style -> unit */
EXTERNML value mgtk_gtk_widget_set_default_style(value style) { /* ML */
  gtk_widget_set_default_style(gtk_style_val(style));
  return Val_unit;
}

/* ML type: gdk_colormap -> unit */
EXTERNML value mgtk_gtk_widget_set_default_colormap(value cmap) { /* ML */
  gtk_widget_set_default_colormap(gdk_colormap_val(cmap));
  return Val_unit;
}

/* ML type: unit -> gtk_style */
EXTERNML value mgtk_gtk_widget_get_default_style(value dummy) { /* ML */
  return Val_gtk_style(gtk_widget_get_default_style());
}

/* ML type: unit -> gdk_colormap */
EXTERNML value mgtk_gtk_widget_get_default_colormap(value dummy) { /* ML */
  return Val_gdk_colormap(gtk_widget_get_default_colormap());
}

/* ML type: gtkobj -> gdk_bitmap -> int -> int -> unit */
EXTERNML value mgtk_gtk_widget_shape_combine_mask(value widget, value mask, value ofs_x, value ofs_y) { /* ML */
  gtk_widget_shape_combine_mask(GtkObj_val(widget), gdk_bitmap_val(mask), Int_val(ofs_x), Int_val(ofs_y));
  return Val_unit;
}

/* *** Tooltips stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_tooltips_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_tooltips_new());
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tooltips_enable(value tooltips) { /* ML */
  gtk_tooltips_enable(GtkObj_val(tooltips));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tooltips_disable(value tooltips) { /* ML */
  gtk_tooltips_disable(GtkObj_val(tooltips));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tooltips_set_delay(value tooltips, value delay) { /* ML */
  gtk_tooltips_set_delay(GtkObj_val(tooltips), Int_val(delay));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string option -> string option -> unit */
EXTERNML value mgtk_gtk_tooltips_set_tip(value tooltips, value widget, value tip_text, value tip_private) { /* ML */
  gtk_tooltips_set_tip(GtkObj_val(tooltips), GtkObj_val(widget), StringOption_nullok(tip_text), StringOption_nullok(tip_private));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tooltips_set_tip_short(value tooltips, value widget) { /* ML */
  gtk_tooltips_set_tip(GtkObj_val(tooltips), GtkObj_val(widget), NULL, NULL);
  return Val_unit;
}

/* ML type: gtkobj -> gdk_color -> gdk_color -> unit */
EXTERNML value mgtk_gtk_tooltips_set_colors(value tooltips, value background, value foreground) { /* ML */
  gtk_tooltips_set_colors(GtkObj_val(tooltips), gdk_color_val(background), gdk_color_val(foreground));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tooltips_force_window(value tooltips) { /* ML */
  gtk_tooltips_force_window(GtkObj_val(tooltips));
  return Val_unit;
}

/* *** Container stuff *** */


/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_container_set_border_width(value container, value border_width) { /* ML */
  gtk_container_set_border_width(GtkObj_val(container), Int_val(border_width));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_container_add(value container, value widget) { /* ML */
  gtk_container_add(GtkObj_val(container), GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_container_remove(value container, value widget) { /* ML */
  gtk_container_remove(GtkObj_val(container), GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_container_set_resize_mode(value container, value resize_mode) { /* ML */
  gtk_container_set_resize_mode(GtkObj_val(container), Int_val(resize_mode));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_check_resize(value container) { /* ML */
  gtk_container_check_resize(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string */
EXTERNML value mgtk_gtk_container_child_composite_name(value container, value child) { /* ML */
  return copy_string(gtk_container_child_composite_name(GtkObj_val(container), GtkObj_val(child)));
}

/* ML type: gtkobj -> int -> int */
EXTERNML value mgtk_gtk_container_focus(value container, value direction) { /* ML */
  return Val_int(gtk_container_focus(GtkObj_val(container), Int_val(direction)));
}

/* ML type: gtkobj -> gtkobj option -> unit */
EXTERNML value mgtk_gtk_container_set_focus_child(value container, value child) { /* ML */
  gtk_container_set_focus_child(GtkObj_val(container), GtkObjOption_nullok(child));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_set_focus_child_short(value container) { /* ML */
  gtk_container_set_focus_child(GtkObj_val(container), NULL);
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_container_set_focus_vadjustment(value container, value adjustment) { /* ML */
  gtk_container_set_focus_vadjustment(GtkObj_val(container), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_container_set_focus_hadjustment(value container, value adjustment) { /* ML */
  gtk_container_set_focus_hadjustment(GtkObj_val(container), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_register_toplevel(value container) { /* ML */
  gtk_container_register_toplevel(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_unregister_toplevel(value container) { /* ML */
  gtk_container_unregister_toplevel(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_resize_children(value container) { /* ML */
  gtk_container_resize_children(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_container_child_type(value container) { /* ML */
  return Val_int(gtk_container_child_type(GtkObj_val(container)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_clear_resize_widgets(value container) { /* ML */
  gtk_container_clear_resize_widgets(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_dequeue_resize_handler(value container) { /* ML */
  gtk_container_dequeue_resize_handler(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_container_queue_resize(value container) { /* ML */
  gtk_container_queue_resize(GtkObj_val(container));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_container_set_reallocate_redraws(value container, value needs_redraws) { /* ML */
  gtk_container_set_reallocate_redraws(GtkObj_val(container), Bool_val(needs_redraws));
  return Val_unit;
}

/* *** Fixed stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_fixed_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_fixed_new());
}

/* ML type: gtkobj -> gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_fixed_put(value fixed, value widget, value x, value y) { /* ML */
  gtk_fixed_put(GtkObj_val(fixed), GtkObj_val(widget), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_fixed_move(value fixed, value widget, value x, value y) { /* ML */
  gtk_fixed_move(GtkObj_val(fixed), GtkObj_val(widget), Int_val(x), Int_val(y));
  return Val_unit;
}

/* *** Bin stuff *** */


/* *** EventBox stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_event_box_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_event_box_new());
}

/* *** Window stuff *** */


/* ML type: int -> gtkobj */
EXTERNML value mgtk_gtk_window_new(value typ) { /* ML */
  return Val_GtkObj(gtk_window_new(Int_val(typ)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_window_set_title(value window, value title) { /* ML */
  gtk_window_set_title(GtkObj_val(window), String_val(title));
  return Val_unit;
}

/* ML type: gtkobj -> string -> string -> unit */
EXTERNML value mgtk_gtk_window_set_wmclass(value window, value wmclass_class, value wmclass_name) { /* ML */
  gtk_window_set_wmclass(GtkObj_val(window), String_val(wmclass_class), String_val(wmclass_name));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> bool -> bool -> unit */
EXTERNML value mgtk_gtk_window_set_policy(value window, value allow_shrink, value allow_grow, value auto_shrink) { /* ML */
  gtk_window_set_policy(GtkObj_val(window), Bool_val(allow_shrink), Bool_val(allow_grow), Bool_val(auto_shrink));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group -> unit */
EXTERNML value mgtk_gtk_window_add_accel_group(value window, value group) { /* ML */
  gtk_window_add_accel_group(GtkObj_val(window), gtk_accel_group_val(group));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group -> unit */
EXTERNML value mgtk_gtk_window_remove_accel_group(value window, value group) { /* ML */
  gtk_window_remove_accel_group(GtkObj_val(window), gtk_accel_group_val(group));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_window_set_position(value window, value position) { /* ML */
  gtk_window_set_position(GtkObj_val(window), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_window_activate_focus(value window) { /* ML */
  return Val_int(gtk_window_activate_focus(GtkObj_val(window)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_window_activate_default(value window) { /* ML */
  return Val_int(gtk_window_activate_default(GtkObj_val(window)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_window_set_transient_for(value window, value parent) { /* ML */
  gtk_window_set_transient_for(GtkObj_val(window), GtkObj_val(parent));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_window_set_default_size(value window, value width, value height) { /* ML */
  gtk_window_set_default_size(GtkObj_val(window), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_window_set_modal(value window, value modal) { /* ML */
  gtk_window_set_modal(GtkObj_val(window), Bool_val(modal));
  return Val_unit;
}

/* *** HandleBox stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_handle_box_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_handle_box_new());
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_handle_box_set_shadow_type(value handle_box, value typ) { /* ML */
  gtk_handle_box_set_shadow_type(GtkObj_val(handle_box), Int_val(typ));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_handle_box_set_handle_position(value handle_box, value position) { /* ML */
  gtk_handle_box_set_handle_position(GtkObj_val(handle_box), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_handle_box_set_snap_edge(value handle_box, value position) { /* ML */
  gtk_handle_box_set_snap_edge(GtkObj_val(handle_box), Int_val(position));
  return Val_unit;
}

/* *** Box stuff *** */


/* ML type: gtkobj -> gtkobj -> bool -> bool -> int -> unit */
EXTERNML value mgtk_gtk_box_pack_start(value box, value child, value expand, value fill, value padding) { /* ML */
  gtk_box_pack_start(GtkObj_val(box), GtkObj_val(child), Bool_val(expand), Bool_val(fill), Int_val(padding));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool -> bool -> int -> unit */
EXTERNML value mgtk_gtk_box_pack_end(value box, value child, value expand, value fill, value padding) { /* ML */
  gtk_box_pack_end(GtkObj_val(box), GtkObj_val(child), Bool_val(expand), Bool_val(fill), Int_val(padding));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_box_pack_start_defaults(value box, value child) { /* ML */
  gtk_box_pack_start_defaults(GtkObj_val(box), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_box_pack_end_defaults(value box, value child) { /* ML */
  gtk_box_pack_end_defaults(GtkObj_val(box), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_box_set_homogeneous(value box, value homogenous) { /* ML */
  gtk_box_set_homogeneous(GtkObj_val(box), Bool_val(homogenous));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_box_set_spacing(value box, value spacing) { /* ML */
  gtk_box_set_spacing(GtkObj_val(box), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_box_reorder_child(value box, value child, value pos) { /* ML */
  gtk_box_reorder_child(GtkObj_val(box), GtkObj_val(child), Int_val(pos));
  return Val_unit;
}

/* ML type: gtkobj * gtkobj * bool * bool * int * int -> unit */
EXTERNML value mgtk_gtk_box_set_child_packing(value mgtk_params) { /* ML */
  value box = Field(mgtk_params, 0);
  value child = Field(mgtk_params, 1);
  value expand = Field(mgtk_params, 2);
  value fill = Field(mgtk_params, 3);
  value padding = Field(mgtk_params, 4);
  value pack_type = Field(mgtk_params, 5);
  gtk_box_set_child_packing(GtkObj_val(box), GtkObj_val(child), Bool_val(expand), Bool_val(fill), Int_val(padding), Int_val(pack_type));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool * bool * word * int */
EXTERNML value mgtk_gtk_box_query_child_packing(value box, value child) { /* ML */
  value res;
  int resexpand;
  int resfill;
  unsigned int respadding;
  GtkPackType respack_type;
  gtk_box_query_child_packing(GtkObj_val(box), GtkObj_val(child), &resexpand, &resfill, &respadding, &respack_type);
  res = alloc_tuple(4);
  Field(res, 0) = Val_bool(resexpand);
  Field(res, 1) = Val_bool(resfill);
  Field(res, 2) = Val_int(respadding);
  Field(res, 3) = Val_int(respack_type);
  return res;
}

/* *** HBox stuff *** */


/* ML type: bool -> int -> gtkobj */
EXTERNML value mgtk_gtk_hbox_new(value homogeneous, value spacing) { /* ML */
  return Val_GtkObj(gtk_hbox_new(Bool_val(homogeneous), Int_val(spacing)));
}

/* *** VBox stuff *** */


/* ML type: bool -> int -> gtkobj */
EXTERNML value mgtk_gtk_vbox_new(value homogeneous, value spacing) { /* ML */
  return Val_GtkObj(gtk_vbox_new(Bool_val(homogeneous), Int_val(spacing)));
}

/* *** ButtonBox stuff *** */


/* ML type: gtkobj -> int * int */
EXTERNML value mgtk_gtk_button_box_get_child_size(value widget) { /* ML */
  value res;
  int resmin_width;
  int resmin_height;
  gtk_button_box_get_child_size(GtkObj_val(widget), &resmin_width, &resmin_height);
  res = alloc_tuple(2);
  Field(res, 0) = Val_int(resmin_width);
  Field(res, 1) = Val_int(resmin_height);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_gtk_button_box_get_child_size_default(value dummy) { /* ML */
  value res;
  int resmin_width;
  int resmin_height;
  gtk_button_box_get_child_size_default(&resmin_width, &resmin_height);
  res = alloc_tuple(2);
  Field(res, 0) = Val_int(resmin_width);
  Field(res, 1) = Val_int(resmin_height);
  return res;
}

/* ML type: gtkobj -> int * int */
EXTERNML value mgtk_gtk_button_box_get_child_ipadding(value widget) { /* ML */
  value res;
  int resipad_x;
  int resipad_y;
  gtk_button_box_get_child_ipadding(GtkObj_val(widget), &resipad_x, &resipad_y);
  res = alloc_tuple(2);
  Field(res, 0) = Val_int(resipad_x);
  Field(res, 1) = Val_int(resipad_y);
  return res;
}

/* ML type: unit -> int * int */
EXTERNML value mgtk_gtk_button_box_get_child_ipadding_default(value dummy) { /* ML */
  value res;
  int resipad_x;
  int resipad_y;
  gtk_button_box_get_child_ipadding_default(&resipad_x, &resipad_y);
  res = alloc_tuple(2);
  Field(res, 0) = Val_int(resipad_x);
  Field(res, 1) = Val_int(resipad_y);
  return res;
}

/* ML type: int -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_child_size_default(value min_width, value min_height) { /* ML */
  gtk_button_box_set_child_size_default(Int_val(min_width), Int_val(min_height));
  return Val_unit;
}

/* ML type: int -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_child_ipadding_default(value ipad_x, value ipad_y) { /* ML */
  gtk_button_box_set_child_ipadding_default(Int_val(ipad_x), Int_val(ipad_y));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_button_box_get_spacing(value widget) { /* ML */
  return Val_int(gtk_button_box_get_spacing(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_button_box_get_layout(value widget) { /* ML */
  return Val_int(gtk_button_box_get_layout(GtkObj_val(widget)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_spacing(value widget, value spacing) { /* ML */
  gtk_button_box_set_spacing(GtkObj_val(widget), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_layout(value widget, value layout_style) { /* ML */
  gtk_button_box_set_layout(GtkObj_val(widget), Int_val(layout_style));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_child_size(value widget, value min_width, value min_height) { /* ML */
  gtk_button_box_set_child_size(GtkObj_val(widget), Int_val(min_width), Int_val(min_height));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_button_box_set_child_ipadding(value widget, value ipad_x, value ipad_y) { /* ML */
  gtk_button_box_set_child_ipadding(GtkObj_val(widget), Int_val(ipad_x), Int_val(ipad_y));
  return Val_unit;
}

/* *** HButtonBox stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hbutton_box_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_hbutton_box_new());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gtk_hbutton_box_get_spacing_default(value dummy) { /* ML */
  return Val_int(gtk_hbutton_box_get_spacing_default());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gtk_hbutton_box_get_layout_default(value dummy) { /* ML */
  return Val_int(gtk_hbutton_box_get_layout_default());
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_hbutton_box_set_spacing_default(value spacing) { /* ML */
  gtk_hbutton_box_set_spacing_default(Int_val(spacing));
  return Val_unit;
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_hbutton_box_set_layout_default(value layout) { /* ML */
  gtk_hbutton_box_set_layout_default(Int_val(layout));
  return Val_unit;
}

/* *** VButtonBox stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vbutton_box_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_vbutton_box_new());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gtk_vbutton_box_get_spacing_default(value dummy) { /* ML */
  return Val_int(gtk_vbutton_box_get_spacing_default());
}

/* ML type: unit -> int */
EXTERNML value mgtk_gtk_vbutton_box_get_layout_default(value dummy) { /* ML */
  return Val_int(gtk_vbutton_box_get_layout_default());
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_vbutton_box_set_spacing_default(value spacing) { /* ML */
  gtk_vbutton_box_set_spacing_default(Int_val(spacing));
  return Val_unit;
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_vbutton_box_set_layout_default(value layout) { /* ML */
  gtk_vbutton_box_set_layout_default(Int_val(layout));
  return Val_unit;
}

/* *** Dialog stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_dialog_get_vbox(value wid) { /* ML */
  return Val_GtkObj((GTK_DIALOG(GtkObj_val(wid))) -> vbox);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_dialog_get_action_area(value wid) { /* ML */
  return Val_GtkObj((GTK_DIALOG(GtkObj_val(wid))) -> action_area);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_dialog_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_dialog_new());
}

/* *** Table stuff *** */


/* ML type: int -> int -> bool -> gtkobj */
EXTERNML value mgtk_gtk_table_new(value rows, value columns, value homogenous) { /* ML */
  return Val_GtkObj(gtk_table_new(Int_val(rows), Int_val(columns), Bool_val(homogenous)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_table_set_row_spacing(value table, value row, value spacing) { /* ML */
  gtk_table_set_row_spacing(GtkObj_val(table), Int_val(row), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_table_set_col_spacing(value table, value column, value spacing) { /* ML */
  gtk_table_set_col_spacing(GtkObj_val(table), Int_val(column), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_table_set_row_spacings(value table, value spacing) { /* ML */
  gtk_table_set_row_spacings(GtkObj_val(table), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_table_set_col_spacings(value table, value spacing) { /* ML */
  gtk_table_set_col_spacings(GtkObj_val(table), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_table_set_homogeneous(value table, value homogeneous) { /* ML */
  gtk_table_set_homogeneous(GtkObj_val(table), Bool_val(homogeneous));
  return Val_unit;
}

/* *** Packer stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_packer_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_packer_new());
}

/* ML type: gtkobj -> gtkobj -> int -> int -> int -> unit */
EXTERNML value mgtk_gtk_packer_add_defaults(value packer, value child, value side, value anchor, value options) { /* ML */
  gtk_packer_add_defaults(GtkObj_val(packer), GtkObj_val(child), Int_val(side), Int_val(anchor), Int_val(options));
  return Val_unit;
}

/* ML type: gtkobj * gtkobj * int * int * int * word * word * word * word * word -> unit */
EXTERNML value mgtk_gtk_packer_add(value mgtk_params) { /* ML */
  value packer = Field(mgtk_params, 0);
  value child = Field(mgtk_params, 1);
  value side = Field(mgtk_params, 2);
  value anchor = Field(mgtk_params, 3);
  value options = Field(mgtk_params, 4);
  value border_width = Field(mgtk_params, 5);
  value pad_x = Field(mgtk_params, 6);
  value pad_y = Field(mgtk_params, 7);
  value ipad_x = Field(mgtk_params, 8);
  value ipad_y = Field(mgtk_params, 9);
  gtk_packer_add(GtkObj_val(packer), GtkObj_val(child), Int_val(side), Int_val(anchor), Int_val(options), Int_val(border_width), Int_val(pad_x), Int_val(pad_y), Int_val(ipad_x), Int_val(ipad_y));
  return Val_unit;
}

/* ML type: gtkobj * gtkobj * int * int * int * word * word * word * word * word -> unit */
EXTERNML value mgtk_gtk_packer_set_child_packing(value mgtk_params) { /* ML */
  value packer = Field(mgtk_params, 0);
  value child = Field(mgtk_params, 1);
  value size = Field(mgtk_params, 2);
  value anchor = Field(mgtk_params, 3);
  value options = Field(mgtk_params, 4);
  value border_width = Field(mgtk_params, 5);
  value pad_x = Field(mgtk_params, 6);
  value pad_y = Field(mgtk_params, 7);
  value ipad_x = Field(mgtk_params, 8);
  value ipad_y = Field(mgtk_params, 9);
  gtk_packer_set_child_packing(GtkObj_val(packer), GtkObj_val(child), Int_val(size), Int_val(anchor), Int_val(options), Int_val(border_width), Int_val(pad_x), Int_val(pad_y), Int_val(ipad_x), Int_val(ipad_y));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_packer_reorder_child(value packer, value widget, value position) { /* ML */
  gtk_packer_reorder_child(GtkObj_val(packer), GtkObj_val(widget), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_packer_set_spacing(value packer, value spacing) { /* ML */
  gtk_packer_set_spacing(GtkObj_val(packer), Int_val(spacing));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_packer_set_default_border_width(value packer, value border) { /* ML */
  gtk_packer_set_default_border_width(GtkObj_val(packer), Int_val(border));
  return Val_unit;
}

/* ML type: gtkobj -> word -> word -> unit */
EXTERNML value mgtk_gtk_packer_set_default_pad(value packer, value pad_x, value pad_y) { /* ML */
  gtk_packer_set_default_pad(GtkObj_val(packer), Int_val(pad_x), Int_val(pad_y));
  return Val_unit;
}

/* ML type: gtkobj -> word -> word -> unit */
EXTERNML value mgtk_gtk_packer_set_default_ipad(value packer, value ipad_x, value ipad_y) { /* ML */
  gtk_packer_set_default_ipad(GtkObj_val(packer), Int_val(ipad_x), Int_val(ipad_y));
  return Val_unit;
}

/* *** Paned stuff *** */


/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_paned_add1(value paned, value child) { /* ML */
  gtk_paned_add1(GtkObj_val(paned), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_paned_add2(value paned, value child) { /* ML */
  gtk_paned_add2(GtkObj_val(paned), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool -> bool -> unit */
EXTERNML value mgtk_gtk_paned_pack1(value paned, value child, value resize, value shrink) { /* ML */
  gtk_paned_pack1(GtkObj_val(paned), GtkObj_val(child), Bool_val(resize), Bool_val(shrink));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool -> bool -> unit */
EXTERNML value mgtk_gtk_paned_pack2(value paned, value child, value resize, value shrink) { /* ML */
  gtk_paned_pack2(GtkObj_val(paned), GtkObj_val(child), Bool_val(resize), Bool_val(shrink));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_paned_set_position(value paned, value position) { /* ML */
  gtk_paned_set_position(GtkObj_val(paned), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_paned_set_handle_size(value paned, value size) { /* ML */
  gtk_paned_set_handle_size(GtkObj_val(paned), Int_val(size));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_paned_set_gutter_size(value paned, value size) { /* ML */
  gtk_paned_set_gutter_size(GtkObj_val(paned), Int_val(size));
  return Val_unit;
}

/* *** HPaned stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hpaned_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_hpaned_new());
}

/* *** VPaned stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vpaned_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_vpaned_new());
}

/* *** Frame stuff *** */


/* ML type: string option -> gtkobj */
EXTERNML value mgtk_gtk_frame_new(value label) { /* ML */
  return Val_GtkObj(gtk_frame_new(StringOption_nullok(label)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_frame_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_frame_new(NULL));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_frame_set_label(value frame, value label) { /* ML */
  gtk_frame_set_label(GtkObj_val(frame), String_val(label));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> unit */
EXTERNML value mgtk_gtk_frame_set_label_align(value frame, value xalign, value yalign) { /* ML */
  gtk_frame_set_label_align(GtkObj_val(frame), Double_val(xalign), Double_val(yalign));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_frame_set_shadow_type(value frame, value typ) { /* ML */
  gtk_frame_set_shadow_type(GtkObj_val(frame), Int_val(typ));
  return Val_unit;
}

/* *** AspectFrame stuff *** */


/* ML type: string -> real -> real -> real -> int -> gtkobj */
EXTERNML value mgtk_gtk_aspect_frame_new(value label, value xalign, value yalign, value ratio, value obey_child) { /* ML */
  return Val_GtkObj(gtk_aspect_frame_new(String_val(label), Double_val(xalign), Double_val(yalign), Double_val(ratio), Int_val(obey_child)));
}

/* ML type: gtkobj -> real -> real -> real -> int -> unit */
EXTERNML value mgtk_gtk_aspect_frame_set(value aspect_frame, value xalign, value yalign, value ratio, value obey_child) { /* ML */
  gtk_aspect_frame_set(GtkObj_val(aspect_frame), Double_val(xalign), Double_val(yalign), Double_val(ratio), Int_val(obey_child));
  return Val_unit;
}

/* *** Viewport stuff *** */


/* ML type: gtkobj option -> gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_viewport_new(value hadjustment, value vadjustment) { /* ML */
  return Val_GtkObj(gtk_viewport_new(GtkObjOption_nullok(hadjustment), GtkObjOption_nullok(vadjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_viewport_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_viewport_new(NULL, NULL));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_viewport_get_hadjustment(value viewport) { /* ML */
  return Val_GtkObj(gtk_viewport_get_hadjustment(GtkObj_val(viewport)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_viewport_get_vadjustment(value viewport) { /* ML */
  return Val_GtkObj(gtk_viewport_get_vadjustment(GtkObj_val(viewport)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_viewport_set_hadjustment(value viewport, value adjustment) { /* ML */
  gtk_viewport_set_hadjustment(GtkObj_val(viewport), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_viewport_set_vadjustment(value viewport, value adjustment) { /* ML */
  gtk_viewport_set_vadjustment(GtkObj_val(viewport), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_viewport_set_shadow_type(value viewport, value typ) { /* ML */
  gtk_viewport_set_shadow_type(GtkObj_val(viewport), Int_val(typ));
  return Val_unit;
}

/* *** ScrolledWindow stuff *** */


/* ML type: gtkobj option -> gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_scrolled_window_new(value hadjustment, value vadjustment) { /* ML */
  return Val_GtkObj(gtk_scrolled_window_new(GtkObjOption_nullok(hadjustment), GtkObjOption_nullok(vadjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_scrolled_window_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_scrolled_window_new(NULL, NULL));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_scrolled_window_set_hadjustment(value scrolled_window, value adjustment) { /* ML */
  gtk_scrolled_window_set_hadjustment(GtkObj_val(scrolled_window), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_scrolled_window_set_vadjustment(value scrolled_window, value adjustment) { /* ML */
  gtk_scrolled_window_set_vadjustment(GtkObj_val(scrolled_window), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_scrolled_window_get_hadjustment(value scrolled_window) { /* ML */
  return Val_GtkObj(gtk_scrolled_window_get_hadjustment(GtkObj_val(scrolled_window)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_scrolled_window_get_vadjustment(value scrolled_window) { /* ML */
  return Val_GtkObj(gtk_scrolled_window_get_vadjustment(GtkObj_val(scrolled_window)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_scrolled_window_set_policy(value scrolled_window, value hscrollbar_policy, value vscrollbar_policy) { /* ML */
  gtk_scrolled_window_set_policy(GtkObj_val(scrolled_window), Int_val(hscrollbar_policy), Int_val(vscrollbar_policy));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_scrolled_window_set_placement(value scrolled_window, value window_placement) { /* ML */
  gtk_scrolled_window_set_placement(GtkObj_val(scrolled_window), Int_val(window_placement));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_scrolled_window_add_with_viewport(value scrolled_window, value child) { /* ML */
  gtk_scrolled_window_add_with_viewport(GtkObj_val(scrolled_window), GtkObj_val(child));
  return Val_unit;
}

/* *** Notebook stuff *** */

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_notebook_get_tab_pos(value wid) { /* ML */
  return Val_int((GTK_NOTEBOOK(GtkObj_val(wid))) -> tab_pos);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_notebook_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_notebook_new());
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_append_page(value notebook, value child, value tab_label) { /* ML */
  gtk_notebook_append_page(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_append_page_menu(value notebook, value child, value tab_label, value menu_label) { /* ML */
  gtk_notebook_append_page_menu(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label), GtkObj_val(menu_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_prepend_page(value notebook, value child, value tab_label) { /* ML */
  gtk_notebook_prepend_page(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_prepend_page_menu(value notebook, value child, value tab_label, value menu_label) { /* ML */
  gtk_notebook_prepend_page_menu(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label), GtkObj_val(menu_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_insert_page(value notebook, value child, value tab_label, value position) { /* ML */
  gtk_notebook_insert_page(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_insert_page_menu(value notebook, value child, value tab_label, value menu_label, value position) { /* ML */
  gtk_notebook_insert_page_menu(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label), GtkObj_val(menu_label), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_remove_page(value notebook, value page_num) { /* ML */
  gtk_notebook_remove_page(GtkObj_val(notebook), Int_val(page_num));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_notebook_get_current_page(value notebook) { /* ML */
  return Val_int(gtk_notebook_get_current_page(GtkObj_val(notebook)));
}

/* ML type: gtkobj -> int -> gtkobj */
EXTERNML value mgtk_gtk_notebook_get_nth_page(value notebook, value page_num) { /* ML */
  return Val_GtkObj(gtk_notebook_get_nth_page(GtkObj_val(notebook), Int_val(page_num)));
}

/* ML type: gtkobj -> gtkobj -> int */
EXTERNML value mgtk_gtk_notebook_page_num(value notebook, value page) { /* ML */
  return Val_int(gtk_notebook_page_num(GtkObj_val(notebook), GtkObj_val(page)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_set_page(value notebook, value page_num) { /* ML */
  gtk_notebook_set_page(GtkObj_val(notebook), Int_val(page_num));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_next_page(value notebook) { /* ML */
  gtk_notebook_next_page(GtkObj_val(notebook));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_prev_page(value notebook) { /* ML */
  gtk_notebook_prev_page(GtkObj_val(notebook));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_reorder_child(value notebook, value child, value position) { /* ML */
  gtk_notebook_reorder_child(GtkObj_val(notebook), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_pos(value notebook, value pos) { /* ML */
  gtk_notebook_set_tab_pos(GtkObj_val(notebook), Int_val(pos));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_notebook_set_show_tabs(value notebook, value show_tabs) { /* ML */
  gtk_notebook_set_show_tabs(GtkObj_val(notebook), Bool_val(show_tabs));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_notebook_set_show_border(value notebook, value show_border) { /* ML */
  gtk_notebook_set_show_border(GtkObj_val(notebook), Bool_val(show_border));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_set_scrollable(value notebook, value scrollable) { /* ML */
  gtk_notebook_set_scrollable(GtkObj_val(notebook), Int_val(scrollable));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_notebook_set_homogeneous_tabs(value notebook, value homogeneous) { /* ML */
  gtk_notebook_set_homogeneous_tabs(GtkObj_val(notebook), Bool_val(homogeneous));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_border(value notebook, value border_width) { /* ML */
  gtk_notebook_set_tab_border(GtkObj_val(notebook), Int_val(border_width));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_hborder(value notebook, value tab_hborder) { /* ML */
  gtk_notebook_set_tab_hborder(GtkObj_val(notebook), Int_val(tab_hborder));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_vborder(value notebook, value tab_vborder) { /* ML */
  gtk_notebook_set_tab_vborder(GtkObj_val(notebook), Int_val(tab_vborder));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_popup_enable(value notebook) { /* ML */
  gtk_notebook_popup_enable(GtkObj_val(notebook));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_popup_disable(value notebook) { /* ML */
  gtk_notebook_popup_disable(GtkObj_val(notebook));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_notebook_get_tab_label(value notebook, value child) { /* ML */
  return Val_GtkObj(gtk_notebook_get_tab_label(GtkObj_val(notebook), GtkObj_val(child)));
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_label(value notebook, value child, value tab_label) { /* ML */
  gtk_notebook_set_tab_label(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(tab_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_label_text(value notebook, value child, value tab_text) { /* ML */
  gtk_notebook_set_tab_label_text(GtkObj_val(notebook), GtkObj_val(child), String_val(tab_text));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_notebook_get_menu_label(value notebook, value child) { /* ML */
  return Val_GtkObj(gtk_notebook_get_menu_label(GtkObj_val(notebook), GtkObj_val(child)));
}

/* ML type: gtkobj -> gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_notebook_set_menu_label(value notebook, value child, value menu_label) { /* ML */
  gtk_notebook_set_menu_label(GtkObj_val(notebook), GtkObj_val(child), GtkObj_val(menu_label));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_notebook_set_menu_label_text(value notebook, value child, value menu_text) { /* ML */
  gtk_notebook_set_menu_label_text(GtkObj_val(notebook), GtkObj_val(child), String_val(menu_text));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool * bool * int */
EXTERNML value mgtk_gtk_notebook_query_tab_label_packing(value notebook, value child) { /* ML */
  value res;
  int resexpand;
  int resfill;
  GtkPackType respack_type;
  gtk_notebook_query_tab_label_packing(GtkObj_val(notebook), GtkObj_val(child), &resexpand, &resfill, &respack_type);
  res = alloc_tuple(3);
  Field(res, 0) = Val_bool(resexpand);
  Field(res, 1) = Val_bool(resfill);
  Field(res, 2) = Val_int(respack_type);
  return res;
}

/* ML type: gtkobj -> gtkobj -> bool -> bool -> int -> unit */
EXTERNML value mgtk_gtk_notebook_set_tab_label_packing(value notebook, value child, value expand, value fill, value pack_type) { /* ML */
  gtk_notebook_set_tab_label_packing(GtkObj_val(notebook), GtkObj_val(child), Bool_val(expand), Bool_val(fill), Int_val(pack_type));
  return Val_unit;
}

/* *** Alignment stuff *** */


/* ML type: real -> real -> real -> real -> gtkobj */
EXTERNML value mgtk_gtk_alignment_new(value xalign, value yalign, value xscale, value yscale) { /* ML */
  return Val_GtkObj(gtk_alignment_new(Double_val(xalign), Double_val(yalign), Double_val(xscale), Double_val(yscale)));
}

/* ML type: gtkobj -> real -> real -> real -> real -> unit */
EXTERNML value mgtk_gtk_alignment_set(value alignment, value xalign, value yalign, value xscale, value yscale) { /* ML */
  gtk_alignment_set(GtkObj_val(alignment), Double_val(xalign), Double_val(yalign), Double_val(xscale), Double_val(yscale));
  return Val_unit;
}

/* *** Layout stuff *** */


/* ML type: gtkobj option -> gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_layout_new(value hadjustment, value vadjustment) { /* ML */
  return Val_GtkObj(gtk_layout_new(GtkObjOption_nullok(hadjustment), GtkObjOption_nullok(vadjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_layout_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_layout_new(NULL, NULL));
}

/* ML type: gtkobj -> gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_layout_put(value layout, value child, value x, value y) { /* ML */
  gtk_layout_put(GtkObj_val(layout), GtkObj_val(child), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_layout_move(value layout, value child, value x, value y) { /* ML */
  gtk_layout_move(GtkObj_val(layout), GtkObj_val(child), Int_val(x), Int_val(y));
  return Val_unit;
}

/* ML type: gtkobj -> word -> word -> unit */
EXTERNML value mgtk_gtk_layout_set_size(value layout, value width, value height) { /* ML */
  gtk_layout_set_size(GtkObj_val(layout), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_layout_freeze(value layout) { /* ML */
  gtk_layout_freeze(GtkObj_val(layout));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_layout_thaw(value layout) { /* ML */
  gtk_layout_thaw(GtkObj_val(layout));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_layout_get_hadjustment(value layout) { /* ML */
  return Val_GtkObj(gtk_layout_get_hadjustment(GtkObj_val(layout)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_layout_get_vadjustment(value layout) { /* ML */
  return Val_GtkObj(gtk_layout_get_vadjustment(GtkObj_val(layout)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_layout_set_hadjustment(value layout, value adjustment) { /* ML */
  gtk_layout_set_hadjustment(GtkObj_val(layout), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_layout_set_vadjustment(value layout, value adjustment) { /* ML */
  gtk_layout_set_vadjustment(GtkObj_val(layout), GtkObj_val(adjustment));
  return Val_unit;
}

/* *** Plug stuff *** */


/* ML type: word -> gtkobj */
EXTERNML value mgtk_gtk_plug_new(value socket_id) { /* ML */
  return Val_GtkObj(gtk_plug_new(Int_val(socket_id)));
}

/* *** Toolbar stuff *** */


/* ML type: int -> int -> gtkobj */
EXTERNML value mgtk_gtk_toolbar_new(value orientation, value style) { /* ML */
  return Val_GtkObj(gtk_toolbar_new(Int_val(orientation), Int_val(style)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_toolbar_append_space(value toolbar) { /* ML */
  gtk_toolbar_append_space(GtkObj_val(toolbar));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_toolbar_prepend_space(value toolbar) { /* ML */
  gtk_toolbar_prepend_space(GtkObj_val(toolbar));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_insert_space(value toolbar, value position) { /* ML */
  gtk_toolbar_insert_space(GtkObj_val(toolbar), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> string -> unit */
EXTERNML value mgtk_gtk_toolbar_append_widget(value Toolbar, value Widget, value tooltip_text, value tooltip_private_text) { /* ML */
  gtk_toolbar_append_widget(GtkObj_val(Toolbar), GtkObj_val(Widget), String_val(tooltip_text), String_val(tooltip_private_text));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> string -> unit */
EXTERNML value mgtk_gtk_toolbar_prepend_widget(value Toolbar, value Widget, value tooltip_text, value tooltip_private_text) { /* ML */
  gtk_toolbar_prepend_widget(GtkObj_val(Toolbar), GtkObj_val(Widget), String_val(tooltip_text), String_val(tooltip_private_text));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> string -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_insert_widget(value toolbar, value widget, value tooltip_text, value tooltip_private_text, value position) { /* ML */
  gtk_toolbar_insert_widget(GtkObj_val(toolbar), GtkObj_val(widget), String_val(tooltip_text), String_val(tooltip_private_text), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_set_orientation(value toolbar, value orientation) { /* ML */
  gtk_toolbar_set_orientation(GtkObj_val(toolbar), Int_val(orientation));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_set_style(value toolbar, value style) { /* ML */
  gtk_toolbar_set_style(GtkObj_val(toolbar), Int_val(style));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_set_space_size(value toolbar, value space_size) { /* ML */
  gtk_toolbar_set_space_size(GtkObj_val(toolbar), Int_val(space_size));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_set_space_style(value toolbar, value space_style) { /* ML */
  gtk_toolbar_set_space_style(GtkObj_val(toolbar), Int_val(space_style));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_toolbar_set_tooltips(value toolbar, value enable) { /* ML */
  gtk_toolbar_set_tooltips(GtkObj_val(toolbar), Bool_val(enable));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_toolbar_set_button_relief(value toolbar, value relief) { /* ML */
  gtk_toolbar_set_button_relief(GtkObj_val(toolbar), Int_val(relief));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_toolbar_get_button_relief(value toolbar) { /* ML */
  return Val_int(gtk_toolbar_get_button_relief(GtkObj_val(toolbar)));
}

/* *** Button stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_button_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_button_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_button_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_button_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_button_pressed(value button) { /* ML */
  gtk_button_pressed(GtkObj_val(button));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_button_released(value button) { /* ML */
  gtk_button_released(GtkObj_val(button));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_button_clicked(value button) { /* ML */
  gtk_button_clicked(GtkObj_val(button));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_button_enter(value button) { /* ML */
  gtk_button_enter(GtkObj_val(button));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_button_leave(value button) { /* ML */
  gtk_button_leave(GtkObj_val(button));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_button_set_relief(value button, value newstyle) { /* ML */
  gtk_button_set_relief(GtkObj_val(button), Int_val(newstyle));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_button_get_relief(value button) { /* ML */
  return Val_int(gtk_button_get_relief(GtkObj_val(button)));
}

/* *** ToggleButton stuff *** */

/* ML type: gtkobj -> bool */
EXTERNML value mgtk_gtk_toggle_button_get_draw_indicator(value wid) { /* ML */
  return Val_bool((GTK_TOGGLE_BUTTON(GtkObj_val(wid))) -> draw_indicator);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_toggle_button_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_toggle_button_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_toggle_button_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_toggle_button_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_toggle_button_set_mode(value toggle_button, value draw_indicator) { /* ML */
  gtk_toggle_button_set_mode(GtkObj_val(toggle_button), Bool_val(draw_indicator));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_toggle_button_set_active(value toggle_button, value state) { /* ML */
  gtk_toggle_button_set_active(GtkObj_val(toggle_button), Bool_val(state));
  return Val_unit;
}

/* ML type: gtkobj -> bool */
EXTERNML value mgtk_gtk_toggle_button_get_active(value toggle_button) { /* ML */
  return Val_bool(gtk_toggle_button_get_active(GtkObj_val(toggle_button)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_toggle_button_toggled(value toggle_button) { /* ML */
  gtk_toggle_button_toggled(GtkObj_val(toggle_button));
  return Val_unit;
}

/* *** CheckButton stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_check_button_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_check_button_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_check_button_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_check_button_new_with_label(String_val(label)));
}

/* *** RadioButton stuff *** */


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_radio_button_new_from_widget(value group) { /* ML */
  return Val_GtkObj(gtk_radio_button_new_from_widget(GtkObj_val(group)));
}

/* ML type: gtkobj option -> string -> gtkobj */
EXTERNML value mgtk_gtk_radio_button_new_with_label_from_widget(value group, value label) { /* ML */
  return Val_GtkObj(gtk_radio_button_new_with_label_from_widget(GtkObjOption_nullok(group), String_val(label)));
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_radio_button_new_with_label_from_widget_short(value label) { /* ML */
  return Val_GtkObj(gtk_radio_button_new_with_label_from_widget(NULL, String_val(label)));
}

/* *** Misc stuff *** */


/* ML type: gtkobj -> real -> real -> unit */
EXTERNML value mgtk_gtk_misc_set_alignment(value misc, value xalign, value yalign) { /* ML */
  gtk_misc_set_alignment(GtkObj_val(misc), Double_val(xalign), Double_val(yalign));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_misc_set_padding(value misc, value xpad, value ypad) { /* ML */
  gtk_misc_set_padding(GtkObj_val(misc), Int_val(xpad), Int_val(ypad));
  return Val_unit;
}

/* *** Arrow stuff *** */


/* ML type: int -> int -> gtkobj */
EXTERNML value mgtk_gtk_arrow_new(value arrow_type, value shadow_type) { /* ML */
  return Val_GtkObj(gtk_arrow_new(Int_val(arrow_type), Int_val(shadow_type)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_arrow_set(value arrow, value arrow_type, value shadow_type) { /* ML */
  gtk_arrow_set(GtkObj_val(arrow), Int_val(arrow_type), Int_val(shadow_type));
  return Val_unit;
}

/* *** Label stuff *** */


/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_label_new(value str) { /* ML */
  return Val_GtkObj(gtk_label_new(String_val(str)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_label_set_text(value label, value str) { /* ML */
  gtk_label_set_text(GtkObj_val(label), String_val(str));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_label_set_pattern(value label, value pattern) { /* ML */
  gtk_label_set_pattern(GtkObj_val(label), String_val(pattern));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_label_set_justify(value label, value jtype) { /* ML */
  gtk_label_set_justify(GtkObj_val(label), Int_val(jtype));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_label_set_line_wrap(value label, value wrap) { /* ML */
  gtk_label_set_line_wrap(GtkObj_val(label), Bool_val(wrap));
  return Val_unit;
}

/* ML type: gtkobj -> string -> word */
EXTERNML value mgtk_gtk_label_parse_uline(value label, value string) { /* ML */
  return Val_int(gtk_label_parse_uline(GtkObj_val(label), String_val(string)));
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_label_get(value label) { /* ML */
  char* resstr;
  gtk_label_get(GtkObj_val(label), &resstr);
  return copy_string(resstr);
}

/* *** AccelLabel stuff *** */


/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_accel_label_new(value string) { /* ML */
  return Val_GtkObj(gtk_accel_label_new(String_val(string)));
}

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_accel_label_get_accel_width(value accel_label) { /* ML */
  return Val_int(gtk_accel_label_get_accel_width(GtkObj_val(accel_label)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_accel_label_set_accel_widget(value accel_label, value accel_widget) { /* ML */
  gtk_accel_label_set_accel_widget(GtkObj_val(accel_label), GtkObj_val(accel_widget));
  return Val_unit;
}

/* ML type: gtkobj -> bool */
EXTERNML value mgtk_gtk_accel_label_refetch(value accel_label) { /* ML */
  return Val_bool(gtk_accel_label_refetch(GtkObj_val(accel_label)));
}

/* *** TipsQuery stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_tips_query_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_tips_query_new());
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tips_query_start_query(value tips_query) { /* ML */
  gtk_tips_query_start_query(GtkObj_val(tips_query));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tips_query_stop_query(value tips_query) { /* ML */
  gtk_tips_query_stop_query(GtkObj_val(tips_query));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tips_query_set_caller(value tips_query, value caller) { /* ML */
  gtk_tips_query_set_caller(GtkObj_val(tips_query), GtkObj_val(caller));
  return Val_unit;
}

/* ML type: gtkobj -> string -> string -> unit */
EXTERNML value mgtk_gtk_tips_query_set_labels(value tips_query, value label_inactive, value label_no_tip) { /* ML */
  gtk_tips_query_set_labels(GtkObj_val(tips_query), String_val(label_inactive), String_val(label_no_tip));
  return Val_unit;
}

/* *** Item stuff *** */


/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_item_select(value item) { /* ML */
  gtk_item_select(GtkObj_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_item_deselect(value item) { /* ML */
  gtk_item_deselect(GtkObj_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_item_toggle(value item) { /* ML */
  gtk_item_toggle(GtkObj_val(item));
  return Val_unit;
}

/* *** Statusbar stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_statusbar_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_statusbar_new());
}

/* ML type: gtkobj -> word -> string -> word */
EXTERNML value mgtk_gtk_statusbar_push(value statusbar, value context_id, value text) { /* ML */
  return Val_int(gtk_statusbar_push(GtkObj_val(statusbar), Int_val(context_id), String_val(text)));
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_statusbar_pop(value statusbar, value context_id) { /* ML */
  gtk_statusbar_pop(GtkObj_val(statusbar), Int_val(context_id));
  return Val_unit;
}

/* ML type: gtkobj -> string -> word */
EXTERNML value mgtk_gtk_statusbar_get_context_id(value statusbar, value context_description) { /* ML */
  return Val_int(gtk_statusbar_get_context_id(GtkObj_val(statusbar), String_val(context_description)));
}

/* ML type: gtkobj -> word -> word -> unit */
EXTERNML value mgtk_gtk_statusbar_remove(value statusbar, value context_id, value message_id) { /* ML */
  gtk_statusbar_remove(GtkObj_val(statusbar), Int_val(context_id), Int_val(message_id));
  return Val_unit;
}

/* *** Separator stuff *** */


/* *** HSeparator stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hseparator_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_hseparator_new());
}

/* *** VSeparator stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vseparator_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_vseparator_new());
}

/* *** Progress stuff *** */


/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_progress_set_show_text(value progress, value show_text) { /* ML */
  gtk_progress_set_show_text(GtkObj_val(progress), Int_val(show_text));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> unit */
EXTERNML value mgtk_gtk_progress_set_text_alignment(value progress, value x_align, value y_align) { /* ML */
  gtk_progress_set_text_alignment(GtkObj_val(progress), Double_val(x_align), Double_val(y_align));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_progress_set_format_string(value progress, value format) { /* ML */
  gtk_progress_set_format_string(GtkObj_val(progress), String_val(format));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_progress_set_adjustment(value progress, value adjustment) { /* ML */
  gtk_progress_set_adjustment(GtkObj_val(progress), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> real -> unit */
EXTERNML value mgtk_gtk_progress_configure(value progress, value valu, value min, value max) { /* ML */
  gtk_progress_configure(GtkObj_val(progress), Double_val(valu), Double_val(min), Double_val(max));
  return Val_unit;
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_progress_set_percentage(value progress, value percentage) { /* ML */
  gtk_progress_set_percentage(GtkObj_val(progress), Double_val(percentage));
  return Val_unit;
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_progress_set_value(value progress, value valu) { /* ML */
  gtk_progress_set_value(GtkObj_val(progress), Double_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_progress_get_value(value progress) { /* ML */
  return copy_double(gtk_progress_get_value(GtkObj_val(progress)));
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_progress_set_activity_mode(value progress, value activity_mode) { /* ML */
  gtk_progress_set_activity_mode(GtkObj_val(progress), Int_val(activity_mode));
  return Val_unit;
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_progress_get_current_text(value progress) { /* ML */
  return copy_string(gtk_progress_get_current_text(GtkObj_val(progress)));
}

/* ML type: gtkobj -> real -> string */
EXTERNML value mgtk_gtk_progress_get_text_from_value(value progress, value valu) { /* ML */
  return copy_string(gtk_progress_get_text_from_value(GtkObj_val(progress), Double_val(valu)));
}

/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_progress_get_current_percentage(value progress) { /* ML */
  return copy_double(gtk_progress_get_current_percentage(GtkObj_val(progress)));
}

/* ML type: gtkobj -> real -> real */
EXTERNML value mgtk_gtk_progress_get_percentage_from_value(value progress, value valu) { /* ML */
  return copy_double(gtk_progress_get_percentage_from_value(GtkObj_val(progress), Double_val(valu)));
}

/* *** ProgressBar stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_progress_bar_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_progress_bar_new());
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_progress_bar_new_with_adjustment(value adjustment) { /* ML */
  return Val_GtkObj(gtk_progress_bar_new_with_adjustment(GtkObj_val(adjustment)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_progress_bar_set_bar_style(value pbar, value style) { /* ML */
  gtk_progress_bar_set_bar_style(GtkObj_val(pbar), Int_val(style));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_progress_bar_set_discrete_blocks(value pbar, value blocks) { /* ML */
  gtk_progress_bar_set_discrete_blocks(GtkObj_val(pbar), Int_val(blocks));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_progress_bar_set_activity_step(value pbar, value step) { /* ML */
  gtk_progress_bar_set_activity_step(GtkObj_val(pbar), Int_val(step));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_progress_bar_set_activity_blocks(value pbar, value blocks) { /* ML */
  gtk_progress_bar_set_activity_blocks(GtkObj_val(pbar), Int_val(blocks));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_progress_bar_set_orientation(value pbar, value orientation) { /* ML */
  gtk_progress_bar_set_orientation(GtkObj_val(pbar), Int_val(orientation));
  return Val_unit;
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_progress_bar_update(value progress_bar, value percentage) { /* ML */
  gtk_progress_bar_update(GtkObj_val(progress_bar), Double_val(percentage));
  return Val_unit;
}

/* *** Pixmap stuff *** */


/* ML type: gdk_pixmap -> gdk_bitmap option -> gtkobj */
EXTERNML value mgtk_gtk_pixmap_new(value pixmap, value mask) { /* ML */
  return Val_GtkObj(gtk_pixmap_new(gdk_pixmap_val(pixmap), GtkObjOption_nullok(mask)));
}

/* ML type: gdk_pixmap -> gtkobj */
EXTERNML value mgtk_gtk_pixmap_new_short(value pixmap) { /* ML */
  return Val_GtkObj(gtk_pixmap_new(gdk_pixmap_val(pixmap), NULL));
}

/* ML type: gtkobj -> gdk_pixmap -> gdk_bitmap -> unit */
EXTERNML value mgtk_gtk_pixmap_set(value pixmap, value valu, value mask) { /* ML */
  gtk_pixmap_set(GtkObj_val(pixmap), gdk_pixmap_val(valu), gdk_bitmap_val(mask));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_pixmap_set_build_insensitive(value pixmap, value build) { /* ML */
  gtk_pixmap_set_build_insensitive(GtkObj_val(pixmap), Int_val(build));
  return Val_unit;
}

/* *** ColorSelection stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_color_selection_new());
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_color_selection_set_update_policy(value colorsel, value policy) { /* ML */
  gtk_color_selection_set_update_policy(GtkObj_val(colorsel), Int_val(policy));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_color_selection_set_opacity(value colorsel, value use_opacity) { /* ML */
  gtk_color_selection_set_opacity(GtkObj_val(colorsel), Bool_val(use_opacity));
  return Val_unit;
}

/* *** ColorSelectionDialog stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_colorsel(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> colorsel);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_main_vbox(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> main_vbox);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_ok_button(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> ok_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_reset_button(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> reset_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_cancel_button(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> cancel_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_get_help_button(value wid) { /* ML */
  return Val_GtkObj((GTK_COLOR_SELECTION_DIALOG(GtkObj_val(wid))) -> help_button);
}


/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_color_selection_dialog_new(value title) { /* ML */
  return Val_GtkObj(gtk_color_selection_dialog_new(String_val(title)));
}

/* *** InputDialog stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_input_dialog_get_close_button(value wid) { /* ML */
  return Val_GtkObj((GTK_INPUT_DIALOG(GtkObj_val(wid))) -> close_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_input_dialog_get_save_button(value wid) { /* ML */
  return Val_GtkObj((GTK_INPUT_DIALOG(GtkObj_val(wid))) -> save_button);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_input_dialog_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_input_dialog_new());
}

/* *** DrawingArea stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_drawing_area_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_drawing_area_new());
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_drawing_area_size(value darea, value width, value height) { /* ML */
  gtk_drawing_area_size(GtkObj_val(darea), Int_val(width), Int_val(height));
  return Val_unit;
}

/* *** Curve stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_curve_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_curve_new());
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_curve_reset(value curve) { /* ML */
  gtk_curve_reset(GtkObj_val(curve));
  return Val_unit;
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_curve_set_gamma(value curve, value gamma) { /* ML */
  gtk_curve_set_gamma(GtkObj_val(curve), Double_val(gamma));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> real -> real -> unit */
EXTERNML value mgtk_gtk_curve_set_range(value curve, value min_x, value max_x, value min_y, value max_y) { /* ML */
  gtk_curve_set_range(GtkObj_val(curve), Double_val(min_x), Double_val(max_x), Double_val(min_y), Double_val(max_y));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_curve_set_curve_type(value curve, value typ) { /* ML */
  gtk_curve_set_curve_type(GtkObj_val(curve), Int_val(typ));
  return Val_unit;
}

/* *** GammaCurve stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_gamma_curve_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_gamma_curve_new());
}

/* *** FileSelection stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_dir_list(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> dir_list);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_file_list(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> file_list);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_selection_entry(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> selection_entry);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_selection_text(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> selection_text);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_main_vbox(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> main_vbox);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_ok_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> ok_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_cancel_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> cancel_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_get_help_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FILE_SELECTION(GtkObj_val(wid))) -> help_button);
}


/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_file_selection_new(value title) { /* ML */
  return Val_GtkObj(gtk_file_selection_new(String_val(title)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_file_selection_set_filename(value filesel, value filename) { /* ML */
  gtk_file_selection_set_filename(GtkObj_val(filesel), String_val(filename));
  return Val_unit;
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_file_selection_get_filename(value filesel) { /* ML */
  return copy_string(gtk_file_selection_get_filename(GtkObj_val(filesel)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_file_selection_complete(value filesel, value pattern) { /* ML */
  gtk_file_selection_complete(GtkObj_val(filesel), String_val(pattern));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_file_selection_show_fileop_buttons(value filesel) { /* ML */
  gtk_file_selection_show_fileop_buttons(GtkObj_val(filesel));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_file_selection_hide_fileop_buttons(value filesel) { /* ML */
  gtk_file_selection_hide_fileop_buttons(GtkObj_val(filesel));
  return Val_unit;
}

/* *** FontSelection stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_font_selection_new());
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_font_selection_get_font_name(value fontsel) { /* ML */
  return copy_string(gtk_font_selection_get_font_name(GtkObj_val(fontsel)));
}

/* ML type: gtkobj -> gdk_font */
EXTERNML value mgtk_gtk_font_selection_get_font(value fontsel) { /* ML */
  return Val_gdk_font(gtk_font_selection_get_font(GtkObj_val(fontsel)));
}

/* ML type: gtkobj -> string -> bool */
EXTERNML value mgtk_gtk_font_selection_set_font_name(value fontsel, value fontname) { /* ML */
  return Val_bool(gtk_font_selection_set_font_name(GtkObj_val(fontsel), String_val(fontname)));
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_font_selection_get_preview_text(value fontsel) { /* ML */
  return copy_string(gtk_font_selection_get_preview_text(GtkObj_val(fontsel)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_font_selection_set_preview_text(value fontsel, value text) { /* ML */
  gtk_font_selection_set_preview_text(GtkObj_val(fontsel), String_val(text));
  return Val_unit;
}

/* *** FontSelectionDialog stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_fontsel(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> fontsel);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_main_vbox(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> main_vbox);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_action_area(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> action_area);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_ok_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> ok_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_apply_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> apply_button);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_get_cancel_button(value wid) { /* ML */
  return Val_GtkObj((GTK_FONT_SELECTION_DIALOG(GtkObj_val(wid))) -> cancel_button);
}


/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_font_selection_dialog_new(value title) { /* ML */
  return Val_GtkObj(gtk_font_selection_dialog_new(String_val(title)));
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_font_selection_dialog_get_font_name(value fsd) { /* ML */
  return copy_string(gtk_font_selection_dialog_get_font_name(GtkObj_val(fsd)));
}

/* ML type: gtkobj -> gdk_font */
EXTERNML value mgtk_gtk_font_selection_dialog_get_font(value fsd) { /* ML */
  return Val_gdk_font(gtk_font_selection_dialog_get_font(GtkObj_val(fsd)));
}

/* ML type: gtkobj -> string -> bool */
EXTERNML value mgtk_gtk_font_selection_dialog_set_font_name(value fsd, value fontname) { /* ML */
  return Val_bool(gtk_font_selection_dialog_set_font_name(GtkObj_val(fsd), String_val(fontname)));
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_font_selection_dialog_get_preview_text(value fsd) { /* ML */
  return copy_string(gtk_font_selection_dialog_get_preview_text(GtkObj_val(fsd)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_font_selection_dialog_set_preview_text(value fsd, value text) { /* ML */
  gtk_font_selection_dialog_set_preview_text(GtkObj_val(fsd), String_val(text));
  return Val_unit;
}

/* *** Preview stuff *** */


/* ML type: int -> gtkobj */
EXTERNML value mgtk_gtk_preview_new(value typ) { /* ML */
  return Val_GtkObj(gtk_preview_new(Int_val(typ)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_preview_size(value preview, value width, value height) { /* ML */
  gtk_preview_size(GtkObj_val(preview), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtkobj * gdk_window * gdk_gc * int * int * int * int * int * int -> unit */
EXTERNML value mgtk_gtk_preview_put(value mgtk_params) { /* ML */
  value preview = Field(mgtk_params, 0);
  value window = Field(mgtk_params, 1);
  value gc = Field(mgtk_params, 2);
  value srcx = Field(mgtk_params, 3);
  value srcy = Field(mgtk_params, 4);
  value destx = Field(mgtk_params, 5);
  value desty = Field(mgtk_params, 6);
  value width = Field(mgtk_params, 7);
  value height = Field(mgtk_params, 8);
  gtk_preview_put(GtkObj_val(preview), gdk_window_val(window), gdk_gc_val(gc), Int_val(srcx), Int_val(srcy), Int_val(destx), Int_val(desty), Int_val(width), Int_val(height));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_preview_set_expand(value preview, value expand) { /* ML */
  gtk_preview_set_expand(GtkObj_val(preview), Int_val(expand));
  return Val_unit;
}

/* ML type: word -> word -> word -> word -> unit */
EXTERNML value mgtk_gtk_preview_set_color_cube(value nred_shades, value ngreen_shades, value nblue_shades, value ngray_shades) { /* ML */
  gtk_preview_set_color_cube(Int_val(nred_shades), Int_val(ngreen_shades), Int_val(nblue_shades), Int_val(ngray_shades));
  return Val_unit;
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_preview_set_install_cmap(value install_cmap) { /* ML */
  gtk_preview_set_install_cmap(Int_val(install_cmap));
  return Val_unit;
}

/* ML type: int -> unit */
EXTERNML value mgtk_gtk_preview_set_reserved(value nreserved) { /* ML */
  gtk_preview_set_reserved(Int_val(nreserved));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_preview_set_dither(value preview, value dither) { /* ML */
  gtk_preview_set_dither(GtkObj_val(preview), Int_val(dither));
  return Val_unit;
}

/* *** Calendar stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_calendar_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_calendar_new());
}

/* ML type: gtkobj -> word -> word -> int */
EXTERNML value mgtk_gtk_calendar_select_month(value calendar, value month, value year) { /* ML */
  return Val_int(gtk_calendar_select_month(GtkObj_val(calendar), Int_val(month), Int_val(year)));
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_calendar_select_day(value calendar, value day) { /* ML */
  gtk_calendar_select_day(GtkObj_val(calendar), Int_val(day));
  return Val_unit;
}

/* ML type: gtkobj -> word -> int */
EXTERNML value mgtk_gtk_calendar_mark_day(value calendar, value day) { /* ML */
  return Val_int(gtk_calendar_mark_day(GtkObj_val(calendar), Int_val(day)));
}

/* ML type: gtkobj -> word -> int */
EXTERNML value mgtk_gtk_calendar_unmark_day(value calendar, value day) { /* ML */
  return Val_int(gtk_calendar_unmark_day(GtkObj_val(calendar), Int_val(day)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_calendar_clear_marks(value calendar) { /* ML */
  gtk_calendar_clear_marks(GtkObj_val(calendar));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_calendar_display_options(value calendar, value flags) { /* ML */
  gtk_calendar_display_options(GtkObj_val(calendar), Int_val(flags));
  return Val_unit;
}

/* ML type: gtkobj -> word * word * word */
EXTERNML value mgtk_gtk_calendar_get_date(value cal) { /* ML */
  value res;
  unsigned int resyear;
  unsigned int resmonth;
  unsigned int resday;
  gtk_calendar_get_date(GtkObj_val(cal), &resyear, &resmonth, &resday);
  res = alloc_tuple(3);
  Field(res, 0) = Val_int(resyear);
  Field(res, 1) = Val_int(resmonth);
  Field(res, 2) = Val_int(resday);
  return res;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_calendar_freeze(value calendar) { /* ML */
  gtk_calendar_freeze(GtkObj_val(calendar));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_calendar_thaw(value calendar) { /* ML */
  gtk_calendar_thaw(GtkObj_val(calendar));
  return Val_unit;
}

/* *** Tree stuff *** */


/* *** TreeItem stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_tree_item_get_subtree(value wid) { /* ML */
  return Val_GtkObj((GTK_TREE_ITEM(GtkObj_val(wid))) -> subtree);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_tree_item_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_tree_item_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_tree_item_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_tree_item_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_set_subtree(value tree_item, value subtree) { /* ML */
  gtk_tree_item_set_subtree(GtkObj_val(tree_item), GtkObj_val(subtree));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_remove_subtree(value tree_item) { /* ML */
  gtk_tree_item_remove_subtree(GtkObj_val(tree_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_select(value tree_item) { /* ML */
  gtk_tree_item_select(GtkObj_val(tree_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_deselect(value tree_item) { /* ML */
  gtk_tree_item_deselect(GtkObj_val(tree_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_expand(value tree_item) { /* ML */
  gtk_tree_item_expand(GtkObj_val(tree_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_item_collapse(value tree_item) { /* ML */
  gtk_tree_item_collapse(GtkObj_val(tree_item));
  return Val_unit;
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_tree_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_tree_new());
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_append(value tree, value child) { /* ML */
  gtk_tree_append(GtkObj_val(tree), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_prepend(value tree, value child) { /* ML */
  gtk_tree_prepend(GtkObj_val(tree), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tree_insert(value tree, value child, value position) { /* ML */
  gtk_tree_insert(GtkObj_val(tree), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_remove_item(value tree, value child) { /* ML */
  gtk_tree_remove_item(GtkObj_val(tree), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_tree_clear_items(value tree, value start_item, value end_item) { /* ML */
  gtk_tree_clear_items(GtkObj_val(tree), Int_val(start_item), Int_val(end_item));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tree_select_item(value tree, value item) { /* ML */
  gtk_tree_select_item(GtkObj_val(tree), Int_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tree_unselect_item(value tree, value item) { /* ML */
  gtk_tree_unselect_item(GtkObj_val(tree), Int_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_select_child(value tree, value child) { /* ML */
  gtk_tree_select_child(GtkObj_val(tree), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_tree_unselect_child(value tree, value child) { /* ML */
  gtk_tree_unselect_child(GtkObj_val(tree), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int */
EXTERNML value mgtk_gtk_tree_child_position(value tree, value child) { /* ML */
  return Val_int(gtk_tree_child_position(GtkObj_val(tree), GtkObj_val(child)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tree_set_selection_mode(value tree, value mode) { /* ML */
  gtk_tree_set_selection_mode(GtkObj_val(tree), Int_val(mode));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_tree_set_view_mode(value tree, value mode) { /* ML */
  gtk_tree_set_view_mode(GtkObj_val(tree), Int_val(mode));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_tree_set_view_lines(value tree, value flag) { /* ML */
  gtk_tree_set_view_lines(GtkObj_val(tree), Bool_val(flag));
  return Val_unit;
}

/* *** CList stuff *** */

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_clist_get_focus_row(value wid) { /* ML */
  return Val_int((GTK_CLIST(GtkObj_val(wid))) -> focus_row);
}


/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_clist_get_rows(value wid) { /* ML */
  return Val_int((GTK_CLIST(GtkObj_val(wid))) -> rows);
}


/* ML type: int -> gtkobj */
EXTERNML value mgtk_gtk_clist_new(value columns) { /* ML */
  return Val_GtkObj(gtk_clist_new(Int_val(columns)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_shadow_type(value clist, value border) { /* ML */
  gtk_clist_set_shadow_type(GtkObj_val(clist), Int_val(border));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_selection_mode(value clist, value mode) { /* ML */
  gtk_clist_set_selection_mode(GtkObj_val(clist), Int_val(mode));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_reorderable(value clist, value reorderable) { /* ML */
  gtk_clist_set_reorderable(GtkObj_val(clist), Bool_val(reorderable));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_use_drag_icons(value clist, value use_icons) { /* ML */
  gtk_clist_set_use_drag_icons(GtkObj_val(clist), Bool_val(use_icons));
  return Val_unit;
}

/* ML type: gtkobj -> word -> word -> unit */
EXTERNML value mgtk_gtk_clist_set_button_actions(value clist, value button, value button_actions) { /* ML */
  gtk_clist_set_button_actions(GtkObj_val(clist), Int_val(button), Int_val(button_actions));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_set_hadjustment(value clist, value adjustment) { /* ML */
  gtk_clist_set_hadjustment(GtkObj_val(clist), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_set_vadjustment(value clist, value adjustment) { /* ML */
  gtk_clist_set_vadjustment(GtkObj_val(clist), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_clist_get_hadjustment(value clist) { /* ML */
  return Val_GtkObj(gtk_clist_get_hadjustment(GtkObj_val(clist)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_clist_get_vadjustment(value clist) { /* ML */
  return Val_GtkObj(gtk_clist_get_vadjustment(GtkObj_val(clist)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_freeze(value clist) { /* ML */
  gtk_clist_freeze(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_thaw(value clist) { /* ML */
  gtk_clist_thaw(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_column_titles_show(value clist) { /* ML */
  gtk_clist_column_titles_show(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_column_titles_hide(value clist) { /* ML */
  gtk_clist_column_titles_hide(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_column_title_active(value clist, value column) { /* ML */
  gtk_clist_column_title_active(GtkObj_val(clist), Int_val(column));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_column_title_passive(value clist, value column) { /* ML */
  gtk_clist_column_title_passive(GtkObj_val(clist), Int_val(column));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_column_titles_active(value clist) { /* ML */
  gtk_clist_column_titles_active(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_column_titles_passive(value clist) { /* ML */
  gtk_clist_column_titles_passive(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> int -> string -> unit */
EXTERNML value mgtk_gtk_clist_set_column_title(value clist, value column, value title) { /* ML */
  gtk_clist_set_column_title(GtkObj_val(clist), Int_val(column), String_val(title));
  return Val_unit;
}

/* ML type: gtkobj -> int -> string */
EXTERNML value mgtk_gtk_clist_get_column_title(value clist, value column) { /* ML */
  return copy_string(gtk_clist_get_column_title(GtkObj_val(clist), Int_val(column)));
}

/* ML type: gtkobj -> int -> gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_set_column_widget(value clist, value column, value widget) { /* ML */
  gtk_clist_set_column_widget(GtkObj_val(clist), Int_val(column), GtkObj_val(widget));
  return Val_unit;
}

/* ML type: gtkobj -> int -> gtkobj */
EXTERNML value mgtk_gtk_clist_get_column_widget(value clist, value column) { /* ML */
  return Val_GtkObj(gtk_clist_get_column_widget(GtkObj_val(clist), Int_val(column)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_column_justification(value clist, value column, value justification) { /* ML */
  gtk_clist_set_column_justification(GtkObj_val(clist), Int_val(column), Int_val(justification));
  return Val_unit;
}

/* ML type: gtkobj -> int -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_column_visibility(value clist, value column, value visible) { /* ML */
  gtk_clist_set_column_visibility(GtkObj_val(clist), Int_val(column), Bool_val(visible));
  return Val_unit;
}

/* ML type: gtkobj -> int -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_column_resizeable(value clist, value column, value resizeable) { /* ML */
  gtk_clist_set_column_resizeable(GtkObj_val(clist), Int_val(column), Bool_val(resizeable));
  return Val_unit;
}

/* ML type: gtkobj -> int -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_column_auto_resize(value clist, value column, value auto_resize) { /* ML */
  gtk_clist_set_column_auto_resize(GtkObj_val(clist), Int_val(column), Bool_val(auto_resize));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_clist_columns_autosize(value clist) { /* ML */
  return Val_int(gtk_clist_columns_autosize(GtkObj_val(clist)));
}

/* ML type: gtkobj -> int -> int */
EXTERNML value mgtk_gtk_clist_optimal_column_width(value clist, value column) { /* ML */
  return Val_int(gtk_clist_optimal_column_width(GtkObj_val(clist), Int_val(column)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_column_width(value clist, value column, value width) { /* ML */
  gtk_clist_set_column_width(GtkObj_val(clist), Int_val(column), Int_val(width));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_column_min_width(value clist, value column, value min_width) { /* ML */
  gtk_clist_set_column_min_width(GtkObj_val(clist), Int_val(column), Int_val(min_width));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_column_max_width(value clist, value column, value max_width) { /* ML */
  gtk_clist_set_column_max_width(GtkObj_val(clist), Int_val(column), Int_val(max_width));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_clist_set_row_height(value clist, value height) { /* ML */
  gtk_clist_set_row_height(GtkObj_val(clist), Int_val(height));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> real -> real -> unit */
EXTERNML value mgtk_gtk_clist_moveto(value clist, value row, value column, value row_align, value column_align) { /* ML */
  gtk_clist_moveto(GtkObj_val(clist), Int_val(row), Int_val(column), Double_val(row_align), Double_val(column_align));
  return Val_unit;
}

/* ML type: gtkobj -> int -> bool */
EXTERNML value mgtk_gtk_clist_row_is_visible(value clist, value row) { /* ML */
  return Val_bool(gtk_clist_row_is_visible(GtkObj_val(clist), Int_val(row)));
}

/* ML type: gtkobj -> int -> int -> int */
EXTERNML value mgtk_gtk_clist_get_cell_type(value clist, value row, value column) { /* ML */
  return Val_int(gtk_clist_get_cell_type(GtkObj_val(clist), Int_val(row), Int_val(column)));
}

/* ML type: gtkobj -> int -> int -> string -> unit */
EXTERNML value mgtk_gtk_clist_set_text(value clist, value row, value column, value text) { /* ML */
  gtk_clist_set_text(GtkObj_val(clist), Int_val(row), Int_val(column), String_val(text));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> int * string */
EXTERNML value mgtk_gtk_clist_get_text(value clist, value row, value column) { /* ML */
  value res;
  char* restext;
  value rescall = gtk_clist_get_text(GtkObj_val(clist), Int_val(row), Int_val(column), &restext);
  Push_roots(r, 1);
  r[0] = alloc_tuple(2);
  Field(r[0], 0) = Val_int(rescall);
  Field(r[0], 1) = copy_string(restext);
  res = r[0];
  Pop_roots();
  return res;
}

/* ML type: gtkobj -> int -> int -> gdk_pixmap -> gdk_bitmap -> unit */
EXTERNML value mgtk_gtk_clist_set_pixmap(value clist, value row, value col, value pixmap, value mask) { /* ML */
  gtk_clist_set_pixmap(GtkObj_val(clist), Int_val(row), Int_val(col), gdk_pixmap_val(pixmap), gdk_bitmap_val(mask));
  return Val_unit;
}

/* ML type: gtkobj * int * int * string * word * gdk_pixmap * gdk_bitmap option -> unit */
EXTERNML value mgtk_gtk_clist_set_pixtext(value mgtk_params) { /* ML */
  value clist = Field(mgtk_params, 0);
  value row = Field(mgtk_params, 1);
  value col = Field(mgtk_params, 2);
  value text = Field(mgtk_params, 3);
  value spacing = Field(mgtk_params, 4);
  value pixmap = Field(mgtk_params, 5);
  value mask = Field(mgtk_params, 6);
  gtk_clist_set_pixtext(GtkObj_val(clist), Int_val(row), Int_val(col), String_val(text), Int_val(spacing), gdk_pixmap_val(pixmap), GtkObjOption_nullok(mask));
  return Val_unit;
}

/* ML type: gtkobj * int * int * string * word * gdk_pixmap -> unit */
EXTERNML value mgtk_gtk_clist_set_pixtext_short(value mgtk_params) { /* ML */
  value clist = Field(mgtk_params, 0);
  value row = Field(mgtk_params, 1);
  value col = Field(mgtk_params, 2);
  value text = Field(mgtk_params, 3);
  value spacing = Field(mgtk_params, 4);
  value pixmap = Field(mgtk_params, 5);
  gtk_clist_set_pixtext(GtkObj_val(clist), Int_val(row), Int_val(col), String_val(text), Int_val(spacing), gdk_pixmap_val(pixmap), NULL);
  return Val_unit;
}

/* ML type: gtkobj -> int -> gdk_color -> unit */
EXTERNML value mgtk_gtk_clist_set_foreground(value clist, value row, value color) { /* ML */
  gtk_clist_set_foreground(GtkObj_val(clist), Int_val(row), gdk_color_val(color));
  return Val_unit;
}

/* ML type: gtkobj -> int -> gdk_color -> unit */
EXTERNML value mgtk_gtk_clist_set_background(value clist, value row, value color) { /* ML */
  gtk_clist_set_background(GtkObj_val(clist), Int_val(row), gdk_color_val(color));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> gtk_style -> unit */
EXTERNML value mgtk_gtk_clist_set_cell_style(value clist, value row, value column, value style) { /* ML */
  gtk_clist_set_cell_style(GtkObj_val(clist), Int_val(row), Int_val(column), gtk_style_val(style));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> gtk_style */
EXTERNML value mgtk_gtk_clist_get_cell_style(value clist, value row, value column) { /* ML */
  return Val_gtk_style(gtk_clist_get_cell_style(GtkObj_val(clist), Int_val(row), Int_val(column)));
}

/* ML type: gtkobj -> int -> gtk_style -> unit */
EXTERNML value mgtk_gtk_clist_set_row_style(value clist, value row, value style) { /* ML */
  gtk_clist_set_row_style(GtkObj_val(clist), Int_val(row), gtk_style_val(style));
  return Val_unit;
}

/* ML type: gtkobj -> int -> gtk_style */
EXTERNML value mgtk_gtk_clist_get_row_style(value clist, value row) { /* ML */
  return Val_gtk_style(gtk_clist_get_row_style(GtkObj_val(clist), Int_val(row)));
}

/* ML type: gtkobj -> int -> int -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_shift(value clist, value row, value column, value vertical, value horizontal) { /* ML */
  gtk_clist_set_shift(GtkObj_val(clist), Int_val(row), Int_val(column), Int_val(vertical), Int_val(horizontal));
  return Val_unit;
}

/* ML type: gtkobj -> int -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_selectable(value clist, value row, value selectable) { /* ML */
  gtk_clist_set_selectable(GtkObj_val(clist), Int_val(row), Bool_val(selectable));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_get_selectable(value clist, value row) { /* ML */
  gtk_clist_get_selectable(GtkObj_val(clist), Int_val(row));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_remove(value clist, value row) { /* ML */
  gtk_clist_remove(GtkObj_val(clist), Int_val(row));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_select_row(value clist, value row, value column) { /* ML */
  gtk_clist_select_row(GtkObj_val(clist), Int_val(row), Int_val(column));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_unselect_row(value clist, value row, value column) { /* ML */
  gtk_clist_unselect_row(GtkObj_val(clist), Int_val(row), Int_val(column));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_undo_selection(value clist) { /* ML */
  gtk_clist_undo_selection(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_clear(value clist) { /* ML */
  gtk_clist_clear(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> int * int * int */
EXTERNML value mgtk_gtk_clist_get_selection_info(value clist, value x, value y) { /* ML */
  value res;
  int resrow;
  int rescolumn;
  value rescall = gtk_clist_get_selection_info(GtkObj_val(clist), Int_val(x), Int_val(y), &resrow, &rescolumn);
  res = alloc_tuple(3);
  Field(res, 0) = Val_int(rescall);
  Field(res, 1) = Val_int(resrow);
  Field(res, 2) = Val_int(rescolumn);
  return res;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_select_all(value clist) { /* ML */
  gtk_clist_select_all(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_unselect_all(value clist) { /* ML */
  gtk_clist_unselect_all(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_swap_rows(value clist, value row1, value row2) { /* ML */
  gtk_clist_swap_rows(GtkObj_val(clist), Int_val(row1), Int_val(row2));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_clist_row_move(value clist, value source_row, value dest_row) { /* ML */
  gtk_clist_row_move(GtkObj_val(clist), Int_val(source_row), Int_val(dest_row));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_sort_column(value clist, value column) { /* ML */
  gtk_clist_set_sort_column(GtkObj_val(clist), Int_val(column));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_clist_set_sort_type(value clist, value sort_type) { /* ML */
  gtk_clist_set_sort_type(GtkObj_val(clist), Int_val(sort_type));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_clist_sort(value clist) { /* ML */
  gtk_clist_sort(GtkObj_val(clist));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_clist_set_auto_sort(value clist, value auto_sort) { /* ML */
  gtk_clist_set_auto_sort(GtkObj_val(clist), Bool_val(auto_sort));
  return Val_unit;
}

/* *** ListItem stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_list_item_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_list_item_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_list_item_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_list_item_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_item_select(value list_item) { /* ML */
  gtk_list_item_select(GtkObj_val(list_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_item_deselect(value list_item) { /* ML */
  gtk_list_item_deselect(GtkObj_val(list_item));
  return Val_unit;
}

/* *** List stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_list_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_list_new());
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_list_clear_items(value list, value start_item, value end_item) { /* ML */
  gtk_list_clear_items(GtkObj_val(list), Int_val(start_item), Int_val(end_item));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_list_select_item(value list, value item) { /* ML */
  gtk_list_select_item(GtkObj_val(list), Int_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_list_unselect_item(value list, value item) { /* ML */
  gtk_list_unselect_item(GtkObj_val(list), Int_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_list_select_child(value list, value child) { /* ML */
  gtk_list_select_child(GtkObj_val(list), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_list_unselect_child(value list, value child) { /* ML */
  gtk_list_unselect_child(GtkObj_val(list), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int */
EXTERNML value mgtk_gtk_list_child_position(value list, value child) { /* ML */
  return Val_int(gtk_list_child_position(GtkObj_val(list), GtkObj_val(child)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_list_set_selection_mode(value list, value mode) { /* ML */
  gtk_list_set_selection_mode(GtkObj_val(list), Int_val(mode));
  return Val_unit;
}

/* ML type: gtkobj -> int -> real -> bool -> unit */
EXTERNML value mgtk_gtk_list_extend_selection(value list, value scroll_type, value position, value auto_start) { /* ML */
  gtk_list_extend_selection(GtkObj_val(list), Int_val(scroll_type), Double_val(position), Bool_val(auto_start));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_start_selection(value list) { /* ML */
  gtk_list_start_selection(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_end_selection(value list) { /* ML */
  gtk_list_end_selection(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_select_all(value list) { /* ML */
  gtk_list_select_all(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_unselect_all(value list) { /* ML */
  gtk_list_unselect_all(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> int -> real -> unit */
EXTERNML value mgtk_gtk_list_scroll_horizontal(value list, value scroll_type, value pos) { /* ML */
  gtk_list_scroll_horizontal(GtkObj_val(list), Int_val(scroll_type), Double_val(pos));
  return Val_unit;
}

/* ML type: gtkobj -> int -> real -> unit */
EXTERNML value mgtk_gtk_list_scroll_vertical(value list, value scroll_type, value pos) { /* ML */
  gtk_list_scroll_vertical(GtkObj_val(list), Int_val(scroll_type), Double_val(pos));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_toggle_add_mode(value list) { /* ML */
  gtk_list_toggle_add_mode(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_toggle_focus_row(value list) { /* ML */
  gtk_list_toggle_focus_row(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_list_toggle_row(value list, value item) { /* ML */
  gtk_list_toggle_row(GtkObj_val(list), GtkObj_val(item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_undo_selection(value list) { /* ML */
  gtk_list_undo_selection(GtkObj_val(list));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_list_end_drag_selection(value list) { /* ML */
  gtk_list_end_drag_selection(GtkObj_val(list));
  return Val_unit;
}

/* *** MenuShell stuff *** */


/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_shell_append(value menu_shell, value child) { /* ML */
  gtk_menu_shell_append(GtkObj_val(menu_shell), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_shell_prepend(value menu_shell, value child) { /* ML */
  gtk_menu_shell_prepend(GtkObj_val(menu_shell), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_shell_insert(value menu_shell, value child, value position) { /* ML */
  gtk_menu_shell_insert(GtkObj_val(menu_shell), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_shell_deactivate(value menu_shell) { /* ML */
  gtk_menu_shell_deactivate(GtkObj_val(menu_shell));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_shell_select_item(value menu_shell, value menu_item) { /* ML */
  gtk_menu_shell_select_item(GtkObj_val(menu_shell), GtkObj_val(menu_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_shell_deselect(value menu_shell) { /* ML */
  gtk_menu_shell_deselect(GtkObj_val(menu_shell));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_menu_shell_activate_item(value menu_shell, value menu_item, value force_deactivate) { /* ML */
  gtk_menu_shell_activate_item(GtkObj_val(menu_shell), GtkObj_val(menu_item), Bool_val(force_deactivate));
  return Val_unit;
}

/* *** MenuBar stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_menu_bar_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_menu_bar_new());
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_bar_append(value menu_bar, value child) { /* ML */
  gtk_menu_bar_append(GtkObj_val(menu_bar), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_bar_prepend(value menu_bar, value child) { /* ML */
  gtk_menu_bar_prepend(GtkObj_val(menu_bar), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_bar_insert(value menu_bar, value child, value position) { /* ML */
  gtk_menu_bar_insert(GtkObj_val(menu_bar), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_bar_set_shadow_type(value menu_bar, value typ) { /* ML */
  gtk_menu_bar_set_shadow_type(GtkObj_val(menu_bar), Int_val(typ));
  return Val_unit;
}

/* *** Menu stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_menu_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_menu_new());
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_append(value menu, value child) { /* ML */
  gtk_menu_append(GtkObj_val(menu), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_prepend(value menu, value child) { /* ML */
  gtk_menu_prepend(GtkObj_val(menu), GtkObj_val(child));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_insert(value menu, value child, value position) { /* ML */
  gtk_menu_insert(GtkObj_val(menu), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_reposition(value menu) { /* ML */
  gtk_menu_reposition(GtkObj_val(menu));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_popdown(value menu) { /* ML */
  gtk_menu_popdown(GtkObj_val(menu));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_menu_get_active(value menu) { /* ML */
  return Val_GtkObj(gtk_menu_get_active(GtkObj_val(menu)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_set_active(value menu, value index) { /* ML */
  gtk_menu_set_active(GtkObj_val(menu), Int_val(index));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group -> unit */
EXTERNML value mgtk_gtk_menu_set_accel_group(value menu, value group) { /* ML */
  gtk_menu_set_accel_group(GtkObj_val(menu), gtk_accel_group_val(group));
  return Val_unit;
}

/* ML type: gtkobj -> gtk_accel_group */
EXTERNML value mgtk_gtk_menu_get_accel_group(value menu) { /* ML */
  return Val_gtk_accel_group(gtk_menu_get_accel_group(GtkObj_val(menu)));
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_menu_get_attach_widget(value menu) { /* ML */
  return Val_GtkObj(gtk_menu_get_attach_widget(GtkObj_val(menu)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_detach(value menu) { /* ML */
  gtk_menu_detach(GtkObj_val(menu));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_menu_set_tearoff_state(value menu, value torn_off) { /* ML */
  gtk_menu_set_tearoff_state(GtkObj_val(menu), Bool_val(torn_off));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_menu_set_title(value menu, value title) { /* ML */
  gtk_menu_set_title(GtkObj_val(menu), String_val(title));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_reorder_child(value menu, value child, value position) { /* ML */
  gtk_menu_reorder_child(GtkObj_val(menu), GtkObj_val(child), Int_val(position));
  return Val_unit;
}

/* *** MenuItem stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_menu_item_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_menu_item_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_menu_item_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_menu_item_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_set_submenu(value menu_item, value submenu) { /* ML */
  gtk_menu_item_set_submenu(GtkObj_val(menu_item), GtkObj_val(submenu));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_remove_submenu(value menu_item) { /* ML */
  gtk_menu_item_remove_submenu(GtkObj_val(menu_item));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_menu_item_set_placement(value menu_item, value placement) { /* ML */
  gtk_menu_item_set_placement(GtkObj_val(menu_item), Int_val(placement));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> bool -> unit */
EXTERNML value mgtk_gtk_menu_item_configure(value menu_item, value show_toggle_indicator, value show_submenu_indicator) { /* ML */
  gtk_menu_item_configure(GtkObj_val(menu_item), Bool_val(show_toggle_indicator), Bool_val(show_submenu_indicator));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_select(value menu_item) { /* ML */
  gtk_menu_item_select(GtkObj_val(menu_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_deselect(value menu_item) { /* ML */
  gtk_menu_item_deselect(GtkObj_val(menu_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_activate(value menu_item) { /* ML */
  gtk_menu_item_activate(GtkObj_val(menu_item));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_menu_item_right_justify(value menu_item) { /* ML */
  gtk_menu_item_right_justify(GtkObj_val(menu_item));
  return Val_unit;
}

/* *** CheckMenuItem stuff *** */

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_check_menu_item_get_active(value wid) { /* ML */
  return Val_int((GTK_CHECK_MENU_ITEM(GtkObj_val(wid))) -> active);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_check_menu_item_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_check_menu_item_new());
}

/* ML type: string -> gtkobj */
EXTERNML value mgtk_gtk_check_menu_item_new_with_label(value label) { /* ML */
  return Val_GtkObj(gtk_check_menu_item_new_with_label(String_val(label)));
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_check_menu_item_set_active(value check_menu_item, value state) { /* ML */
  gtk_check_menu_item_set_active(GtkObj_val(check_menu_item), Bool_val(state));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_check_menu_item_set_show_toggle(value menu_item, value always) { /* ML */
  gtk_check_menu_item_set_show_toggle(GtkObj_val(menu_item), Bool_val(always));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_check_menu_item_toggled(value check_menu_item) { /* ML */
  gtk_check_menu_item_toggled(GtkObj_val(check_menu_item));
  return Val_unit;
}

/* *** RadioMenuItem stuff *** */


/* *** OptionMenu stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_option_menu_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_option_menu_new());
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_option_menu_get_menu(value option_menu) { /* ML */
  return Val_GtkObj(gtk_option_menu_get_menu(GtkObj_val(option_menu)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_option_menu_set_menu(value option_menu, value menu) { /* ML */
  gtk_option_menu_set_menu(GtkObj_val(option_menu), GtkObj_val(menu));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_option_menu_remove_menu(value option_menu) { /* ML */
  gtk_option_menu_remove_menu(GtkObj_val(option_menu));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_option_menu_set_history(value option_menu, value index) { /* ML */
  gtk_option_menu_set_history(GtkObj_val(option_menu), Int_val(index));
  return Val_unit;
}

/* *** TearoffMenuItem stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_tearoff_menu_item_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_tearoff_menu_item_new());
}

/* *** ItemFactory stuff *** */


/* ML type: word -> string -> gtk_accel_group -> gtkobj */
EXTERNML value mgtk_gtk_item_factory_new(value container_type, value path, value group) { /* ML */
  return Val_GtkObj(gtk_item_factory_new(Int_val(container_type), String_val(path), gtk_accel_group_val(group)));
}

/* ML type: string -> unit */
EXTERNML value mgtk_gtk_item_factory_parse_rc(value file_name) { /* ML */
  gtk_item_factory_parse_rc(String_val(file_name));
  return Val_unit;
}

/* ML type: string -> unit */
EXTERNML value mgtk_gtk_item_factory_parse_rc_string(value rc_string) { /* ML */
  gtk_item_factory_parse_rc_string(String_val(rc_string));
  return Val_unit;
}

/* ML type: gtkobj -> string -> gtk_accel_group -> word -> int -> unit */
EXTERNML value mgtk_gtk_item_factory_add_foreign(value accel_widget, value full_path, value accel_group, value keyval, value modifiers) { /* ML */
  gtk_item_factory_add_foreign(GtkObj_val(accel_widget), String_val(full_path), gtk_accel_group_val(accel_group), Int_val(keyval), Int_val(modifiers));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_item_factory_from_widget(value widget) { /* ML */
  return Val_GtkObj(gtk_item_factory_from_widget(GtkObj_val(widget)));
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_item_factory_path_from_widget(value widget) { /* ML */
  return copy_string(gtk_item_factory_path_from_widget(GtkObj_val(widget)));
}

/* ML type: gtkobj -> string -> gtkobj */
EXTERNML value mgtk_gtk_item_factory_get_widget(value ifactory, value path) { /* ML */
  return Val_GtkObj(gtk_item_factory_get_widget(GtkObj_val(ifactory), String_val(path)));
}

/* ML type: gtkobj -> word -> gtkobj */
EXTERNML value mgtk_gtk_item_factory_get_widget_by_action(value ifactory, value action) { /* ML */
  return Val_GtkObj(gtk_item_factory_get_widget_by_action(GtkObj_val(ifactory), Int_val(action)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_item_factory_delete_item(value ifactory, value path) { /* ML */
  gtk_item_factory_delete_item(GtkObj_val(ifactory), String_val(path));
  return Val_unit;
}

/* ML type: gtkobj -> word -> word -> word -> word -> unit */
EXTERNML value mgtk_gtk_item_factory_popup(value ifactory, value x, value y, value mouse_button, value time) { /* ML */
  gtk_item_factory_popup(GtkObj_val(ifactory), Int_val(x), Int_val(y), Int_val(mouse_button), Int_val(time));
  return Val_unit;
}

/* *** Range stuff *** */


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_range_get_adjustment(value range) { /* ML */
  return Val_GtkObj(gtk_range_get_adjustment(GtkObj_val(range)));
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_range_set_update_policy(value range, value policy) { /* ML */
  gtk_range_set_update_policy(GtkObj_val(range), Int_val(policy));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_range_set_adjustment(value range, value adjustment) { /* ML */
  gtk_range_set_adjustment(GtkObj_val(range), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_draw_background(value range) { /* ML */
  gtk_range_draw_background(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_clear_background(value range) { /* ML */
  gtk_range_clear_background(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_draw_trough(value range) { /* ML */
  gtk_range_draw_trough(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_draw_slider(value range) { /* ML */
  gtk_range_draw_slider(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_draw_step_forw(value range) { /* ML */
  gtk_range_draw_step_forw(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_draw_step_back(value range) { /* ML */
  gtk_range_draw_step_back(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_slider_update(value range) { /* ML */
  gtk_range_slider_update(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_range_default_hmotion(value range, value xdelta, value ydelta) { /* ML */
  gtk_range_default_hmotion(GtkObj_val(range), Int_val(xdelta), Int_val(ydelta));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_default_hslider_update(value range) { /* ML */
  gtk_range_default_hslider_update(GtkObj_val(range));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_range_default_vmotion(value range, value xdelta, value ydelta) { /* ML */
  gtk_range_default_vmotion(GtkObj_val(range), Int_val(xdelta), Int_val(ydelta));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_range_default_vslider_update(value range) { /* ML */
  gtk_range_default_vslider_update(GtkObj_val(range));
  return Val_unit;
}

/* *** Scale stuff *** */


/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_scale_set_digits(value scale, value digits) { /* ML */
  gtk_scale_set_digits(GtkObj_val(scale), Int_val(digits));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_scale_set_draw_value(value scale, value draw_value) { /* ML */
  gtk_scale_set_draw_value(GtkObj_val(scale), Bool_val(draw_value));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_scale_set_value_pos(value scale, value pos) { /* ML */
  gtk_scale_set_value_pos(GtkObj_val(scale), Int_val(pos));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_scale_get_value_width(value scale) { /* ML */
  return Val_int(gtk_scale_get_value_width(GtkObj_val(scale)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_scale_draw_value(value scale) { /* ML */
  gtk_scale_draw_value(GtkObj_val(scale));
  return Val_unit;
}

/* *** HScale stuff *** */


/* ML type: gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_hscale_new(value adjustment) { /* ML */
  return Val_GtkObj(gtk_hscale_new(GtkObjOption_nullok(adjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hscale_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_hscale_new(NULL));
}

/* *** VScale stuff *** */


/* ML type: gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_vscale_new(value adjustment) { /* ML */
  return Val_GtkObj(gtk_vscale_new(GtkObjOption_nullok(adjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vscale_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_vscale_new(NULL));
}

/* *** Scrollbar stuff *** */


/* *** HScrollbar stuff *** */


/* ML type: gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_hscrollbar_new(value adjustment) { /* ML */
  return Val_GtkObj(gtk_hscrollbar_new(GtkObjOption_nullok(adjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hscrollbar_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_hscrollbar_new(NULL));
}

/* *** VScrollbar stuff *** */


/* ML type: gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_vscrollbar_new(value adjustment) { /* ML */
  return Val_GtkObj(gtk_vscrollbar_new(GtkObjOption_nullok(adjustment)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vscrollbar_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_vscrollbar_new(NULL));
}

/* *** Ruler stuff *** */


/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_ruler_set_metric(value ruler, value metric) { /* ML */
  gtk_ruler_set_metric(GtkObj_val(ruler), Int_val(metric));
  return Val_unit;
}

/* ML type: gtkobj -> real -> real -> real -> real -> unit */
EXTERNML value mgtk_gtk_ruler_set_range(value ruler, value lower, value upper, value position, value max_size) { /* ML */
  gtk_ruler_set_range(GtkObj_val(ruler), Double_val(lower), Double_val(upper), Double_val(position), Double_val(max_size));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_ruler_draw_ticks(value ruler) { /* ML */
  gtk_ruler_draw_ticks(GtkObj_val(ruler));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_ruler_draw_pos(value ruler) { /* ML */
  gtk_ruler_draw_pos(GtkObj_val(ruler));
  return Val_unit;
}

/* *** HRuler stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_hruler_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_hruler_new());
}

/* *** VRuler stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_vruler_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_vruler_new());
}

/* *** Editable stuff *** */

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_editable_get_selection_start_pos(value wid) { /* ML */
  return Val_int((GTK_EDITABLE(GtkObj_val(wid))) -> selection_start_pos);
}


/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_editable_get_selection_end_pos(value wid) { /* ML */
  return Val_int((GTK_EDITABLE(GtkObj_val(wid))) -> selection_end_pos);
}


/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_editable_select_region(value editable, value start_pos, value end_pos) { /* ML */
  gtk_editable_select_region(GtkObj_val(editable), Int_val(start_pos), Int_val(end_pos));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_editable_delete_text(value editable, value start_pos, value end_pos) { /* ML */
  gtk_editable_delete_text(GtkObj_val(editable), Int_val(start_pos), Int_val(end_pos));
  return Val_unit;
}

/* ML type: gtkobj -> int -> int -> string */
EXTERNML value mgtk_gtk_editable_get_chars(value editable, value start_pos, value end_pos) { /* ML */
  return copy_string(gtk_editable_get_chars(GtkObj_val(editable), Int_val(start_pos), Int_val(end_pos)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_editable_cut_clipboard(value edtiable) { /* ML */
  gtk_editable_cut_clipboard(GtkObj_val(edtiable));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_editable_copy_clipboard(value editable) { /* ML */
  gtk_editable_copy_clipboard(GtkObj_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_editable_paste_clipboard(value editable) { /* ML */
  gtk_editable_paste_clipboard(GtkObj_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> word -> unit */
EXTERNML value mgtk_gtk_editable_claim_selection(value editable, value claim, value time) { /* ML */
  gtk_editable_claim_selection(GtkObj_val(editable), Bool_val(claim), Int_val(time));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_editable_delete_selection(value editable) { /* ML */
  gtk_editable_delete_selection(GtkObj_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_editable_changed(value editable) { /* ML */
  gtk_editable_changed(GtkObj_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_editable_set_position(value editable, value position) { /* ML */
  gtk_editable_set_position(GtkObj_val(editable), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_editable_get_position(value editable) { /* ML */
  return Val_int(gtk_editable_get_position(GtkObj_val(editable)));
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_editable_set_editable(value editable, value is_editable) { /* ML */
  gtk_editable_set_editable(GtkObj_val(editable), Bool_val(is_editable));
  return Val_unit;
}

/* *** Entry stuff *** */


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_entry_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_entry_new());
}

/* ML type: int -> gtkobj */
EXTERNML value mgtk_gtk_entry_new_with_max_length(value max) { /* ML */
  return Val_GtkObj(gtk_entry_new_with_max_length(Int_val(max)));
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_entry_set_text(value entry, value text) { /* ML */
  gtk_entry_set_text(GtkObj_val(entry), String_val(text));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_entry_append_text(value entry, value text) { /* ML */
  gtk_entry_append_text(GtkObj_val(entry), String_val(text));
  return Val_unit;
}

/* ML type: gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_entry_prepend_text(value entry, value text) { /* ML */
  gtk_entry_prepend_text(GtkObj_val(entry), String_val(text));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_entry_set_position(value entry, value position) { /* ML */
  gtk_entry_set_position(GtkObj_val(entry), Int_val(position));
  return Val_unit;
}

/* ML type: gtkobj -> string */
EXTERNML value mgtk_gtk_entry_get_text(value entry) { /* ML */
  return copy_string(gtk_entry_get_text(GtkObj_val(entry)));
}

/* ML type: gtkobj -> int -> int -> unit */
EXTERNML value mgtk_gtk_entry_select_region(value entry, value start_pos, value end_pos) { /* ML */
  gtk_entry_select_region(GtkObj_val(entry), Int_val(start_pos), Int_val(end_pos));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_entry_set_visibility(value entry, value visible) { /* ML */
  gtk_entry_set_visibility(GtkObj_val(entry), Bool_val(visible));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_entry_set_editable(value entry, value editable) { /* ML */
  gtk_entry_set_editable(GtkObj_val(entry), Bool_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_entry_set_max_length(value entry, value max) { /* ML */
  gtk_entry_set_max_length(GtkObj_val(entry), Int_val(max));
  return Val_unit;
}

/* *** SpinButton stuff *** */


/* ML type: gtkobj option -> real -> word -> gtkobj */
EXTERNML value mgtk_gtk_spin_button_new(value adjustment, value climb_rate, value digits) { /* ML */
  return Val_GtkObj(gtk_spin_button_new(GtkObjOption_nullok(adjustment), Double_val(climb_rate), Int_val(digits)));
}

/* ML type: real -> word -> gtkobj */
EXTERNML value mgtk_gtk_spin_button_new_short(value climb_rate, value digits) { /* ML */
  return Val_GtkObj(gtk_spin_button_new(NULL, Double_val(climb_rate), Int_val(digits)));
}

/* ML type: gtkobj -> gtkobj -> unit */
EXTERNML value mgtk_gtk_spin_button_set_adjustment(value spin_button, value adjustment) { /* ML */
  gtk_spin_button_set_adjustment(GtkObj_val(spin_button), GtkObj_val(adjustment));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_spin_button_get_adjustment(value spin_button) { /* ML */
  return Val_GtkObj(gtk_spin_button_get_adjustment(GtkObj_val(spin_button)));
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_spin_button_set_digits(value spin_button, value digits) { /* ML */
  gtk_spin_button_set_digits(GtkObj_val(spin_button), Int_val(digits));
  return Val_unit;
}

/* ML type: gtkobj -> real */
EXTERNML value mgtk_gtk_spin_button_get_value_as_float(value spin_button) { /* ML */
  return copy_double(gtk_spin_button_get_value_as_float(GtkObj_val(spin_button)));
}

/* ML type: gtkobj -> int */
EXTERNML value mgtk_gtk_spin_button_get_value_as_int(value spin_button) { /* ML */
  return Val_int(gtk_spin_button_get_value_as_int(GtkObj_val(spin_button)));
}

/* ML type: gtkobj -> real -> unit */
EXTERNML value mgtk_gtk_spin_button_set_value(value spin_button, value valu) { /* ML */
  gtk_spin_button_set_value(GtkObj_val(spin_button), Double_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_spin_button_set_update_policy(value spin_button, value policy) { /* ML */
  gtk_spin_button_set_update_policy(GtkObj_val(spin_button), Int_val(policy));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_spin_button_set_numeric(value spin_button, value numeric) { /* ML */
  gtk_spin_button_set_numeric(GtkObj_val(spin_button), Bool_val(numeric));
  return Val_unit;
}

/* ML type: gtkobj -> int -> real -> unit */
EXTERNML value mgtk_gtk_spin_button_spin(value spin_button, value direction, value increment) { /* ML */
  gtk_spin_button_spin(GtkObj_val(spin_button), Int_val(direction), Double_val(increment));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_spin_button_set_wrap(value spin_button, value wrap) { /* ML */
  gtk_spin_button_set_wrap(GtkObj_val(spin_button), Bool_val(wrap));
  return Val_unit;
}

/* ML type: gtkobj -> int -> unit */
EXTERNML value mgtk_gtk_spin_button_set_shadow_type(value spin_button, value shadow_type) { /* ML */
  gtk_spin_button_set_shadow_type(GtkObj_val(spin_button), Int_val(shadow_type));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_spin_button_set_snap_to_ticks(value spin_button, value snap_to_ticks) { /* ML */
  gtk_spin_button_set_snap_to_ticks(GtkObj_val(spin_button), Bool_val(snap_to_ticks));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_spin_button_update(value spin_button) { /* ML */
  gtk_spin_button_update(GtkObj_val(spin_button));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> real -> word -> unit */
EXTERNML value mgtk_gtk_spin_button_configure(value spin_button, value adjustment, value climb_rate, value digits) { /* ML */
  gtk_spin_button_configure(GtkObj_val(spin_button), GtkObj_val(adjustment), Double_val(climb_rate), Int_val(digits));
  return Val_unit;
}

/* *** Combo stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_combo_get_entry(value wid) { /* ML */
  return Val_GtkObj((GTK_COMBO(GtkObj_val(wid))) -> entry);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_combo_get_list(value wid) { /* ML */
  return Val_GtkObj((GTK_COMBO(GtkObj_val(wid))) -> list);
}


/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_combo_new(value dummy) { /* ML */
  return Val_GtkObj(gtk_combo_new());
}

/* ML type: gtkobj -> bool -> bool -> unit */
EXTERNML value mgtk_gtk_combo_set_value_in_list(value combo, value valu, value ok_if_empty) { /* ML */
  gtk_combo_set_value_in_list(GtkObj_val(combo), Bool_val(valu), Bool_val(ok_if_empty));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_combo_set_use_arrows(value combo, value valu) { /* ML */
  gtk_combo_set_use_arrows(GtkObj_val(combo), Bool_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_combo_set_use_arrows_always(value combo, value valu) { /* ML */
  gtk_combo_set_use_arrows_always(GtkObj_val(combo), Bool_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_combo_set_case_sensitive(value combo, value valu) { /* ML */
  gtk_combo_set_case_sensitive(GtkObj_val(combo), Bool_val(valu));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj -> string -> unit */
EXTERNML value mgtk_gtk_combo_set_item_string(value combo, value item, value item_value) { /* ML */
  gtk_combo_set_item_string(GtkObj_val(combo), GtkObj_val(item), String_val(item_value));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_combo_disable_activate(value combo) { /* ML */
  gtk_combo_disable_activate(GtkObj_val(combo));
  return Val_unit;
}

/* *** Text stuff *** */

/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_text_get_hadj(value wid) { /* ML */
  return Val_GtkObj((GTK_TEXT(GtkObj_val(wid))) -> hadj);
}


/* ML type: gtkobj -> gtkobj */
EXTERNML value mgtk_gtk_text_get_vadj(value wid) { /* ML */
  return Val_GtkObj((GTK_TEXT(GtkObj_val(wid))) -> vadj);
}


/* ML type: gtkobj option -> gtkobj option -> gtkobj */
EXTERNML value mgtk_gtk_text_new(value hadj, value vadj) { /* ML */
  return Val_GtkObj(gtk_text_new(GtkObjOption_nullok(hadj), GtkObjOption_nullok(vadj)));
}

/* ML type: unit -> gtkobj */
EXTERNML value mgtk_gtk_text_new_short(value dummy) { /* ML */
  return Val_GtkObj(gtk_text_new(NULL, NULL));
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_text_set_editable(value text, value editable) { /* ML */
  gtk_text_set_editable(GtkObj_val(text), Bool_val(editable));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_text_set_word_wrap(value text, value word_wrap) { /* ML */
  gtk_text_set_word_wrap(GtkObj_val(text), Bool_val(word_wrap));
  return Val_unit;
}

/* ML type: gtkobj -> bool -> unit */
EXTERNML value mgtk_gtk_text_set_line_wrap(value text, value line_wrap) { /* ML */
  gtk_text_set_line_wrap(GtkObj_val(text), Bool_val(line_wrap));
  return Val_unit;
}

/* ML type: gtkobj -> gtkobj option -> gtkobj option -> unit */
EXTERNML value mgtk_gtk_text_set_adjustments(value text, value hadj, value vadj) { /* ML */
  gtk_text_set_adjustments(GtkObj_val(text), GtkObjOption_nullok(hadj), GtkObjOption_nullok(vadj));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_text_set_adjustments_short(value text) { /* ML */
  gtk_text_set_adjustments(GtkObj_val(text), NULL, NULL);
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_text_set_point(value text, value index) { /* ML */
  gtk_text_set_point(GtkObj_val(text), Int_val(index));
  return Val_unit;
}

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_text_get_point(value text) { /* ML */
  return Val_int(gtk_text_get_point(GtkObj_val(text)));
}

/* ML type: gtkobj -> word */
EXTERNML value mgtk_gtk_text_get_length(value text) { /* ML */
  return Val_int(gtk_text_get_length(GtkObj_val(text)));
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_text_freeze(value text) { /* ML */
  gtk_text_freeze(GtkObj_val(text));
  return Val_unit;
}

/* ML type: gtkobj -> unit */
EXTERNML value mgtk_gtk_text_thaw(value text) { /* ML */
  gtk_text_thaw(GtkObj_val(text));
  return Val_unit;
}

/* ML type: gtkobj * gdk_font option * gdk_color option * gdk_color option * string * int -> unit */
EXTERNML value mgtk_gtk_text_insert(value mgtk_params) { /* ML */
  value text = Field(mgtk_params, 0);
  value font = Field(mgtk_params, 1);
  value fore = Field(mgtk_params, 2);
  value back = Field(mgtk_params, 3);
  value chars = Field(mgtk_params, 4);
  value length = Field(mgtk_params, 5);
  gtk_text_insert(GtkObj_val(text), GtkObjOption_nullok(font), GtkObjOption_nullok(fore), GtkObjOption_nullok(back), String_val(chars), Int_val(length));
  return Val_unit;
}

/* ML type: gtkobj -> string -> int -> unit */
EXTERNML value mgtk_gtk_text_insert_short(value text, value chars, value length) { /* ML */
  gtk_text_insert(GtkObj_val(text), NULL, NULL, NULL, String_val(chars), Int_val(length));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_text_backward_delete(value text, value nchars) { /* ML */
  gtk_text_backward_delete(GtkObj_val(text), Int_val(nchars));
  return Val_unit;
}

/* ML type: gtkobj -> word -> unit */
EXTERNML value mgtk_gtk_text_forward_delete(value text, value nchars) { /* ML */
  gtk_text_forward_delete(GtkObj_val(text), Int_val(nchars));
  return Val_unit;
}

------------------------------------------------------------
(* mgtk --- an SML binding for GTK.                                          *)
(* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         *)
(*                                                                           *)
(* This file is generated automatically. Search for AUTOMATICALLY to find    *)
(* the beginning of the autogenerated code.                                  *)
(*                                                                           *)
(* Command used to generate the file:                                        *)
(*   ../defs2sml -sig --no-header -o gtk.sig gtk.defs                        *)




(*                                                                           *)
(* Start of AUTOMATICALLY generated code.                                    *)
(*                                                                           *)


    eqtype gdk_window_type
    val GDK_WINDOW_ROOT: gdk_window_type
    val GDK_WINDOW_TOPLEVEL: gdk_window_type
    val GDK_WINDOW_CHILD: gdk_window_type
    val GDK_WINDOW_DIALOG: gdk_window_type
    val GDK_WINDOW_TEMP: gdk_window_type
    val GDK_WINDOW_PIXMAP: gdk_window_type
    val GDK_WINDOW_FOREIGN: gdk_window_type

    eqtype gdk_window_class
    val GDK_INPUT_OUTPUT: gdk_window_class
    val GDK_INPUT_ONLY: gdk_window_class

    eqtype gdk_image_type
    val GDK_IMAGE_NORMAL: gdk_image_type
    val GDK_IMAGE_SHARED: gdk_image_type
    val GDK_IMAGE_FASTEST: gdk_image_type

    eqtype gdk_visual_type
    val GDK_VISUAL_STATIC_GRAY: gdk_visual_type
    val GDK_VISUAL_GRAYSCALE: gdk_visual_type
    val GDK_VISUAL_STATIC_COLOR: gdk_visual_type
    val GDK_VISUAL_PSEUDO_COLOR: gdk_visual_type
    val GDK_VISUAL_TRUE_COLOR: gdk_visual_type
    val GDK_VISUAL_DIRECT_COLOR: gdk_visual_type

    eqtype gdk_font_type
    val GDK_FONT_FONT: gdk_font_type
    val GDK_FONT_FONTSET: gdk_font_type

    eqtype gdk_window_attributes_type
    val GDK_WA_TITLE: gdk_window_attributes_type
    val GDK_WA_X: gdk_window_attributes_type
    val GDK_WA_Y: gdk_window_attributes_type
    val GDK_WA_CURSOR: gdk_window_attributes_type
    val GDK_WA_COLORMAP: gdk_window_attributes_type
    val GDK_WA_VISUAL: gdk_window_attributes_type
    val GDK_WA_WMCLASS: gdk_window_attributes_type
    val GDK_WA_NOREDIR: gdk_window_attributes_type

    eqtype gdk_window_hints
    val GDK_HINT_POS: gdk_window_hints
    val GDK_HINT_MIN_SIZE: gdk_window_hints
    val GDK_HINT_MAX_SIZE: gdk_window_hints
    val GDK_HINT_BASE_SIZE: gdk_window_hints
    val GDK_HINT_ASPECT: gdk_window_hints
    val GDK_HINT_RESIZE_INC: gdk_window_hints

    eqtype gdk_function
    val GDK_COPY: gdk_function
    val GDK_INVERT: gdk_function
    val GDK_XOR: gdk_function
    val GDK_CLEAR: gdk_function
    val GDK_AND: gdk_function
    val GDK_AND_REVERSE: gdk_function
    val GDK_AND_INVERT: gdk_function
    val GDK_NOOP: gdk_function
    val GDK_OR: gdk_function
    val GDK_EQUIV: gdk_function
    val GDK_OR_REVERSE: gdk_function
    val GDK_COPY_INVERT: gdk_function
    val GDK_OR_INVERT: gdk_function
    val GDK_NAND: gdk_function
    val GDK_SET: gdk_function

    eqtype gdk_fill
    val GDK_SOLID: gdk_fill
    val GDK_TILED: gdk_fill
    val GDK_STIPPLED: gdk_fill
    val GDK_OPAQUE_STIPPLED: gdk_fill

    eqtype gdk_fill_rule
    val GDK_EVEN_ODD_RULE: gdk_fill_rule
    val GDK_WINDING_RULE: gdk_fill_rule

    eqtype gdk_line_style
    val GDK_LINE_SOLID: gdk_line_style
    val GDK_LINE_ON_OFF_DASH: gdk_line_style
    val GDK_LINE_DOUBLE_DASH: gdk_line_style

    eqtype gdk_cap_style
    val GDK_CAP_NOT_LAST: gdk_cap_style
    val GDK_CAP_BUTT: gdk_cap_style
    val GDK_CAP_ROUND: gdk_cap_style
    val GDK_CAP_PROJECTING: gdk_cap_style

    eqtype gdk_join_style
    val GDK_JOIN_MITER: gdk_join_style
    val GDK_JOIN_ROUND: gdk_join_style
    val GDK_JOIN_BEVEL: gdk_join_style

    eqtype gdk_cursor_type
    val GDK_NUM_GLYPHS: gdk_cursor_type
    val GDK_X_CURSOR: gdk_cursor_type
    val GDK_ARROW: gdk_cursor_type
    val GDK_BASED_ARROW_DOWN: gdk_cursor_type
    val GDK_BASED_ARROW_UP: gdk_cursor_type
    val GDK_BOAT: gdk_cursor_type
    val GDK_BOGOSITY: gdk_cursor_type
    val GDK_BOTTOM_LEFT_CORNER: gdk_cursor_type
    val GDK_BOTTOM_RIGHT_CORNER: gdk_cursor_type
    val GDK_BOTTOM_SIDE: gdk_cursor_type
    val GDK_BOTTOM_TEE: gdk_cursor_type
    val GDK_BOX_SPIRAL: gdk_cursor_type
    val GDK_CENTER_PTR: gdk_cursor_type
    val GDK_CIRCLE: gdk_cursor_type
    val GDK_CLOCK: gdk_cursor_type
    val GDK_COFFEE_MUG: gdk_cursor_type
    val GDK_CROSS: gdk_cursor_type
    val GDK_CROSS_REVERSE: gdk_cursor_type
    val GDK_CROSSHAIR: gdk_cursor_type
    val GDK_DIAMOND_CROSS: gdk_cursor_type
    val GDK_DOT: gdk_cursor_type
    val GDK_DOTBOX: gdk_cursor_type
    val GDK_DOUBLE_ARROW: gdk_cursor_type
    val GDK_DRAFT_LARGE: gdk_cursor_type
    val GDK_DRAFT_SMALL: gdk_cursor_type
    val GDK_DRAPED_BOX: gdk_cursor_type
    val GDK_EXCHANGE: gdk_cursor_type
    val GDK_FLEUR: gdk_cursor_type
    val GDK_GOBBLER: gdk_cursor_type
    val GDK_GUMBY: gdk_cursor_type
    val GDK_HAND1: gdk_cursor_type
    val GDK_HAND2: gdk_cursor_type
    val GDK_HEART: gdk_cursor_type
    val GDK_ICON: gdk_cursor_type
    val GDK_IRON_CROSS: gdk_cursor_type
    val GDK_LEFT_PTR: gdk_cursor_type
    val GDK_LEFT_SIDE: gdk_cursor_type
    val GDK_LEFT_TEE: gdk_cursor_type
    val GDK_LEFTBUTTON: gdk_cursor_type
    val GDK_LL_ANGLE: gdk_cursor_type
    val GDK_LR_ANGLE: gdk_cursor_type
    val GDK_MAN: gdk_cursor_type
    val GDK_MIDDLEBUTTON: gdk_cursor_type
    val GDK_MOUSE: gdk_cursor_type
    val GDK_PENCIL: gdk_cursor_type
    val GDK_PIRATE: gdk_cursor_type
    val GDK_PLUS: gdk_cursor_type
    val GDK_QUESTION_ARROW: gdk_cursor_type
    val GDK_RIGHT_PTR: gdk_cursor_type
    val GDK_RIGHT_SIDE: gdk_cursor_type
    val GDK_RIGHT_TEE: gdk_cursor_type
    val GDK_RIGHTBUTTON: gdk_cursor_type
    val GDK_RTL_LOGO: gdk_cursor_type
    val GDK_SAILBOAT: gdk_cursor_type
    val GDK_SB_DOWN_ARROW: gdk_cursor_type
    val GDK_SB_H_DOUBLE_ARROW: gdk_cursor_type
    val GDK_SB_LEFT_ARROW: gdk_cursor_type
    val GDK_SB_RIGHT_ARROW: gdk_cursor_type
    val GDK_SB_UP_ARROW: gdk_cursor_type
    val GDK_SB_V_DOUBLE_ARROW: gdk_cursor_type
    val GDK_SHUTTLE: gdk_cursor_type
    val GDK_SIZING: gdk_cursor_type
    val GDK_SPIDER: gdk_cursor_type
    val GDK_SPRAYCAN: gdk_cursor_type
    val GDK_STAR: gdk_cursor_type
    val GDK_TARGET: gdk_cursor_type
    val GDK_TCROSS: gdk_cursor_type
    val GDK_TOP_LEFT_ARROW: gdk_cursor_type
    val GDK_TOP_LEFT_CORNER: gdk_cursor_type
    val GDK_TOP_RIGHT_CORNER: gdk_cursor_type
    val GDK_TOP_SIDE: gdk_cursor_type
    val GDK_TOP_TEE: gdk_cursor_type
    val GDK_TREK: gdk_cursor_type
    val GDK_UL_ANGLE: gdk_cursor_type
    val GDK_UMBRELLA: gdk_cursor_type
    val GDK_UR_ANGLE: gdk_cursor_type
    val GDK_WATCH: gdk_cursor_type
    val GDK_XTERM: gdk_cursor_type
    val GDK_LAST_CURSOR: gdk_cursor_type
    val GDK_CURSOR_IS_PIXMAP: gdk_cursor_type

    eqtype gdk_filter_return
    val GDK_FILTER_CONTINUE: gdk_filter_return
    val GDK_FILTER_TRANSLATE: gdk_filter_return
    val GDK_FILTER_REMOVE: gdk_filter_return

    eqtype gdk_visibility_state
    val GDK_VISIBILITY_UNOBSCURED: gdk_visibility_state
    val GDK_VISIBILITY_PARTIAL: gdk_visibility_state
    val GDK_VISIBILITY_FULLY_OBSCURED: gdk_visibility_state

    eqtype gdk_event_type
    val GDK_NOTHING: gdk_event_type
    val GDK_DELETE: gdk_event_type
    val GDK_DESTROY: gdk_event_type
    val GDK_EXPOSE: gdk_event_type
    val GDK_MOTION_NOTIFY: gdk_event_type
    val GDK_BUTTON_PRESS: gdk_event_type
    val GDK_2BUTTON_PRESS: gdk_event_type
    val GDK_3BUTTON_PRESS: gdk_event_type
    val GDK_BUTTON_RELEASE: gdk_event_type
    val GDK_KEY_PRESS: gdk_event_type
    val GDK_KEY_RELEASE: gdk_event_type
    val GDK_ENTER_NOTIFY: gdk_event_type
    val GDK_LEAVE_NOTIFY: gdk_event_type
    val GDK_FOCUS_CHANGE: gdk_event_type
    val GDK_CONFIGURE: gdk_event_type
    val GDK_MAP: gdk_event_type
    val GDK_UNMAP: gdk_event_type
    val GDK_PROPERTY_NOTIFY: gdk_event_type
    val GDK_SELECTION_CLEAR: gdk_event_type
    val GDK_SELECTION_REQUEST: gdk_event_type
    val GDK_SELECTION_NOTIFY: gdk_event_type
    val GDK_PROXIMITY_IN: gdk_event_type
    val GDK_PROXIMITY_OUT: gdk_event_type
    val GDK_DRAG_ENTER: gdk_event_type
    val GDK_DRAG_LEAVE: gdk_event_type
    val GDK_DRAG_MOTION: gdk_event_type
    val GDK_DRAG_STATUS: gdk_event_type
    val GDK_DROP_START: gdk_event_type
    val GDK_DROP_FINISHED: gdk_event_type
    val GDK_CLIENT_EVENT: gdk_event_type
    val GDK_VISIBILITY_NOTIFY: gdk_event_type
    val GDK_NO_EXPOSE: gdk_event_type

    eqtype gdk_event_mask
    val GDK_EXPOSURE_MASK: gdk_event_mask
    val GDK_POINTER_MOTION_MASK: gdk_event_mask
    val GDK_POINTER_MOTION_HINT_MASK: gdk_event_mask
    val GDK_BUTTON_MOTION_MASK: gdk_event_mask
    val GDK_BUTTON1_MOTION_MASK: gdk_event_mask
    val GDK_BUTTON2_MOTION_MASK: gdk_event_mask
    val GDK_BUTTON3_MOTION_MASK: gdk_event_mask
    val GDK_BUTTON_PRESS_MASK: gdk_event_mask
    val GDK_BUTTON_RELEASE_MASK: gdk_event_mask
    val GDK_KEY_PRESS_MASK: gdk_event_mask
    val GDK_KEY_RELEASE_MASK: gdk_event_mask
    val GDK_ENTER_NOTIFY_MASK: gdk_event_mask
    val GDK_LEAVE_NOTIFY_MASK: gdk_event_mask
    val GDK_FOCUS_CHANGE_MASK: gdk_event_mask
    val GDK_STRUCTURE_MASK: gdk_event_mask
    val GDK_PROPERTY_CHANGE_MASK: gdk_event_mask
    val GDK_VISIBILITY_NOTIFY_MASK: gdk_event_mask
    val GDK_PROXIMITY_IN_MASK: gdk_event_mask
    val GDK_PROXIMITY_OUT_MASK: gdk_event_mask
    val GDK_SUBSTRUCTURE_MASK: gdk_event_mask
    val GDK_ALL_EVENTS_MASK: gdk_event_mask

    eqtype gdk_notify_type
    val GDK_NOTIFY_ANCESTOR: gdk_notify_type
    val GDK_NOTIFY_VIRTUAL: gdk_notify_type
    val GDK_NOTIFY_INFERIOR: gdk_notify_type
    val GDK_NOTIFY_NONLINEAR: gdk_notify_type
    val GDK_NOTIFY_NONLINEAR_VIRTUAL: gdk_notify_type
    val GDK_NOTIFY_UNKNOWN: gdk_notify_type

    eqtype gdk_crossing_mode
    val GDK_CROSSING_NORMAL: gdk_crossing_mode
    val GDK_CROSSING_GRAB: gdk_crossing_mode
    val GDK_CROSSING_UNGRAB: gdk_crossing_mode

    eqtype gdk_modifier_type
    val GDK_SHIFT_MASK: gdk_modifier_type
    val GDK_LOCK_MASK: gdk_modifier_type
    val GDK_CONTROL_MASK: gdk_modifier_type
    val GDK_MOD1_MASK: gdk_modifier_type
    val GDK_MOD2_MASK: gdk_modifier_type
    val GDK_MOD3_MASK: gdk_modifier_type
    val GDK_MOD4_MASK: gdk_modifier_type
    val GDK_MOD5_MASK: gdk_modifier_type
    val GDK_BUTTON1_MASK: gdk_modifier_type
    val GDK_BUTTON2_MASK: gdk_modifier_type
    val GDK_BUTTON3_MASK: gdk_modifier_type
    val GDK_BUTTON4_MASK: gdk_modifier_type
    val GDK_BUTTON5_MASK: gdk_modifier_type
    val GDK_RELEASE_MASK: gdk_modifier_type
    val GDK_MODIFIER_MASK: gdk_modifier_type

    eqtype gdk_subwindow_mode
    val GDK_CLIP_BY_CHILDREN: gdk_subwindow_mode
    val GDK_INCLUDE_INFERIORS: gdk_subwindow_mode

    eqtype gdk_input_condition
    val GDK_INPUT_READ: gdk_input_condition
    val GDK_INPUT_WRITE: gdk_input_condition
    val GDK_INPUT_EXCEPTION: gdk_input_condition

    eqtype gdk_status
    val GDK_OK: gdk_status
    val GDK_ERROR: gdk_status
    val GDK_ERROR_PARAM: gdk_status
    val GDK_ERROR_FILE: gdk_status
    val GDK_ERROR_MEM: gdk_status

    eqtype gdk_byte_order
    val GDK_LSB_FIRST: gdk_byte_order
    val GDK_MSB_FIRST: gdk_byte_order

    eqtype gdk_gc_values_mask
    val GDK_GC_FOREGROUND: gdk_gc_values_mask
    val GDK_GC_BACKGROUND: gdk_gc_values_mask
    val GDK_GC_FONT: gdk_gc_values_mask
    val GDK_GC_FUNCTION: gdk_gc_values_mask
    val GDK_GC_FILL: gdk_gc_values_mask
    val GDK_GC_TILE: gdk_gc_values_mask
    val GDK_GC_STIPPLE: gdk_gc_values_mask
    val GDK_GC_CLIP_MASK: gdk_gc_values_mask
    val GDK_GC_SUBWINDOW: gdk_gc_values_mask
    val GDK_GC_TS_X_ORIGIN: gdk_gc_values_mask
    val GDK_GC_TS_Y_ORIGIN: gdk_gc_values_mask
    val GDK_GC_CLIP_X_ORIGIN: gdk_gc_values_mask
    val GDK_GC_CLIP_Y_ORIGIN: gdk_gc_values_mask
    val GDK_GC_EXPOSURES: gdk_gc_values_mask
    val GDK_GC_LINE_WIDTH: gdk_gc_values_mask
    val GDK_GC_LINE_STYLE: gdk_gc_values_mask
    val GDK_GC_CAP_STYLE: gdk_gc_values_mask
    val GDK_GC_JOIN_STYLE: gdk_gc_values_mask

    eqtype gdk_selection
    val GDK_SELECTION_PRIMARY: gdk_selection
    val GDK_SELECTION_SECONDARY: gdk_selection

    eqtype gdk_property_state
    val GDK_PROPERTY_NEW_VALUE: gdk_property_state
    val GDK_PROPERTY_DELETE: gdk_property_state

    eqtype gdk_prop_mode
    val GDK_PROP_MODE_REPLACE: gdk_prop_mode
    val GDK_PROP_MODE_PREPEND: gdk_prop_mode
    val GDK_PROP_MODE_APPEND: gdk_prop_mode

    eqtype gdk_input_source
    val GDK_SOURCE_MOUSE: gdk_input_source
    val GDK_SOURCE_PEN: gdk_input_source
    val GDK_SOURCE_ERASER: gdk_input_source
    val GDK_SOURCE_CURSOR: gdk_input_source

    eqtype gdk_input_mode
    val GDK_MODE_DISABLED: gdk_input_mode
    val GDK_MODE_SCREEN: gdk_input_mode
    val GDK_MODE_WINDOW: gdk_input_mode

    eqtype gdk_axis_use
    val GDK_AXIS_IGNORE: gdk_axis_use
    val GDK_AXIS_X: gdk_axis_use
    val GDK_AXIS_Y: gdk_axis_use
    val GDK_AXIS_PRESSURE: gdk_axis_use
    val GDK_AXIS_XTILT: gdk_axis_use
    val GDK_AXIS_YTILT: gdk_axis_use
    val GDK_AXIS_LAST: gdk_axis_use

    eqtype gdk_target
    val GDK_TARGET_BITMAP: gdk_target
    val GDK_TARGET_COLORMAP: gdk_target
    val GDK_TARGET_DRAWABLE: gdk_target
    val GDK_TARGET_PIXMAP: gdk_target
    val GDK_TARGET_STRING: gdk_target

    eqtype gdk_selection_type
    val GDK_SELECTION_TYPE_ATOM: gdk_selection_type
    val GDK_SELECTION_TYPE_BITMAP: gdk_selection_type
    val GDK_SELECTION_TYPE_COLORMAP: gdk_selection_type
    val GDK_SELECTION_TYPE_DRAWABLE: gdk_selection_type
    val GDK_SELECTION_TYPE_INTEGER: gdk_selection_type
    val GDK_SELECTION_TYPE_PIXMAP: gdk_selection_type
    val GDK_SELECTION_TYPE_WINDOW: gdk_selection_type
    val GDK_SELECTION_TYPE_STRING: gdk_selection_type

    eqtype gdk_extension_mode
    val GDK_EXTENSION_EVENTS_NONE: gdk_extension_mode
    val GDK_EXTENSION_EVENTS_ALL: gdk_extension_mode
    val GDK_EXTENSION_EVENTS_CURSOR: gdk_extension_mode

    eqtype gdk_im_style
    val GDK_IM_PREEDIT_AREA: gdk_im_style
    val GDK_IM_PREEDIT_CALLBACKS: gdk_im_style
    val GDK_IM_PREEDIT_POSITION: gdk_im_style
    val GDK_IM_PREEDIT_NOTHING: gdk_im_style
    val GDK_IM_PREEDIT_NONE: gdk_im_style
    val GDK_IM_PREEDIT_MASK: gdk_im_style
    val GDK_IM_STATUS_AREA: gdk_im_style
    val GDK_IM_STATUS_CALLBACKS: gdk_im_style
    val GDK_IM_STATUS_NOTHING: gdk_im_style
    val GDK_IM_STATUS_NONE: gdk_im_style
    val GDK_IM_STATUS_MASK: gdk_im_style

    eqtype gdk_ic_attributes_type
    val GDK_IC_STYLE: gdk_ic_attributes_type
    val GDK_IC_CLIENT_WINDOW: gdk_ic_attributes_type
    val GDK_IC_FOCUS_WINDOW: gdk_ic_attributes_type
    val GDK_IC_FILTER_EVENTS: gdk_ic_attributes_type
    val GDK_IC_SPOT_LOCATION: gdk_ic_attributes_type
    val GDK_IC_LINE_SPACING: gdk_ic_attributes_type
    val GDK_IC_CURSOR: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_FONTSET: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_AREA: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_AREA_NEEDED: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_FOREGROUND: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_BACKGROUND: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_PIXMAP: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_COLORMAP: gdk_ic_attributes_type
    val GDK_IC_STATUS_FONTSET: gdk_ic_attributes_type
    val GDK_IC_STATUS_AREA: gdk_ic_attributes_type
    val GDK_IC_STATUS_AREA_NEEDED: gdk_ic_attributes_type
    val GDK_IC_STATUS_FOREGROUND: gdk_ic_attributes_type
    val GDK_IC_STATUS_BACKGROUND: gdk_ic_attributes_type
    val GDK_IC_STATUS_PIXMAP: gdk_ic_attributes_type
    val GDK_IC_STATUS_COLORMAP: gdk_ic_attributes_type
    val GDK_IC_ALL_REQ: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_AREA_REQ: gdk_ic_attributes_type
    val GDK_IC_PREEDIT_POSITION_REQ: gdk_ic_attributes_type

    eqtype gdk_wm_decoration
    val GDK_DECOR_ALL: gdk_wm_decoration
    val GDK_DECOR_BORDER: gdk_wm_decoration
    val GDK_DECOR_RESIZEH: gdk_wm_decoration
    val GDK_DECOR_TITLE: gdk_wm_decoration
    val GDK_DECOR_MENU: gdk_wm_decoration
    val GDK_DECOR_MINIMIZE: gdk_wm_decoration
    val GDK_DECOR_MAXIMIZE: gdk_wm_decoration

    eqtype gdk_wm_function
    val GDK_FUNC_ALL: gdk_wm_function
    val GDK_FUNC_RESIZE: gdk_wm_function
    val GDK_FUNC_MOVE: gdk_wm_function
    val GDK_FUNC_MINIMIZE: gdk_wm_function
    val GDK_FUNC_MAXIMIZE: gdk_wm_function
    val GDK_FUNC_CLOSE: gdk_wm_function

    eqtype gdk_color_context_mode
    val GDK_CC_MODE_UNDEFINED: gdk_color_context_mode
    val GDK_CC_MODE_BW: gdk_color_context_mode
    val GDK_CC_MODE_STD_CMAP: gdk_color_context_mode
    val GDK_CC_MODE_TRUE: gdk_color_context_mode
    val GDK_CC_MODE_MY_GRAY: gdk_color_context_mode
    val GDK_CC_MODE_PALETTE: gdk_color_context_mode

    eqtype gdk_overlap_type
    val GDK_OVERLAP_RECTANGLE_IN: gdk_overlap_type
    val GDK_OVERLAP_RECTANGLE_OUT: gdk_overlap_type
    val GDK_OVERLAP_RECTANGLE_PART: gdk_overlap_type

    eqtype gdk_drag_action
    val GDK_ACTION_DEFAULT: gdk_drag_action
    val GDK_ACTION_COPY: gdk_drag_action
    val GDK_ACTION_MOVE: gdk_drag_action
    val GDK_ACTION_LINK: gdk_drag_action
    val GDK_ACTION_PRIVATE: gdk_drag_action
    val GDK_ACTION_ASK: gdk_drag_action

    eqtype gdk_drag_protocol
    val GDK_DRAG_PROTO_MOTIF: gdk_drag_protocol
    val GDK_DRAG_PROTO_XDND: gdk_drag_protocol
    val GDK_DRAG_PROTO_ROOTWIN: gdk_drag_protocol

    eqtype gdk_rgb_dither
    val GDK_RGB_DITHER_NONE: gdk_rgb_dither
    val GDK_RGB_DITHER_NORMAL: gdk_rgb_dither
    val GDK_RGB_DITHER_MAX: gdk_rgb_dither

    type gdk_drag_context

    type gdk_colormap

    type gdk_font

    type gdk_window

    type gdk_pixmap

    type gdk_bitmap

    type gdk_drawable

    type gdk_event

    type gdk_color

    type gdk_gc

    val gdk_beep: unit -> unit
    val gdk_font_load: string -> gdk_font
    val gdk_fontset_load: string -> gdk_font
    val gdk_color_alloc: gdk_colormap -> gdk_color -> bool
    val gdk_color_black: gdk_colormap -> gdk_color -> bool
    val gdk_color_change: gdk_colormap -> gdk_color -> bool
    val gdk_color_parse: string -> bool * gdk_color
    val gdk_color_white: gdk_colormap -> gdk_color -> bool
    val gdk_colormap_alloc_color: gdk_colormap -> gdk_color -> bool -> bool -> bool
    val gdk_colormap_change: gdk_colormap -> int -> unit
    val gdk_colormap_free_colors: gdk_colormap -> gdk_color -> int -> unit
    val gdk_colormap_get_system: unit -> gdk_colormap
    val gdk_colormap_get_system_size: unit -> int
    val gdk_gc_set_foreground: gdk_gc -> gdk_color -> unit
    val gdk_gc_set_background: gdk_gc -> gdk_color -> unit
    val gdk_gc_set_font: gdk_gc -> gdk_font -> unit
    val gdk_window_clear_area: gdk_drawable -> int -> int -> int -> int -> unit
    val gdk_draw_point: gdk_drawable -> gdk_gc -> int -> int -> unit
    val gdk_draw_line: gdk_drawable -> gdk_gc -> int -> int -> int -> int -> unit
    val gdk_draw_rectangle: gdk_drawable -> gdk_gc -> bool -> int -> int -> int -> int -> unit
    val gdk_draw_arc: gdk_drawable -> gdk_gc -> bool -> int -> int -> int -> int -> int -> int -> unit
    val gdk_draw_string: gdk_drawable -> gdk_font -> gdk_gc -> int -> int -> string -> unit
    val gdk_draw_text: gdk_drawable -> gdk_font -> gdk_gc -> int -> int -> string -> int -> unit
    val gdk_draw_pixmap: gdk_drawable -> gdk_gc -> gdk_drawable -> int -> int -> int -> int -> int -> int -> unit
    val gdk_screen_width: unit -> int
    val gdk_screen_height: unit -> int
    val gdk_screen_width_mm: unit -> int
    val gdk_screen_height_mm: unit -> int
    val gdk_drag_status: gdk_drag_context -> gdk_drag_action list -> word -> unit
    val check_version: word -> word -> word -> string
    val exit: int -> unit
    eqtype gtk_accel_flags
    val ACCEL_VISIBLE: gtk_accel_flags
    val ACCEL_SIGNAL_VISIBLE: gtk_accel_flags
    val ACCEL_LOCKED: gtk_accel_flags
    val ACCEL_MASK: gtk_accel_flags

    eqtype gtk_calendar_display_options
    val CALENDAR_SHOW_HEADING: gtk_calendar_display_options
    val CALENDAR_SHOW_DAY_NAMES: gtk_calendar_display_options
    val CALENDAR_NO_MONTH_CHANGE: gtk_calendar_display_options
    val CALENDAR_SHOW_WEEK_NUMBERS: gtk_calendar_display_options
    val CALENDAR_WEEK_START_MONDAY: gtk_calendar_display_options

    eqtype gtk_cell_type
    val CELL_EMPTY: gtk_cell_type
    val CELL_TEXT: gtk_cell_type
    val CELL_PIXMAP: gtk_cell_type
    val CELL_PIXTEXT: gtk_cell_type
    val CELL_WIDGET: gtk_cell_type

    eqtype gtk_clist_drag_pos
    val CLIST_DRAG_NONE: gtk_clist_drag_pos
    val CLIST_DRAG_BEFORE: gtk_clist_drag_pos
    val CLIST_DRAG_INTO: gtk_clist_drag_pos
    val CLIST_DRAG_AFTER: gtk_clist_drag_pos

    eqtype gtk_button_action
    val BUTTON_IGNORED: gtk_button_action
    val BUTTON_SELECTS: gtk_button_action
    val BUTTON_DRAGS: gtk_button_action
    val BUTTON_EXPANDS: gtk_button_action

    eqtype gtk_ctree_pos
    val CTREE_POS_BEFORE: gtk_ctree_pos
    val CTREE_POS_AS_CHILD: gtk_ctree_pos
    val CTREE_POS_AFTER: gtk_ctree_pos

    eqtype gtk_ctree_line_style
    val CTREE_LINES_NONE: gtk_ctree_line_style
    val CTREE_LINES_SOLID: gtk_ctree_line_style
    val CTREE_LINES_DOTTED: gtk_ctree_line_style
    val CTREE_LINES_TABBED: gtk_ctree_line_style

    eqtype gtk_ctree_expander_style
    val CTREE_EXPANDER_NONE: gtk_ctree_expander_style
    val CTREE_EXPANDER_SQUARE: gtk_ctree_expander_style
    val CTREE_EXPANDER_TRIANGLE: gtk_ctree_expander_style
    val CTREE_EXPANDER_CIRCULAR: gtk_ctree_expander_style

    eqtype gtk_ctree_expansion_type
    val CTREE_EXPANSION_EXPAND: gtk_ctree_expansion_type
    val CTREE_EXPANSION_EXPAND_RECURSIVE: gtk_ctree_expansion_type
    val CTREE_EXPANSION_COLLAPSE: gtk_ctree_expansion_type
    val CTREE_EXPANSION_COLLAPSE_RECURSIVE: gtk_ctree_expansion_type
    val CTREE_EXPANSION_TOGGLE: gtk_ctree_expansion_type
    val CTREE_EXPANSION_TOGGLE_RECURSIVE: gtk_ctree_expansion_type

    eqtype gtk_debug_flag
    val DEBUG_OBJECTS: gtk_debug_flag
    val DEBUG_MISC: gtk_debug_flag
    val DEBUG_SIGNALS: gtk_debug_flag
    val DEBUG_DND: gtk_debug_flag

    eqtype gtk_dest_defaults
    val DEST_DEFAULT_MOTION: gtk_dest_defaults
    val DEST_DEFAULT_HIGHLIGHT: gtk_dest_defaults
    val DEST_DEFAULT_DROP: gtk_dest_defaults
    val DEST_DEFAULT_ALL: gtk_dest_defaults

    eqtype gtk_target_flags
    val TARGET_SAME_APP: gtk_target_flags
    val TARGET_SAME_WIDGET: gtk_target_flags

    eqtype gtk_arrow_type
    val ARROW_UP: gtk_arrow_type
    val ARROW_DOWN: gtk_arrow_type
    val ARROW_LEFT: gtk_arrow_type
    val ARROW_RIGHT: gtk_arrow_type

    eqtype gtk_attach_options
    val EXPAND: gtk_attach_options
    val SHRINK: gtk_attach_options
    val FILL: gtk_attach_options

    eqtype gtk_button_box_style
    val BUTTONBOX_DEFAULT_STYLE: gtk_button_box_style
    val BUTTONBOX_SPREAD: gtk_button_box_style
    val BUTTONBOX_EDGE: gtk_button_box_style
    val BUTTONBOX_START: gtk_button_box_style
    val BUTTONBOX_END: gtk_button_box_style

    eqtype gtk_curve_type
    val CURVE_TYPE_LINEAR: gtk_curve_type
    val CURVE_TYPE_SPLINE: gtk_curve_type
    val CURVE_TYPE_FREE: gtk_curve_type

    eqtype gtk_direction_type
    val DIR_TAB_FORWARD: gtk_direction_type
    val DIR_TAB_BACKWARD: gtk_direction_type
    val DIR_UP: gtk_direction_type
    val DIR_DOWN: gtk_direction_type
    val DIR_LEFT: gtk_direction_type
    val DIR_RIGHT: gtk_direction_type

    eqtype gtk_justification
    val JUSTIFY_LEFT: gtk_justification
    val JUSTIFY_RIGHT: gtk_justification
    val JUSTIFY_CENTER: gtk_justification
    val JUSTIFY_FILL: gtk_justification

    eqtype gtk_match_type
    val MATCH_ALL: gtk_match_type
    val MATCH_ALL_TAIL: gtk_match_type
    val MATCH_HEAD: gtk_match_type
    val MATCH_TAIL: gtk_match_type
    val MATCH_EXACT: gtk_match_type
    val MATCH_LAST: gtk_match_type

    eqtype gtk_menu_direction_type
    val MENU_DIR_PARENT: gtk_menu_direction_type
    val MENU_DIR_CHILD: gtk_menu_direction_type
    val MENU_DIR_NEXT: gtk_menu_direction_type
    val MENU_DIR_PREV: gtk_menu_direction_type

    eqtype gtk_menu_factory_type
    val MENU_FACTORY_MENU: gtk_menu_factory_type
    val MENU_FACTORY_MENU_BAR: gtk_menu_factory_type
    val MENU_FACTORY_OPTION_MENU: gtk_menu_factory_type

    eqtype gtk_metric_type
    val PIXELS: gtk_metric_type
    val INCHES: gtk_metric_type
    val CENTIMETERS: gtk_metric_type

    eqtype gtk_orientation
    val ORIENTATION_HORIZONTAL: gtk_orientation
    val ORIENTATION_VERTICAL: gtk_orientation

    eqtype gtk_corner_type
    val CORNER_TOP_LEFT: gtk_corner_type
    val CORNER_BOTTOM_LEFT: gtk_corner_type
    val CORNER_TOP_RIGHT: gtk_corner_type
    val CORNER_BOTTOM_RIGHT: gtk_corner_type

    eqtype gtk_pack_type
    val PACK_START: gtk_pack_type
    val PACK_END: gtk_pack_type

    eqtype gtk_path_priority_type
    val PATH_PRIO_LOWEST: gtk_path_priority_type
    val PATH_PRIO_GTK: gtk_path_priority_type
    val PATH_PRIO_APPLICATION: gtk_path_priority_type
    val PATH_PRIO_RC: gtk_path_priority_type
    val PATH_PRIO_HIGHEST: gtk_path_priority_type
    val PATH_PRIO_MASK: gtk_path_priority_type

    eqtype gtk_path_type
    val PATH_WIDGET: gtk_path_type
    val PATH_WIDGET_CLASS: gtk_path_type
    val PATH_CLASS: gtk_path_type

    eqtype gtk_policy_type
    val POLICY_ALWAYS: gtk_policy_type
    val POLICY_AUTOMATIC: gtk_policy_type
    val POLICY_NEVER: gtk_policy_type

    eqtype gtk_position_type
    val POS_LEFT: gtk_position_type
    val POS_RIGHT: gtk_position_type
    val POS_TOP: gtk_position_type
    val POS_BOTTOM: gtk_position_type

    eqtype gtk_preview_type
    val PREVIEW_COLOR: gtk_preview_type
    val PREVIEW_GRAYSCALE: gtk_preview_type

    eqtype gtk_relief_style
    val RELIEF_NORMAL: gtk_relief_style
    val RELIEF_HALF: gtk_relief_style
    val RELIEF_NONE: gtk_relief_style

    eqtype gtk_resize_mode
    val RESIZE_PARENT: gtk_resize_mode
    val RESIZE_QUEUE: gtk_resize_mode
    val RESIZE_IMMEDIATE: gtk_resize_mode

    eqtype gtk_signal_run_type
    val RUN_FIRST: gtk_signal_run_type
    val RUN_LAST: gtk_signal_run_type
    val RUN_BOTH: gtk_signal_run_type
    val RUN_NO_RECURSE: gtk_signal_run_type
    val RUN_ACTION: gtk_signal_run_type
    val RUN_NO_HOOKS: gtk_signal_run_type

    eqtype gtk_scroll_type
    val SCROLL_NONE: gtk_scroll_type
    val SCROLL_STEP_BACKWARD: gtk_scroll_type
    val SCROLL_STEP_FORWARD: gtk_scroll_type
    val SCROLL_PAGE_BACKWARD: gtk_scroll_type
    val SCROLL_PAGE_FORWARD: gtk_scroll_type
    val SCROLL_JUMP: gtk_scroll_type

    eqtype gtk_selection_mode
    val SELECTION_SINGLE: gtk_selection_mode
    val SELECTION_BROWSE: gtk_selection_mode
    val SELECTION_MULTIPLE: gtk_selection_mode
    val SELECTION_EXTENDED: gtk_selection_mode

    eqtype gtk_shadow_type
    val SHADOW_NONE: gtk_shadow_type
    val SHADOW_IN: gtk_shadow_type
    val SHADOW_OUT: gtk_shadow_type
    val SHADOW_ETCHED_IN: gtk_shadow_type
    val SHADOW_ETCHED_OUT: gtk_shadow_type

    eqtype gtk_state_type
    val STATE_NORMAL: gtk_state_type
    val STATE_ACTIVE: gtk_state_type
    val STATE_PRELIGHT: gtk_state_type
    val STATE_SELECTED: gtk_state_type
    val STATE_INSENSITIVE: gtk_state_type

    eqtype gtk_submenu_direction
    val DIRECTION_LEFT: gtk_submenu_direction
    val DIRECTION_RIGHT: gtk_submenu_direction

    eqtype gtk_submenu_placement
    val TOP_BOTTOM: gtk_submenu_placement
    val LEFT_RIGHT: gtk_submenu_placement

    eqtype gtk_toolbar_style
    val TOOLBAR_ICONS: gtk_toolbar_style
    val TOOLBAR_TEXT: gtk_toolbar_style
    val TOOLBAR_BOTH: gtk_toolbar_style

    eqtype gtk_trough_type
    val TROUGH_NONE: gtk_trough_type
    val TROUGH_START: gtk_trough_type
    val TROUGH_END: gtk_trough_type
    val TROUGH_JUMP: gtk_trough_type

    eqtype gtk_update_type
    val UPDATE_CONTINUOUS: gtk_update_type
    val UPDATE_DISCONTINUOUS: gtk_update_type
    val UPDATE_DELAYED: gtk_update_type

    eqtype gtk_visibility
    val VISIBILITY_NONE: gtk_visibility
    val VISIBILITY_PARTIAL: gtk_visibility
    val VISIBILITY_FULL: gtk_visibility

    eqtype gtk_window_position
    val WIN_POS_NONE: gtk_window_position
    val WIN_POS_CENTER: gtk_window_position
    val WIN_POS_MOUSE: gtk_window_position

    eqtype gtk_window_type
    val WINDOW_TOPLEVEL: gtk_window_type
    val WINDOW_DIALOG: gtk_window_type
    val WINDOW_POPUP: gtk_window_type

    eqtype gtk_sort_type
    val SORT_ASCENDING: gtk_sort_type
    val SORT_DESCENDING: gtk_sort_type

    eqtype gtk_font_metric_type
    val FONT_METRIC_PIXELS: gtk_font_metric_type
    val FONT_METRIC_POINTS: gtk_font_metric_type

    eqtype gtk_font_type
    val FONT_BITMAP: gtk_font_type
    val FONT_SCALABLE: gtk_font_type
    val FONT_SCALABLE_BITMAP: gtk_font_type
    val FONT_ALL: gtk_font_type

    eqtype gtk_font_filter_type
    val FONT_FILTER_BASE: gtk_font_filter_type
    val FONT_FILTER_USER: gtk_font_filter_type

    eqtype gtk_object_flags
    val DESTROYED: gtk_object_flags
    val FLOATING: gtk_object_flags
    val CONNECTED: gtk_object_flags
    val CONSTRUCTED: gtk_object_flags

    eqtype gtk_arg_flags
    val ARG_READABLE: gtk_arg_flags
    val ARG_WRITABLE: gtk_arg_flags
    val ARG_CONSTRUCT: gtk_arg_flags
    val ARG_CONSTRUCT_ONLY: gtk_arg_flags
    val ARG_CHILD_ARG: gtk_arg_flags
    val ARG_MASK: gtk_arg_flags
    val ARG_READWRITE: gtk_arg_flags

    eqtype gtk_packer_options
    val PACK_EXPAND: gtk_packer_options
    val FILL_X: gtk_packer_options
    val FILL_Y: gtk_packer_options

    eqtype gtk_side_type
    val SIDE_TOP: gtk_side_type
    val SIDE_BOTTOM: gtk_side_type
    val SIDE_LEFT: gtk_side_type
    val SIDE_RIGHT: gtk_side_type

    eqtype gtk_anchor_type
    val ANCHOR_CENTER: gtk_anchor_type
    val ANCHOR_NORTH: gtk_anchor_type
    val ANCHOR_NORTH_WEST: gtk_anchor_type
    val ANCHOR_NORTH_EAST: gtk_anchor_type
    val ANCHOR_SOUTH: gtk_anchor_type
    val ANCHOR_SOUTH_WEST: gtk_anchor_type
    val ANCHOR_SOUTH_EAST: gtk_anchor_type
    val ANCHOR_WEST: gtk_anchor_type
    val ANCHOR_EAST: gtk_anchor_type
    val ANCHOR_N: gtk_anchor_type
    val ANCHOR_NW: gtk_anchor_type
    val ANCHOR_NE: gtk_anchor_type
    val ANCHOR_S: gtk_anchor_type
    val ANCHOR_SW: gtk_anchor_type
    val ANCHOR_SE: gtk_anchor_type
    val ANCHOR_W: gtk_anchor_type
    val ANCHOR_E: gtk_anchor_type

    eqtype gtk_progress_bar_style
    val PROGRESS_CONTINUOUS: gtk_progress_bar_style
    val PROGRESS_DISCRETE: gtk_progress_bar_style

    eqtype gtk_progress_bar_orientation
    val PROGRESS_LEFT_TO_RIGHT: gtk_progress_bar_orientation
    val PROGRESS_RIGHT_TO_LEFT: gtk_progress_bar_orientation
    val PROGRESS_BOTTOM_TO_TOP: gtk_progress_bar_orientation
    val PROGRESS_TOP_TO_BOTTOM: gtk_progress_bar_orientation

    eqtype gtk_rc_flags
    val RC_FG: gtk_rc_flags
    val RC_BG: gtk_rc_flags
    val RC_TEXT: gtk_rc_flags
    val RC_BASE: gtk_rc_flags

    eqtype gtk_rc_token_type
    val RC_TOKEN_INVALID: gtk_rc_token_type
    val RC_TOKEN_INCLUDE: gtk_rc_token_type
    val RC_TOKEN_NORMAL: gtk_rc_token_type
    val RC_TOKEN_ACTIVE: gtk_rc_token_type
    val RC_TOKEN_PRELIGHT: gtk_rc_token_type
    val RC_TOKEN_SELECTED: gtk_rc_token_type
    val RC_TOKEN_INSENSITIVE: gtk_rc_token_type
    val RC_TOKEN_FG: gtk_rc_token_type
    val RC_TOKEN_BG: gtk_rc_token_type
    val RC_TOKEN_BASE: gtk_rc_token_type
    val RC_TOKEN_TEXT: gtk_rc_token_type
    val RC_TOKEN_FONT: gtk_rc_token_type
    val RC_TOKEN_FONTSET: gtk_rc_token_type
    val RC_TOKEN_BG_PIXMAP: gtk_rc_token_type
    val RC_TOKEN_PIXMAP_PATH: gtk_rc_token_type
    val RC_TOKEN_STYLE: gtk_rc_token_type
    val RC_TOKEN_BINDING: gtk_rc_token_type
    val RC_TOKEN_BIND: gtk_rc_token_type
    val RC_TOKEN_WIDGET: gtk_rc_token_type
    val RC_TOKEN_WIDGET_CLASS: gtk_rc_token_type
    val RC_TOKEN_CLASS: gtk_rc_token_type
    val RC_TOKEN_LOWEST: gtk_rc_token_type
    val RC_TOKEN_GTK: gtk_rc_token_type
    val RC_TOKEN_APPLICATION: gtk_rc_token_type
    val RC_TOKEN_RC: gtk_rc_token_type
    val RC_TOKEN_HIGHEST: gtk_rc_token_type
    val RC_TOKEN_ENGINE: gtk_rc_token_type
    val RC_TOKEN_MODULE_PATH: gtk_rc_token_type
    val RC_TOKEN_LAST: gtk_rc_token_type

    eqtype gtk_spin_button_update_policy
    val UPDATE_ALWAYS: gtk_spin_button_update_policy
    val UPDATE_IF_VALID: gtk_spin_button_update_policy

    eqtype gtk_spin_type
    val SPIN_STEP_FORWARD: gtk_spin_type
    val SPIN_STEP_BACKWARD: gtk_spin_type
    val SPIN_PAGE_FORWARD: gtk_spin_type
    val SPIN_PAGE_BACKWARD: gtk_spin_type
    val SPIN_HOME: gtk_spin_type
    val SPIN_END: gtk_spin_type
    val SPIN_USER_DEFINED: gtk_spin_type

    eqtype gtk_toolbar_child_type
    val TOOLBAR_CHILD_SPACE: gtk_toolbar_child_type
    val TOOLBAR_CHILD_BUTTON: gtk_toolbar_child_type
    val TOOLBAR_CHILD_TOGGLEBUTTON: gtk_toolbar_child_type
    val TOOLBAR_CHILD_RADIOBUTTON: gtk_toolbar_child_type
    val TOOLBAR_CHILD_WIDGET: gtk_toolbar_child_type

    eqtype gtk_toolbar_space_style
    val TOOLBAR_SPACE_EMPTY: gtk_toolbar_space_style
    val TOOLBAR_SPACE_LINE: gtk_toolbar_space_style

    eqtype gtk_tree_view_mode
    val TREE_VIEW_LINE: gtk_tree_view_mode
    val TREE_VIEW_ITEM: gtk_tree_view_mode

    eqtype gtk_fundamental_type
    val TYPE_INVALID: gtk_fundamental_type
    val TYPE_NONE: gtk_fundamental_type
    val TYPE_CHAR: gtk_fundamental_type
    val TYPE_UCHAR: gtk_fundamental_type
    val TYPE_BOOL: gtk_fundamental_type
    val TYPE_INT: gtk_fundamental_type
    val TYPE_UINT: gtk_fundamental_type
    val TYPE_LONG: gtk_fundamental_type
    val TYPE_ULONG: gtk_fundamental_type
    val TYPE_FLOAT: gtk_fundamental_type
    val TYPE_DOUBLE: gtk_fundamental_type
    val TYPE_STRING: gtk_fundamental_type
    val TYPE_ENUM: gtk_fundamental_type
    val TYPE_FLAGS: gtk_fundamental_type
    val TYPE_BOXED: gtk_fundamental_type
    val TYPE_POINTER: gtk_fundamental_type
    val TYPE_SIGNAL: gtk_fundamental_type
    val TYPE_ARGS: gtk_fundamental_type
    val TYPE_CALLBACK: gtk_fundamental_type
    val TYPE_C_CALLBACK: gtk_fundamental_type
    val TYPE_FOREIGN: gtk_fundamental_type
    val TYPE_OBJECT: gtk_fundamental_type

    eqtype gtk_widget_flags
    val TOPLEVEL: gtk_widget_flags
    val NO_WINDOW: gtk_widget_flags
    val REALIZED: gtk_widget_flags
    val MAPPED: gtk_widget_flags
    val VISIBLE: gtk_widget_flags
    val SENSITIVE: gtk_widget_flags
    val PARENT_SENSITIVE: gtk_widget_flags
    val CAN_FOCUS: gtk_widget_flags
    val HAS_FOCUS: gtk_widget_flags
    val CAN_DEFAULT: gtk_widget_flags
    val HAS_DEFAULT: gtk_widget_flags
    val HAS_GRAB: gtk_widget_flags
    val RC_STYLE: gtk_widget_flags
    val COMPOSITE_CHILD: gtk_widget_flags
    val NO_REPARENT: gtk_widget_flags
    val APP_PAINTABLE: gtk_widget_flags

    type gtk_accel_group

    type gtk_style

    type gtk_selection_data

    val draw_arrow: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> gtk_arrow_type -> bool -> int -> int -> int -> int -> unit
    val draw_box: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_box_gap: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> int -> int -> unit
    val draw_check: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_cross: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_diamond: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_extension: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> unit
    val draw_flat_box: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_focus: gtk_style -> gdk_window -> int -> int -> int -> int -> unit
    val draw_handle: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_orientation -> unit
    val draw_hline: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> int -> unit
    val draw_option: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_oval: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_ramp: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> gtk_arrow_type -> int -> int -> int -> int -> unit
    val draw_shadow: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_shadow_gap: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> int -> int -> unit
    val draw_slider: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_orientation -> unit
    val draw_string: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> string -> unit
    val draw_tab: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
    val draw_vline: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> int -> unit
    val grab_add: 'a GtkWidget -> unit
    val grab_get_current: unit -> base GtkWidget
    val grab_remove: 'a GtkWidget -> unit
    val drag_finish: gdk_drag_context -> bool -> bool -> word -> unit
    val drag_get_source_widget: gdk_drag_context -> base GtkWidget
    val drag_highlight: 'a GtkWidget -> unit
    val drag_unhighlight: 'a GtkWidget -> unit
    val drag_dest_set_proxy: 'a GtkWidget -> gdk_window -> gdk_drag_protocol -> bool -> unit
    val drag_dest_unset: 'a GtkWidget -> unit
    val drag_source_unset: 'a GtkWidget -> unit
    val drag_source_set_icon: 'a GtkWidget -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> unit
    val drag_set_icon_widget: gdk_drag_context -> 'a GtkWidget -> int -> int -> unit
    val drag_set_icon_pixmap: gdk_drag_context -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit
    val drag_set_icon_default: gdk_drag_context -> unit
    val drag_set_default_icon: gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit
    val selection_remove_all: 'a GtkWidget -> unit

    (* *** Data *** *)

    type 'a data_t
    type 'a GtkData = 'a data_t GtkObject



    (* *** Adjustment *** *)

    type 'a adjustment_t
    type 'a GtkAdjustment = 'a adjustment_t GtkData

    val adjustment_get_value: 'a GtkAdjustment -> real
    val adjustment_get_lower: 'a GtkAdjustment -> real
    val adjustment_get_upper: 'a GtkAdjustment -> real
    val adjustment_get_step_increment: 'a GtkAdjustment -> real
    val adjustment_get_page_increment: 'a GtkAdjustment -> real
    val adjustment_get_page_size: 'a GtkAdjustment -> real

    val adjustment_new: real -> real -> real -> real -> real -> real -> base GtkObject
    val adjustment_changed: 'a GtkAdjustment -> unit
    val adjustment_value_changed: 'a GtkAdjustment -> unit
    val adjustment_clamp_page: 'a GtkAdjustment -> real -> real -> unit
    val adjustment_set_value: 'a GtkAdjustment -> real -> unit
    val widget_get_window: 'a GtkWidget -> gdk_window
    val widget_get_drawable: 'a GtkWidget -> gdk_drawable
    val widget_get_state: 'a GtkWidget -> gtk_state_type
    val widget_get_allocation: 'a GtkWidget -> int * int * int * int
    val widget_get_style_fg_gc: 'a GtkWidget -> gtk_state_type -> gdk_gc
    val widget_destroy: 'a GtkWidget -> unit
    val widget_unparent: 'a GtkWidget -> unit
    val widget_show: 'a GtkWidget -> unit
    val widget_show_now: 'a GtkWidget -> unit
    val widget_hide: 'a GtkWidget -> unit
    val widget_show_all: 'a GtkWidget -> unit
    val widget_hide_all: 'a GtkWidget -> unit
    val widget_map: 'a GtkWidget -> unit
    val widget_unmap: 'a GtkWidget -> unit
    val widget_realize: 'a GtkWidget -> unit
    val widget_unrealize: 'a GtkWidget -> unit
    val widget_queue_draw: 'a GtkWidget -> unit
    val widget_queue_resize: 'a GtkWidget -> unit
    val widget_draw_focus: 'a GtkWidget -> unit
    val widget_draw_default: 'a GtkWidget -> unit
    val widget_add_accelerator: 'a GtkWidget -> string -> gtk_accel_group -> word -> gdk_modifier_type list -> gtk_accel_flags list -> unit
    val widget_remove_accelerator: 'a GtkWidget -> gtk_accel_group -> word -> gdk_modifier_type list -> unit
    val widget_remove_accelerators: 'a GtkWidget -> string -> bool -> unit
    val widget_accelerator_signal: 'a GtkWidget -> gtk_accel_group -> word -> gdk_modifier_type list -> word
    val widget_lock_accelerators: 'a GtkWidget -> unit
    val widget_unlock_accelerators: 'a GtkWidget -> unit
    val widget_accelerators_locked: 'a GtkWidget -> bool
    val widget_event: 'a GtkWidget -> gdk_event -> bool
    val widget_activate: 'a GtkWidget -> bool
    val widget_set_scroll_adjustments: 'a GtkWidget -> 'b GtkAdjustment -> 'c GtkAdjustment -> bool
    val widget_reparent: 'a GtkWidget -> 'b GtkWidget -> unit
    val widget_popup: 'a GtkWidget -> int -> int -> unit
    val widget_grab_focus: 'a GtkWidget -> unit
    val widget_grab_default: 'a GtkWidget -> unit
    val widget_set_name: 'a GtkWidget -> string -> unit
    val widget_get_name: 'a GtkWidget -> string
    val widget_set_state: 'a GtkWidget -> gtk_state_type -> unit
    val widget_set_sensitive: 'a GtkWidget -> bool -> unit
    val widget_set_app_paintable: 'a GtkWidget -> bool -> unit
    val widget_set_parent: 'a GtkWidget -> 'b GtkWidget -> unit
    val widget_set_parent_window: 'a GtkWidget -> gdk_window -> unit
    val widget_get_parent_window: 'a GtkWidget -> gdk_window
    val widget_set_uposition: 'a GtkWidget -> int -> int -> unit
    val widget_set_usize: 'a GtkWidget -> int -> int -> unit
    val widget_set_events: 'a GtkWidget -> gdk_event_mask list -> unit
    val widget_add_events: 'a GtkWidget -> gdk_event_mask list -> unit
    val widget_set_extension_events: 'a GtkWidget -> gdk_event_mask list -> unit
    val widget_get_extension_events: 'a GtkWidget -> gdk_event_mask list
    val widget_get_toplevel: 'a GtkWidget -> base GtkWidget
    val widget_get_ancestor: 'a GtkWidget -> word -> base GtkWidget
    val widget_get_colormap: 'a GtkWidget -> gdk_colormap
    val widget_get_events: 'a GtkWidget -> gdk_event_mask list
    val widget_is_ancestor: 'a GtkWidget -> 'b GtkWidget -> bool
    val widget_hide_on_delete: 'a GtkWidget -> int
    val widget_set_style: 'a GtkWidget -> gtk_style -> unit
    val widget_set_rc_style: 'a GtkWidget -> unit
    val widget_ensure_style: 'a GtkWidget -> unit
    val widget_get_style: 'a GtkWidget -> gtk_style
    val widget_restore_default_style: 'a GtkWidget -> unit
    val widget_set_composite_name: 'a GtkWidget -> string -> unit
    val widget_get_composite_name: 'a GtkWidget -> string
    val widget_reset_rc_styles: 'a GtkWidget -> unit
    val widget_push_style: gtk_style -> unit
    val widget_push_colormap: gdk_colormap -> unit
    val widget_pop_style: unit -> unit
    val widget_pop_colormap: unit -> unit
    val widget_set_default_style: gtk_style -> unit
    val widget_set_default_colormap: gdk_colormap -> unit
    val widget_get_default_style: unit -> gtk_style
    val widget_get_default_colormap: unit -> gdk_colormap
    val widget_shape_combine_mask: 'a GtkWidget -> gdk_bitmap -> int -> int -> unit

    (* *** Tooltips *** *)

    type 'a tooltips_t
    type 'a GtkTooltips = 'a tooltips_t GtkData


    val tooltips_new: unit -> base GtkTooltips
    val tooltips_enable: 'a GtkTooltips -> unit
    val tooltips_disable: 'a GtkTooltips -> unit
    val tooltips_set_delay: 'a GtkTooltips -> int -> unit
    val tooltips_set_tip: 'a GtkTooltips -> 'b GtkWidget -> string option -> string option -> unit
    val tooltips_set_tip': 'a GtkTooltips -> 'b GtkWidget -> unit
    val tooltips_set_colors: 'a GtkTooltips -> gdk_color -> gdk_color -> unit
    val tooltips_force_window: 'a GtkTooltips -> unit

    (* *** Container *** *)

    type 'a container_t
    type 'a GtkContainer = 'a container_t GtkWidget


    val container_set_border_width: 'a GtkContainer -> int -> unit
    val container_add: 'a GtkContainer -> 'b GtkWidget -> unit
    val container_remove: 'a GtkContainer -> 'b GtkWidget -> unit
    val container_set_resize_mode: 'a GtkContainer -> gtk_resize_mode -> unit
    val container_check_resize: 'a GtkContainer -> unit
    val container_child_composite_name: 'a GtkContainer -> 'b GtkWidget -> string
    val container_focus: 'a GtkContainer -> gtk_direction_type -> int
    val container_set_focus_child: 'a GtkContainer -> 'b GtkWidget option -> unit
    val container_set_focus_child': 'a GtkContainer -> unit
    val container_set_focus_vadjustment: 'a GtkContainer -> 'b GtkAdjustment -> unit
    val container_set_focus_hadjustment: 'a GtkContainer -> 'b GtkAdjustment -> unit
    val container_register_toplevel: 'a GtkContainer -> unit
    val container_unregister_toplevel: 'a GtkContainer -> unit
    val container_resize_children: 'a GtkContainer -> unit
    val container_child_type: 'a GtkContainer -> word
    val container_clear_resize_widgets: 'a GtkContainer -> unit
    val container_dequeue_resize_handler: 'a GtkContainer -> unit
    val container_queue_resize: 'a GtkContainer -> unit
    val container_set_reallocate_redraws: 'a GtkContainer -> bool -> unit

    (* *** Fixed *** *)

    type 'a fixed_t
    type 'a GtkFixed = 'a fixed_t GtkContainer


    val fixed_new: unit -> base GtkFixed
    val fixed_put: 'a GtkFixed -> 'b GtkWidget -> int -> int -> unit
    val fixed_move: 'a GtkFixed -> 'b GtkWidget -> int -> int -> unit

    (* *** Bin *** *)

    type 'a bin_t
    type 'a GtkBin = 'a bin_t GtkContainer



    (* *** EventBox *** *)

    type 'a eventbox_t
    type 'a GtkEventBox = 'a eventbox_t GtkBin


    val event_box_new: unit -> base GtkEventBox

    (* *** Window *** *)

    type 'a window_t
    type 'a GtkWindow = 'a window_t GtkBin


    val window_new: gtk_window_type -> base GtkWindow
    val window_set_title: 'a GtkWindow -> string -> unit
    val window_set_wmclass: 'a GtkWindow -> string -> string -> unit
    val window_set_policy: 'a GtkWindow -> bool -> bool -> bool -> unit
    val window_add_accel_group: 'a GtkWindow -> gtk_accel_group -> unit
    val window_remove_accel_group: 'a GtkWindow -> gtk_accel_group -> unit
    val window_set_position: 'a GtkWindow -> gtk_window_position -> unit
    val window_activate_focus: 'a GtkWindow -> int
    val window_activate_default: 'a GtkWindow -> int
    val window_set_transient_for: 'a GtkWindow -> 'b GtkWindow -> unit
    val window_set_default_size: 'a GtkWindow -> int -> int -> unit
    val window_set_modal: 'a GtkWindow -> bool -> unit

    (* *** HandleBox *** *)

    type 'a handlebox_t
    type 'a GtkHandleBox = 'a handlebox_t GtkBin


    val handle_box_new: unit -> base GtkHandleBox
    val handle_box_set_shadow_type: 'a GtkHandleBox -> gtk_shadow_type -> unit
    val handle_box_set_handle_position: 'a GtkHandleBox -> gtk_position_type -> unit
    val handle_box_set_snap_edge: 'a GtkHandleBox -> gtk_position_type -> unit

    (* *** Box *** *)

    type 'a box_t
    type 'a GtkBox = 'a box_t GtkContainer


    val box_pack_start: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> unit
    val box_pack_end: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> unit
    val box_pack_start_defaults: 'a GtkBox -> 'b GtkWidget -> unit
    val box_pack_end_defaults: 'a GtkBox -> 'b GtkWidget -> unit
    val box_set_homogeneous: 'a GtkBox -> bool -> unit
    val box_set_spacing: 'a GtkBox -> int -> unit
    val box_reorder_child: 'a GtkBox -> 'b GtkWidget -> word -> unit
    val box_set_child_packing: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> gtk_pack_type -> unit
    val box_query_child_packing: 'a GtkBox -> 'b GtkWidget -> bool * bool * word * gtk_pack_type

    (* *** HBox *** *)

    type 'a hbox_t
    type 'a GtkHBox = 'a hbox_t GtkBox


    val hbox_new: bool -> int -> base GtkHBox

    (* *** VBox *** *)

    type 'a vbox_t
    type 'a GtkVBox = 'a vbox_t GtkBox


    val vbox_new: bool -> int -> base GtkVBox

    (* *** ButtonBox *** *)

    type 'a buttonbox_t
    type 'a GtkButtonBox = 'a buttonbox_t GtkBox


    val button_box_get_child_size: 'a GtkButtonBox -> int * int
    val button_box_get_child_size_default: unit -> int * int
    val button_box_get_child_ipadding: 'a GtkButtonBox -> int * int
    val button_box_get_child_ipadding_default: unit -> int * int
    val button_box_set_child_size_default: int -> int -> unit
    val button_box_set_child_ipadding_default: int -> int -> unit
    val button_box_get_spacing: 'a GtkButtonBox -> int
    val button_box_get_layout: 'a GtkButtonBox -> gtk_button_box_style
    val button_box_set_spacing: 'a GtkButtonBox -> int -> unit
    val button_box_set_layout: 'a GtkButtonBox -> gtk_button_box_style -> unit
    val button_box_set_child_size: 'a GtkButtonBox -> int -> int -> unit
    val button_box_set_child_ipadding: 'a GtkButtonBox -> int -> int -> unit

    (* *** HButtonBox *** *)

    type 'a hbuttonbox_t
    type 'a GtkHButtonBox = 'a hbuttonbox_t GtkButtonBox


    val hbutton_box_new: unit -> base GtkHButtonBox
    val hbutton_box_get_spacing_default: unit -> int
    val hbutton_box_get_layout_default: unit -> gtk_button_box_style
    val hbutton_box_set_spacing_default: int -> unit
    val hbutton_box_set_layout_default: gtk_button_box_style -> unit

    (* *** VButtonBox *** *)

    type 'a vbuttonbox_t
    type 'a GtkVButtonBox = 'a vbuttonbox_t GtkButtonBox


    val vbutton_box_new: unit -> base GtkVButtonBox
    val vbutton_box_get_spacing_default: unit -> int
    val vbutton_box_get_layout_default: unit -> gtk_button_box_style
    val vbutton_box_set_spacing_default: int -> unit
    val vbutton_box_set_layout_default: gtk_button_box_style -> unit

    (* *** Dialog *** *)

    type 'a dialog_t
    type 'a GtkDialog = 'a dialog_t GtkWindow

    val dialog_get_vbox: 'a GtkDialog -> base GtkVBox
    val dialog_get_action_area: 'a GtkDialog -> base GtkHBox

    val dialog_new: unit -> base GtkDialog

    (* *** Table *** *)

    type 'a table_t
    type 'a GtkTable = 'a table_t GtkContainer


    val table_new: int -> int -> bool -> base GtkTable
    val table_set_row_spacing: 'a GtkTable -> int -> int -> unit
    val table_set_col_spacing: 'a GtkTable -> int -> int -> unit
    val table_set_row_spacings: 'a GtkTable -> int -> unit
    val table_set_col_spacings: 'a GtkTable -> int -> unit
    val table_set_homogeneous: 'a GtkTable -> bool -> unit

    (* *** Packer *** *)

    type 'a packer_t
    type 'a GtkPacker = 'a packer_t GtkContainer


    val packer_new: unit -> base GtkPacker
    val packer_add_defaults: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> unit
    val packer_add: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> word -> word -> word -> word -> word -> unit
    val packer_set_child_packing: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> word -> word -> word -> word -> word -> unit
    val packer_reorder_child: 'a GtkPacker -> 'b GtkWidget -> int -> unit
    val packer_set_spacing: 'a GtkPacker -> word -> unit
    val packer_set_default_border_width: 'a GtkPacker -> word -> unit
    val packer_set_default_pad: 'a GtkPacker -> word -> word -> unit
    val packer_set_default_ipad: 'a GtkPacker -> word -> word -> unit

    (* *** Paned *** *)

    type 'a paned_t
    type 'a GtkPaned = 'a paned_t GtkContainer


    val paned_add1: 'a GtkPaned -> 'b GtkWidget -> unit
    val paned_add2: 'a GtkPaned -> 'b GtkWidget -> unit
    val paned_pack1: 'a GtkPaned -> 'b GtkWidget -> bool -> bool -> unit
    val paned_pack2: 'a GtkPaned -> 'b GtkWidget -> bool -> bool -> unit
    val paned_set_position: 'a GtkPaned -> int -> unit
    val paned_set_handle_size: 'a GtkPaned -> word -> unit
    val paned_set_gutter_size: 'a GtkPaned -> word -> unit

    (* *** HPaned *** *)

    type 'a hpaned_t
    type 'a GtkHPaned = 'a hpaned_t GtkPaned


    val hpaned_new: unit -> base GtkHPaned

    (* *** VPaned *** *)

    type 'a vpaned_t
    type 'a GtkVPaned = 'a vpaned_t GtkPaned


    val vpaned_new: unit -> base GtkVPaned

    (* *** Frame *** *)

    type 'a frame_t
    type 'a GtkFrame = 'a frame_t GtkBin


    val frame_new: string option -> base GtkFrame
    val frame_new': unit -> base GtkFrame
    val frame_set_label: 'a GtkFrame -> string -> unit
    val frame_set_label_align: 'a GtkFrame -> real -> real -> unit
    val frame_set_shadow_type: 'a GtkFrame -> gtk_shadow_type -> unit

    (* *** AspectFrame *** *)

    type 'a aspectframe_t
    type 'a GtkAspectFrame = 'a aspectframe_t GtkFrame


    val aspect_frame_new: string -> real -> real -> real -> int -> base GtkAspectFrame
    val aspect_frame_set: 'a GtkAspectFrame -> real -> real -> real -> int -> unit

    (* *** Viewport *** *)

    type 'a viewport_t
    type 'a GtkViewport = 'a viewport_t GtkBin


    val viewport_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkViewport
    val viewport_new': unit -> base GtkViewport
    val viewport_get_hadjustment: 'a GtkViewport -> base GtkAdjustment
    val viewport_get_vadjustment: 'a GtkViewport -> base GtkAdjustment
    val viewport_set_hadjustment: 'a GtkViewport -> 'b GtkAdjustment -> unit
    val viewport_set_vadjustment: 'a GtkViewport -> 'b GtkAdjustment -> unit
    val viewport_set_shadow_type: 'a GtkViewport -> gtk_shadow_type -> unit

    (* *** ScrolledWindow *** *)

    type 'a scrolledwindow_t
    type 'a GtkScrolledWindow = 'a scrolledwindow_t GtkContainer


    val scrolled_window_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkScrolledWindow
    val scrolled_window_new': unit -> base GtkScrolledWindow
    val scrolled_window_set_hadjustment: 'a GtkScrolledWindow -> 'b GtkAdjustment -> unit
    val scrolled_window_set_vadjustment: 'a GtkScrolledWindow -> 'b GtkAdjustment -> unit
    val scrolled_window_get_hadjustment: 'a GtkScrolledWindow -> base GtkAdjustment
    val scrolled_window_get_vadjustment: 'a GtkScrolledWindow -> base GtkAdjustment
    val scrolled_window_set_policy: 'a GtkScrolledWindow -> gtk_policy_type -> gtk_policy_type -> unit
    val scrolled_window_set_placement: 'a GtkScrolledWindow -> gtk_corner_type -> unit
    val scrolled_window_add_with_viewport: 'a GtkScrolledWindow -> 'b GtkWidget -> unit

    (* *** Notebook *** *)

    type 'a notebook_t
    type 'a GtkNotebook = 'a notebook_t GtkContainer

    val notebook_get_tab_pos: 'a GtkNotebook -> gtk_position_type

    val notebook_new: unit -> base GtkNotebook
    val notebook_append_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
    val notebook_append_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> unit
    val notebook_prepend_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
    val notebook_prepend_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> unit
    val notebook_insert_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> int -> unit
    val notebook_insert_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> int -> unit
    val notebook_remove_page: 'a GtkNotebook -> int -> unit
    val notebook_get_current_page: 'a GtkNotebook -> int
    val notebook_get_nth_page: 'a GtkNotebook -> int -> base GtkWidget
    val notebook_page_num: 'a GtkNotebook -> 'b GtkWidget -> int
    val notebook_set_page: 'a GtkNotebook -> int -> unit
    val notebook_next_page: 'a GtkNotebook -> unit
    val notebook_prev_page: 'a GtkNotebook -> unit
    val notebook_reorder_child: 'a GtkNotebook -> 'b GtkWidget -> int -> unit
    val notebook_set_tab_pos: 'a GtkNotebook -> gtk_position_type -> unit
    val notebook_set_show_tabs: 'a GtkNotebook -> bool -> unit
    val notebook_set_show_border: 'a GtkNotebook -> bool -> unit
    val notebook_set_scrollable: 'a GtkNotebook -> int -> unit
    val notebook_set_homogeneous_tabs: 'a GtkNotebook -> bool -> unit
    val notebook_set_tab_border: 'a GtkNotebook -> int -> unit
    val notebook_set_tab_hborder: 'a GtkNotebook -> word -> unit
    val notebook_set_tab_vborder: 'a GtkNotebook -> word -> unit
    val notebook_popup_enable: 'a GtkNotebook -> unit
    val notebook_popup_disable: 'a GtkNotebook -> unit
    val notebook_get_tab_label: 'a GtkNotebook -> 'b GtkWidget -> base GtkWidget
    val notebook_set_tab_label: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
    val notebook_set_tab_label_text: 'a GtkNotebook -> 'b GtkWidget -> string -> unit
    val notebook_get_menu_label: 'a GtkNotebook -> 'b GtkWidget -> base GtkWidget
    val notebook_set_menu_label: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
    val notebook_set_menu_label_text: 'a GtkNotebook -> 'b GtkWidget -> string -> unit
    val notebook_query_tab_label_packing: 'a GtkNotebook -> 'b GtkWidget -> bool * bool * gtk_pack_type
    val notebook_set_tab_label_packing: 'a GtkNotebook -> 'b GtkWidget -> bool -> bool -> gtk_pack_type -> unit

    (* *** Alignment *** *)

    type 'a alignment_t
    type 'a GtkAlignment = 'a alignment_t GtkBin


    val alignment_new: real -> real -> real -> real -> base GtkAlignment
    val alignment_set: 'a GtkAlignment -> real -> real -> real -> real -> unit

    (* *** Layout *** *)

    type 'a layout_t
    type 'a GtkLayout = 'a layout_t GtkContainer


    val layout_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkLayout
    val layout_new': unit -> base GtkLayout
    val layout_put: 'a GtkLayout -> 'b GtkWidget -> int -> int -> unit
    val layout_move: 'a GtkLayout -> 'b GtkWidget -> int -> int -> unit
    val layout_set_size: 'a GtkLayout -> word -> word -> unit
    val layout_freeze: 'a GtkLayout -> unit
    val layout_thaw: 'a GtkLayout -> unit
    val layout_get_hadjustment: 'a GtkLayout -> base GtkAdjustment
    val layout_get_vadjustment: 'a GtkLayout -> base GtkAdjustment
    val layout_set_hadjustment: 'a GtkLayout -> 'b GtkAdjustment -> unit
    val layout_set_vadjustment: 'a GtkLayout -> 'b GtkAdjustment -> unit

    (* *** Plug *** *)

    type 'a plug_t
    type 'a GtkPlug = 'a plug_t GtkWindow


    val plug_new: word -> base GtkPlug

    (* *** Toolbar *** *)

    type 'a toolbar_t
    type 'a GtkToolbar = 'a toolbar_t GtkContainer


    val toolbar_new: gtk_orientation -> gtk_toolbar_style -> base GtkToolbar
    val toolbar_append_space: 'a GtkToolbar -> unit
    val toolbar_prepend_space: 'a GtkToolbar -> unit
    val toolbar_insert_space: 'a GtkToolbar -> int -> unit
    val toolbar_append_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> unit
    val toolbar_prepend_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> unit
    val toolbar_insert_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> int -> unit
    val toolbar_set_orientation: 'a GtkToolbar -> gtk_orientation -> unit
    val toolbar_set_style: 'a GtkToolbar -> gtk_toolbar_style -> unit
    val toolbar_set_space_size: 'a GtkToolbar -> int -> unit
    val toolbar_set_space_style: 'a GtkToolbar -> gtk_toolbar_space_style -> unit
    val toolbar_set_tooltips: 'a GtkToolbar -> bool -> unit
    val toolbar_set_button_relief: 'a GtkToolbar -> gtk_relief_style -> unit
    val toolbar_get_button_relief: 'a GtkToolbar -> gtk_relief_style

    (* *** Button *** *)

    type 'a button_t
    type 'a GtkButton = 'a button_t GtkContainer


    val button_new: unit -> base GtkButton
    val button_new_with_label: string -> base GtkButton
    val button_pressed: 'a GtkButton -> unit
    val button_released: 'a GtkButton -> unit
    val button_clicked: 'a GtkButton -> unit
    val button_enter: 'a GtkButton -> unit
    val button_leave: 'a GtkButton -> unit
    val button_set_relief: 'a GtkButton -> gtk_relief_style -> unit
    val button_get_relief: 'a GtkButton -> gtk_relief_style

    (* *** ToggleButton *** *)

    type 'a togglebutton_t
    type 'a GtkToggleButton = 'a togglebutton_t GtkButton

    val toggle_button_get_draw_indicator: 'a GtkToggleButton -> bool

    val toggle_button_new: unit -> base GtkToggleButton
    val toggle_button_new_with_label: string -> base GtkToggleButton
    val toggle_button_set_mode: 'a GtkToggleButton -> bool -> unit
    val toggle_button_set_active: 'a GtkToggleButton -> bool -> unit
    val toggle_button_get_active: 'a GtkToggleButton -> bool
    val toggle_button_toggled: 'a GtkToggleButton -> unit

    (* *** CheckButton *** *)

    type 'a checkbutton_t
    type 'a GtkCheckButton = 'a checkbutton_t GtkToggleButton


    val check_button_new: unit -> base GtkCheckButton
    val check_button_new_with_label: string -> base GtkCheckButton

    (* *** RadioButton *** *)

    type 'a radiobutton_t
    type 'a GtkRadioButton = 'a radiobutton_t GtkCheckButton


    val radio_button_new_from_widget: 'a GtkRadioButton -> base GtkRadioButton
    val radio_button_new_with_label_from_widget: 'a GtkRadioButton option -> string -> base GtkRadioButton
    val radio_button_new_with_label_from_widget': string -> base GtkRadioButton

    (* *** Misc *** *)

    type 'a misc_t
    type 'a GtkMisc = 'a misc_t GtkWidget


    val misc_set_alignment: 'a GtkMisc -> real -> real -> unit
    val misc_set_padding: 'a GtkMisc -> int -> int -> unit

    (* *** Arrow *** *)

    type 'a arrow_t
    type 'a GtkArrow = 'a arrow_t GtkMisc


    val arrow_new: gtk_arrow_type -> gtk_shadow_type -> base GtkArrow
    val arrow_set: 'a GtkArrow -> gtk_arrow_type -> gtk_shadow_type -> unit

    (* *** Label *** *)

    type 'a label_t
    type 'a GtkLabel = 'a label_t GtkMisc


    val label_new: string -> base GtkLabel
    val label_set_text: 'a GtkLabel -> string -> unit
    val label_set_pattern: 'a GtkLabel -> string -> unit
    val label_set_justify: 'a GtkLabel -> gtk_justification -> unit
    val label_set_line_wrap: 'a GtkLabel -> bool -> unit
    val label_parse_uline: 'a GtkLabel -> string -> word
    val label_get: 'a GtkLabel -> string

    (* *** AccelLabel *** *)

    type 'a accellabel_t
    type 'a GtkAccelLabel = 'a accellabel_t GtkLabel


    val accel_label_new: string -> base GtkAccelLabel
    val accel_label_get_accel_width: 'a GtkAccelLabel -> word
    val accel_label_set_accel_widget: 'a GtkAccelLabel -> 'b GtkWidget -> unit
    val accel_label_refetch: 'a GtkAccelLabel -> bool

    (* *** TipsQuery *** *)

    type 'a tipsquery_t
    type 'a GtkTipsQuery = 'a tipsquery_t GtkLabel


    val tips_query_new: unit -> base GtkTipsQuery
    val tips_query_start_query: 'a GtkTipsQuery -> unit
    val tips_query_stop_query: 'a GtkTipsQuery -> unit
    val tips_query_set_caller: 'a GtkTipsQuery -> 'b GtkWidget -> unit
    val tips_query_set_labels: 'a GtkTipsQuery -> string -> string -> unit

    (* *** Item *** *)

    type 'a item_t
    type 'a GtkItem = 'a item_t GtkBin


    val item_select: 'a GtkItem -> unit
    val item_deselect: 'a GtkItem -> unit
    val item_toggle: 'a GtkItem -> unit

    (* *** Statusbar *** *)

    type 'a statusbar_t
    type 'a GtkStatusbar = 'a statusbar_t GtkHBox


    val statusbar_new: unit -> base GtkStatusbar
    val statusbar_push: 'a GtkStatusbar -> word -> string -> word
    val statusbar_pop: 'a GtkStatusbar -> word -> unit
    val statusbar_get_context_id: 'a GtkStatusbar -> string -> word
    val statusbar_remove: 'a GtkStatusbar -> word -> word -> unit

    (* *** Separator *** *)

    type 'a separator_t
    type 'a GtkSeparator = 'a separator_t GtkWidget



    (* *** HSeparator *** *)

    type 'a hseparator_t
    type 'a GtkHSeparator = 'a hseparator_t GtkSeparator


    val hseparator_new: unit -> base GtkHSeparator

    (* *** VSeparator *** *)

    type 'a vseparator_t
    type 'a GtkVSeparator = 'a vseparator_t GtkSeparator


    val vseparator_new: unit -> base GtkVSeparator

    (* *** Progress *** *)

    type 'a progress_t
    type 'a GtkProgress = 'a progress_t GtkWidget


    val progress_set_show_text: 'a GtkProgress -> int -> unit
    val progress_set_text_alignment: 'a GtkProgress -> real -> real -> unit
    val progress_set_format_string: 'a GtkProgress -> string -> unit
    val progress_set_adjustment: 'a GtkProgress -> 'b GtkAdjustment -> unit
    val progress_configure: 'a GtkProgress -> real -> real -> real -> unit
    val progress_set_percentage: 'a GtkProgress -> real -> unit
    val progress_set_value: 'a GtkProgress -> real -> unit
    val progress_get_value: 'a GtkProgress -> real
    val progress_set_activity_mode: 'a GtkProgress -> word -> unit
    val progress_get_current_text: 'a GtkProgress -> string
    val progress_get_text_from_value: 'a GtkProgress -> real -> string
    val progress_get_current_percentage: 'a GtkProgress -> real
    val progress_get_percentage_from_value: 'a GtkProgress -> real -> real

    (* *** ProgressBar *** *)

    type 'a progressbar_t
    type 'a GtkProgressBar = 'a progressbar_t GtkWidget


    val progress_bar_new: unit -> base GtkProgressBar
    val progress_bar_new_with_adjustment: 'a GtkAdjustment -> base GtkProgressBar
    val progress_bar_set_bar_style: 'a GtkProgressBar -> gtk_progress_bar_style -> unit
    val progress_bar_set_discrete_blocks: 'a GtkProgressBar -> word -> unit
    val progress_bar_set_activity_step: 'a GtkProgressBar -> word -> unit
    val progress_bar_set_activity_blocks: 'a GtkProgressBar -> word -> unit
    val progress_bar_set_orientation: 'a GtkProgressBar -> gtk_progress_bar_orientation -> unit
    val progress_bar_update: 'a GtkProgressBar -> real -> unit

    (* *** Pixmap *** *)

    type 'a pixmap_t
    type 'a GtkPixmap = 'a pixmap_t GtkMisc


    val pixmap_new: gdk_pixmap -> gdk_bitmap option -> base GtkWidget
    val pixmap_new': gdk_pixmap -> base GtkWidget
    val pixmap_set: 'a GtkPixmap -> gdk_pixmap -> gdk_bitmap -> unit
    val pixmap_set_build_insensitive: 'a GtkPixmap -> word -> unit

    (* *** ColorSelection *** *)

    type 'a colorselection_t
    type 'a GtkColorSelection = 'a colorselection_t GtkVBox


    val color_selection_new: unit -> base GtkColorSelection
    val color_selection_set_update_policy: 'a GtkColorSelection -> gtk_update_type -> unit
    val color_selection_set_opacity: 'a GtkColorSelection -> bool -> unit

    (* *** ColorSelectionDialog *** *)

    type 'a colorselectiondialog_t
    type 'a GtkColorSelectionDialog = 'a colorselectiondialog_t GtkWindow

    val color_selection_dialog_get_colorsel: 'a GtkColorSelectionDialog -> base GtkColorSelection
    val color_selection_dialog_get_main_vbox: 'a GtkColorSelectionDialog -> base GtkVBox
    val color_selection_dialog_get_ok_button: 'a GtkColorSelectionDialog -> base GtkButton
    val color_selection_dialog_get_reset_button: 'a GtkColorSelectionDialog -> base GtkButton
    val color_selection_dialog_get_cancel_button: 'a GtkColorSelectionDialog -> base GtkButton
    val color_selection_dialog_get_help_button: 'a GtkColorSelectionDialog -> base GtkButton

    val color_selection_dialog_new: string -> base GtkColorSelectionDialog

    (* *** InputDialog *** *)

    type 'a inputdialog_t
    type 'a GtkInputDialog = 'a inputdialog_t GtkDialog

    val input_dialog_get_close_button: 'a GtkInputDialog -> base GtkButton
    val input_dialog_get_save_button: 'a GtkInputDialog -> base GtkButton

    val input_dialog_new: unit -> base GtkInputDialog

    (* *** DrawingArea *** *)

    type 'a drawingarea_t
    type 'a GtkDrawingArea = 'a drawingarea_t GtkWidget


    val drawing_area_new: unit -> base GtkDrawingArea
    val drawing_area_size: 'a GtkDrawingArea -> int -> int -> unit

    (* *** Curve *** *)

    type 'a curve_t
    type 'a GtkCurve = 'a curve_t GtkDrawingArea


    val curve_new: unit -> base GtkCurve
    val curve_reset: 'a GtkCurve -> unit
    val curve_set_gamma: 'a GtkCurve -> real -> unit
    val curve_set_range: 'a GtkCurve -> real -> real -> real -> real -> unit
    val curve_set_curve_type: 'a GtkCurve -> gtk_curve_type -> unit

    (* *** GammaCurve *** *)

    type 'a gammacurve_t
    type 'a GtkGammaCurve = 'a gammacurve_t GtkVBox


    val gamma_curve_new: unit -> base GtkGammaCurve

    (* *** FileSelection *** *)

    type 'a fileselection_t
    type 'a GtkFileSelection = 'a fileselection_t GtkWindow

    val file_selection_get_dir_list: 'a GtkFileSelection -> base GtkWidget
    val file_selection_get_file_list: 'a GtkFileSelection -> base GtkWidget
    val file_selection_get_selection_entry: 'a GtkFileSelection -> base GtkWidget
    val file_selection_get_selection_text: 'a GtkFileSelection -> base GtkWidget
    val file_selection_get_main_vbox: 'a GtkFileSelection -> base GtkVBox
    val file_selection_get_ok_button: 'a GtkFileSelection -> base GtkButton
    val file_selection_get_cancel_button: 'a GtkFileSelection -> base GtkButton
    val file_selection_get_help_button: 'a GtkFileSelection -> base GtkButton

    val file_selection_new: string -> base GtkFileSelection
    val file_selection_set_filename: 'a GtkFileSelection -> string -> unit
    val file_selection_get_filename: 'a GtkFileSelection -> string
    val file_selection_complete: 'a GtkFileSelection -> string -> unit
    val file_selection_show_fileop_buttons: 'a GtkFileSelection -> unit
    val file_selection_hide_fileop_buttons: 'a GtkFileSelection -> unit

    (* *** FontSelection *** *)

    type 'a fontselection_t
    type 'a GtkFontSelection = 'a fontselection_t GtkNotebook


    val font_selection_new: unit -> base GtkFontSelection
    val font_selection_get_font_name: 'a GtkFontSelection -> string
    val font_selection_get_font: 'a GtkFontSelection -> gdk_font
    val font_selection_set_font_name: 'a GtkFontSelection -> string -> bool
    val font_selection_get_preview_text: 'a GtkFontSelection -> string
    val font_selection_set_preview_text: 'a GtkFontSelection -> string -> unit

    (* *** FontSelectionDialog *** *)

    type 'a fontselectiondialog_t
    type 'a GtkFontSelectionDialog = 'a fontselectiondialog_t GtkWindow

    val font_selection_dialog_get_fontsel: 'a GtkFontSelectionDialog -> base GtkWidget
    val font_selection_dialog_get_main_vbox: 'a GtkFontSelectionDialog -> base GtkVBox
    val font_selection_dialog_get_action_area: 'a GtkFontSelectionDialog -> base GtkWidget
    val font_selection_dialog_get_ok_button: 'a GtkFontSelectionDialog -> base GtkButton
    val font_selection_dialog_get_apply_button: 'a GtkFontSelectionDialog -> base GtkButton
    val font_selection_dialog_get_cancel_button: 'a GtkFontSelectionDialog -> base GtkButton

    val font_selection_dialog_new: string -> base GtkFontSelectionDialog
    val font_selection_dialog_get_font_name: 'a GtkFontSelectionDialog -> string
    val font_selection_dialog_get_font: 'a GtkFontSelectionDialog -> gdk_font
    val font_selection_dialog_set_font_name: 'a GtkFontSelectionDialog -> string -> bool
    val font_selection_dialog_get_preview_text: 'a GtkFontSelectionDialog -> string
    val font_selection_dialog_set_preview_text: 'a GtkFontSelectionDialog -> string -> unit

    (* *** Preview *** *)

    type 'a preview_t
    type 'a GtkPreview = 'a preview_t GtkWidget


    val preview_new: gtk_preview_type -> base GtkWidget
    val preview_size: 'a GtkPreview -> int -> int -> unit
    val preview_put: 'a GtkPreview -> gdk_window -> gdk_gc -> int -> int -> int -> int -> int -> int -> unit
    val preview_set_expand: 'a GtkPreview -> int -> unit
    val preview_set_color_cube: word -> word -> word -> word -> unit
    val preview_set_install_cmap: int -> unit
    val preview_set_reserved: int -> unit
    val preview_set_dither: 'a GtkPreview -> gdk_rgb_dither -> unit

    (* *** Calendar *** *)

    type 'a calendar_t
    type 'a GtkCalendar = 'a calendar_t GtkWidget


    val calendar_new: unit -> base GtkCalendar
    val calendar_select_month: 'a GtkCalendar -> word -> word -> int
    val calendar_select_day: 'a GtkCalendar -> word -> unit
    val calendar_mark_day: 'a GtkCalendar -> word -> int
    val calendar_unmark_day: 'a GtkCalendar -> word -> int
    val calendar_clear_marks: 'a GtkCalendar -> unit
    val calendar_display_options: 'a GtkCalendar -> gtk_calendar_display_options list -> unit
    val calendar_get_date: 'a GtkCalendar -> word * word * word
    val calendar_freeze: 'a GtkCalendar -> unit
    val calendar_thaw: 'a GtkCalendar -> unit

    (* *** Tree *** *)

    type 'a tree_t
    type 'a GtkTree = 'a tree_t GtkContainer



    (* *** TreeItem *** *)

    type 'a treeitem_t
    type 'a GtkTreeItem = 'a treeitem_t GtkItem

    val tree_item_get_subtree: 'a GtkTreeItem -> base GtkTree

    val tree_item_new: unit -> base GtkTreeItem
    val tree_item_new_with_label: string -> base GtkTreeItem
    val tree_item_set_subtree: 'a GtkTreeItem -> 'b GtkWidget -> unit
    val tree_item_remove_subtree: 'a GtkTreeItem -> unit
    val tree_item_select: 'a GtkTreeItem -> unit
    val tree_item_deselect: 'a GtkTreeItem -> unit
    val tree_item_expand: 'a GtkTreeItem -> unit
    val tree_item_collapse: 'a GtkTreeItem -> unit
    val tree_new: unit -> base GtkTree
    val tree_append: 'a GtkTree -> 'b GtkWidget -> unit
    val tree_prepend: 'a GtkTree -> 'b GtkWidget -> unit
    val tree_insert: 'a GtkTree -> 'b GtkWidget -> int -> unit
    val tree_remove_item: 'a GtkTree -> 'b GtkWidget -> unit
    val tree_clear_items: 'a GtkTree -> int -> int -> unit
    val tree_select_item: 'a GtkTree -> int -> unit
    val tree_unselect_item: 'a GtkTree -> int -> unit
    val tree_select_child: 'a GtkTree -> 'b GtkWidget -> unit
    val tree_unselect_child: 'a GtkTree -> 'b GtkWidget -> unit
    val tree_child_position: 'a GtkTree -> 'b GtkWidget -> int
    val tree_set_selection_mode: 'a GtkTree -> gtk_selection_mode -> unit
    val tree_set_view_mode: 'a GtkTree -> gtk_tree_view_mode -> unit
    val tree_set_view_lines: 'a GtkTree -> bool -> unit

    (* *** CList *** *)

    type 'a clist_t
    type 'a GtkCList = 'a clist_t GtkContainer

    val clist_get_focus_row: 'a GtkCList -> int
    val clist_get_rows: 'a GtkCList -> int

    val clist_new: int -> base GtkCList
    val clist_set_shadow_type: 'a GtkCList -> gtk_shadow_type -> unit
    val clist_set_selection_mode: 'a GtkCList -> gtk_selection_mode -> unit
    val clist_set_reorderable: 'a GtkCList -> bool -> unit
    val clist_set_use_drag_icons: 'a GtkCList -> bool -> unit
    val clist_set_button_actions: 'a GtkCList -> word -> word -> unit
    val clist_set_hadjustment: 'a GtkCList -> 'b GtkAdjustment -> unit
    val clist_set_vadjustment: 'a GtkCList -> 'b GtkAdjustment -> unit
    val clist_get_hadjustment: 'a GtkCList -> base GtkAdjustment
    val clist_get_vadjustment: 'a GtkCList -> base GtkAdjustment
    val clist_freeze: 'a GtkCList -> unit
    val clist_thaw: 'a GtkCList -> unit
    val clist_column_titles_show: 'a GtkCList -> unit
    val clist_column_titles_hide: 'a GtkCList -> unit
    val clist_column_title_active: 'a GtkCList -> int -> unit
    val clist_column_title_passive: 'a GtkCList -> int -> unit
    val clist_column_titles_active: 'a GtkCList -> unit
    val clist_column_titles_passive: 'a GtkCList -> unit
    val clist_set_column_title: 'a GtkCList -> int -> string -> unit
    val clist_get_column_title: 'a GtkCList -> int -> string
    val clist_set_column_widget: 'a GtkCList -> int -> 'b GtkWidget -> unit
    val clist_get_column_widget: 'a GtkCList -> int -> base GtkWidget
    val clist_set_column_justification: 'a GtkCList -> int -> gtk_justification -> unit
    val clist_set_column_visibility: 'a GtkCList -> int -> bool -> unit
    val clist_set_column_resizeable: 'a GtkCList -> int -> bool -> unit
    val clist_set_column_auto_resize: 'a GtkCList -> int -> bool -> unit
    val clist_columns_autosize: 'a GtkCList -> int
    val clist_optimal_column_width: 'a GtkCList -> int -> int
    val clist_set_column_width: 'a GtkCList -> int -> int -> unit
    val clist_set_column_min_width: 'a GtkCList -> int -> int -> unit
    val clist_set_column_max_width: 'a GtkCList -> int -> int -> unit
    val clist_set_row_height: 'a GtkCList -> word -> unit
    val clist_moveto: 'a GtkCList -> int -> int -> real -> real -> unit
    val clist_row_is_visible: 'a GtkCList -> int -> bool
    val clist_get_cell_type: 'a GtkCList -> int -> int -> gtk_cell_type
    val clist_set_text: 'a GtkCList -> int -> int -> string -> unit
    val clist_get_text: 'a GtkCList -> int -> int -> int * string
    val clist_set_pixmap: 'a GtkCList -> int -> int -> gdk_pixmap -> gdk_bitmap -> unit
    val clist_set_pixtext: 'a GtkCList -> int -> int -> string -> word -> gdk_pixmap -> gdk_bitmap option -> unit
    val clist_set_pixtext': 'a GtkCList -> int -> int -> string -> word -> gdk_pixmap -> unit
    val clist_set_foreground: 'a GtkCList -> int -> gdk_color -> unit
    val clist_set_background: 'a GtkCList -> int -> gdk_color -> unit
    val clist_set_cell_style: 'a GtkCList -> int -> int -> gtk_style -> unit
    val clist_get_cell_style: 'a GtkCList -> int -> int -> gtk_style
    val clist_set_row_style: 'a GtkCList -> int -> gtk_style -> unit
    val clist_get_row_style: 'a GtkCList -> int -> gtk_style
    val clist_set_shift: 'a GtkCList -> int -> int -> int -> int -> unit
    val clist_set_selectable: 'a GtkCList -> int -> bool -> unit
    val clist_get_selectable: 'a GtkCList -> int -> unit
    val clist_remove: 'a GtkCList -> int -> unit
    val clist_select_row: 'a GtkCList -> int -> int -> unit
    val clist_unselect_row: 'a GtkCList -> int -> int -> unit
    val clist_undo_selection: 'a GtkCList -> unit
    val clist_clear: 'a GtkCList -> unit
    val clist_get_selection_info: 'a GtkCList -> int -> int -> int * int * int
    val clist_select_all: 'a GtkCList -> unit
    val clist_unselect_all: 'a GtkCList -> unit
    val clist_swap_rows: 'a GtkCList -> int -> int -> unit
    val clist_row_move: 'a GtkCList -> int -> int -> unit
    val clist_set_sort_column: 'a GtkCList -> int -> unit
    val clist_set_sort_type: 'a GtkCList -> gtk_sort_type -> unit
    val clist_sort: 'a GtkCList -> unit
    val clist_set_auto_sort: 'a GtkCList -> bool -> unit

    (* *** ListItem *** *)

    type 'a listitem_t
    type 'a GtkListItem = 'a listitem_t GtkItem


    val list_item_new: unit -> base GtkListItem
    val list_item_new_with_label: string -> base GtkListItem
    val list_item_select: 'a GtkListItem -> unit
    val list_item_deselect: 'a GtkListItem -> unit

    (* *** List *** *)

    type 'a list_t
    type 'a GtkList = 'a list_t GtkContainer


    val list_new: unit -> base GtkList
    val list_clear_items: 'a GtkList -> int -> int -> unit
    val list_select_item: 'a GtkList -> int -> unit
    val list_unselect_item: 'a GtkList -> int -> unit
    val list_select_child: 'a GtkList -> 'b GtkWidget -> unit
    val list_unselect_child: 'a GtkList -> 'b GtkWidget -> unit
    val list_child_position: 'a GtkList -> 'b GtkWidget -> int
    val list_set_selection_mode: 'a GtkList -> gtk_selection_mode -> unit
    val list_extend_selection: 'a GtkList -> gtk_scroll_type -> real -> bool -> unit
    val list_start_selection: 'a GtkList -> unit
    val list_end_selection: 'a GtkList -> unit
    val list_select_all: 'a GtkList -> unit
    val list_unselect_all: 'a GtkList -> unit
    val list_scroll_horizontal: 'a GtkList -> gtk_scroll_type -> real -> unit
    val list_scroll_vertical: 'a GtkList -> gtk_scroll_type -> real -> unit
    val list_toggle_add_mode: 'a GtkList -> unit
    val list_toggle_focus_row: 'a GtkList -> unit
    val list_toggle_row: 'a GtkList -> 'b GtkWidget -> unit
    val list_undo_selection: 'a GtkList -> unit
    val list_end_drag_selection: 'a GtkList -> unit

    (* *** MenuShell *** *)

    type 'a menushell_t
    type 'a GtkMenuShell = 'a menushell_t GtkContainer


    val menu_shell_append: 'a GtkMenuShell -> 'b GtkWidget -> unit
    val menu_shell_prepend: 'a GtkMenuShell -> 'b GtkWidget -> unit
    val menu_shell_insert: 'a GtkMenuShell -> 'b GtkWidget -> int -> unit
    val menu_shell_deactivate: 'a GtkMenuShell -> unit
    val menu_shell_select_item: 'a GtkMenuShell -> 'b GtkWidget -> unit
    val menu_shell_deselect: 'a GtkMenuShell -> unit
    val menu_shell_activate_item: 'a GtkMenuShell -> 'b GtkWidget -> bool -> unit

    (* *** MenuBar *** *)

    type 'a menubar_t
    type 'a GtkMenuBar = 'a menubar_t GtkMenuShell


    val menu_bar_new: unit -> base GtkMenuBar
    val menu_bar_append: 'a GtkMenuBar -> 'b GtkWidget -> unit
    val menu_bar_prepend: 'a GtkMenuBar -> 'b GtkWidget -> unit
    val menu_bar_insert: 'a GtkMenuBar -> 'b GtkWidget -> int -> unit
    val menu_bar_set_shadow_type: 'a GtkMenuBar -> gtk_shadow_type -> unit

    (* *** Menu *** *)

    type 'a menu_t
    type 'a GtkMenu = 'a menu_t GtkMenuShell


    val menu_new: unit -> base GtkMenu
    val menu_append: 'a GtkMenu -> 'b GtkWidget -> unit
    val menu_prepend: 'a GtkMenu -> 'b GtkWidget -> unit
    val menu_insert: 'a GtkMenu -> 'b GtkWidget -> int -> unit
    val menu_reposition: 'a GtkMenu -> unit
    val menu_popdown: 'a GtkMenu -> unit
    val menu_get_active: 'a GtkMenu -> base GtkWidget
    val menu_set_active: 'a GtkMenu -> int -> unit
    val menu_set_accel_group: 'a GtkMenu -> gtk_accel_group -> unit
    val menu_get_accel_group: 'a GtkMenu -> gtk_accel_group
    val menu_get_attach_widget: 'a GtkMenu -> base GtkWidget
    val menu_detach: 'a GtkMenu -> unit
    val menu_set_tearoff_state: 'a GtkMenu -> bool -> unit
    val menu_set_title: 'a GtkMenu -> string -> unit
    val menu_reorder_child: 'a GtkMenu -> 'b GtkWidget -> int -> unit

    (* *** MenuItem *** *)

    type 'a menuitem_t
    type 'a GtkMenuItem = 'a menuitem_t GtkItem


    val menu_item_new: unit -> base GtkMenuItem
    val menu_item_new_with_label: string -> base GtkMenuItem
    val menu_item_set_submenu: 'a GtkMenuItem -> 'b GtkWidget -> unit
    val menu_item_remove_submenu: 'a GtkMenuItem -> unit
    val menu_item_set_placement: 'a GtkMenuItem -> gtk_submenu_placement -> unit
    val menu_item_configure: 'a GtkMenuItem -> bool -> bool -> unit
    val menu_item_select: 'a GtkMenuItem -> unit
    val menu_item_deselect: 'a GtkMenuItem -> unit
    val menu_item_activate: 'a GtkMenuItem -> unit
    val menu_item_right_justify: 'a GtkMenuItem -> unit

    (* *** CheckMenuItem *** *)

    type 'a checkmenuitem_t
    type 'a GtkCheckMenuItem = 'a checkmenuitem_t GtkMenuItem

    val check_menu_item_get_active: 'a GtkCheckMenuItem -> word

    val check_menu_item_new: unit -> base GtkCheckMenuItem
    val check_menu_item_new_with_label: string -> base GtkCheckMenuItem
    val check_menu_item_set_active: 'a GtkCheckMenuItem -> bool -> unit
    val check_menu_item_set_show_toggle: 'a GtkCheckMenuItem -> bool -> unit
    val check_menu_item_toggled: 'a GtkCheckMenuItem -> unit

    (* *** RadioMenuItem *** *)

    type 'a radiomenuitem_t
    type 'a GtkRadioMenuItem = 'a radiomenuitem_t GtkCheckMenuItem



    (* *** OptionMenu *** *)

    type 'a optionmenu_t
    type 'a GtkOptionMenu = 'a optionmenu_t GtkButton


    val option_menu_new: unit -> base GtkOptionMenu
    val option_menu_get_menu: 'a GtkOptionMenu -> base GtkWidget
    val option_menu_set_menu: 'a GtkOptionMenu -> 'b GtkWidget -> unit
    val option_menu_remove_menu: 'a GtkOptionMenu -> unit
    val option_menu_set_history: 'a GtkOptionMenu -> int -> unit

    (* *** TearoffMenuItem *** *)

    type 'a tearoffmenuitem_t
    type 'a GtkTearoffMenuItem = 'a tearoffmenuitem_t GtkMenuItem


    val tearoff_menu_item_new: unit -> base GtkTearoffMenuItem

    (* *** ItemFactory *** *)

    type 'a itemfactory_t
    type 'a GtkItemFactory = 'a itemfactory_t GtkObject


    val item_factory_new: word -> string -> gtk_accel_group -> base GtkItemFactory
    val item_factory_parse_rc: string -> unit
    val item_factory_parse_rc_string: string -> unit
    val item_factory_add_foreign: 'a GtkWidget -> string -> gtk_accel_group -> word -> gdk_modifier_type list -> unit
    val item_factory_from_widget: 'a GtkWidget -> base GtkItemFactory
    val item_factory_path_from_widget: 'a GtkWidget -> string
    val item_factory_get_widget: 'a GtkItemFactory -> string -> base GtkWidget
    val item_factory_get_widget_by_action: 'a GtkItemFactory -> word -> base GtkWidget
    val item_factory_delete_item: 'a GtkItemFactory -> string -> unit
    val item_factory_popup: 'a GtkItemFactory -> word -> word -> word -> word -> unit

    (* *** Range *** *)

    type 'a range_t
    type 'a GtkRange = 'a range_t GtkWidget


    val range_get_adjustment: 'a GtkRange -> base GtkAdjustment
    val range_set_update_policy: 'a GtkRange -> gtk_update_type -> unit
    val range_set_adjustment: 'a GtkRange -> 'b GtkAdjustment -> unit
    val range_draw_background: 'a GtkRange -> unit
    val range_clear_background: 'a GtkRange -> unit
    val range_draw_trough: 'a GtkRange -> unit
    val range_draw_slider: 'a GtkRange -> unit
    val range_draw_step_forw: 'a GtkRange -> unit
    val range_draw_step_back: 'a GtkRange -> unit
    val range_slider_update: 'a GtkRange -> unit
    val range_default_hmotion: 'a GtkRange -> int -> int -> unit
    val range_default_hslider_update: 'a GtkRange -> unit
    val range_default_vmotion: 'a GtkRange -> int -> int -> unit
    val range_default_vslider_update: 'a GtkRange -> unit

    (* *** Scale *** *)

    type 'a scale_t
    type 'a GtkScale = 'a scale_t GtkRange


    val scale_set_digits: 'a GtkScale -> word -> unit
    val scale_set_draw_value: 'a GtkScale -> bool -> unit
    val scale_set_value_pos: 'a GtkScale -> gtk_position_type -> unit
    val scale_get_value_width: 'a GtkScale -> int
    val scale_draw_value: 'a GtkScale -> unit

    (* *** HScale *** *)

    type 'a hscale_t
    type 'a GtkHScale = 'a hscale_t GtkScale


    val hscale_new: 'a GtkAdjustment option -> base GtkHScale
    val hscale_new': unit -> base GtkHScale

    (* *** VScale *** *)

    type 'a vscale_t
    type 'a GtkVScale = 'a vscale_t GtkScale


    val vscale_new: 'a GtkAdjustment option -> base GtkVScale
    val vscale_new': unit -> base GtkVScale

    (* *** Scrollbar *** *)

    type 'a scrollbar_t
    type 'a GtkScrollbar = 'a scrollbar_t GtkRange



    (* *** HScrollbar *** *)

    type 'a hscrollbar_t
    type 'a GtkHScrollbar = 'a hscrollbar_t GtkScrollbar


    val hscrollbar_new: 'a GtkAdjustment option -> base GtkHScrollbar
    val hscrollbar_new': unit -> base GtkHScrollbar

    (* *** VScrollbar *** *)

    type 'a vscrollbar_t
    type 'a GtkVScrollbar = 'a vscrollbar_t GtkScrollbar


    val vscrollbar_new: 'a GtkAdjustment option -> base GtkVScrollbar
    val vscrollbar_new': unit -> base GtkVScrollbar

    (* *** Ruler *** *)

    type 'a ruler_t
    type 'a GtkRuler = 'a ruler_t GtkWidget


    val ruler_set_metric: 'a GtkRuler -> gtk_metric_type -> unit
    val ruler_set_range: 'a GtkRuler -> real -> real -> real -> real -> unit
    val ruler_draw_ticks: 'a GtkRuler -> unit
    val ruler_draw_pos: 'a GtkRuler -> unit

    (* *** HRuler *** *)

    type 'a hruler_t
    type 'a GtkHRuler = 'a hruler_t GtkRuler


    val hruler_new: unit -> base GtkHRuler

    (* *** VRuler *** *)

    type 'a vruler_t
    type 'a GtkVRuler = 'a vruler_t GtkRuler


    val vruler_new: unit -> base GtkVRuler

    (* *** Editable *** *)

    type 'a editable_t
    type 'a GtkEditable = 'a editable_t GtkWidget

    val editable_get_selection_start_pos: 'a GtkEditable -> word
    val editable_get_selection_end_pos: 'a GtkEditable -> word

    val editable_select_region: 'a GtkEditable -> int -> int -> unit
    val editable_delete_text: 'a GtkEditable -> int -> int -> unit
    val editable_get_chars: 'a GtkEditable -> int -> int -> string
    val editable_cut_clipboard: 'a GtkEditable -> unit
    val editable_copy_clipboard: 'a GtkEditable -> unit
    val editable_paste_clipboard: 'a GtkEditable -> unit
    val editable_claim_selection: 'a GtkEditable -> bool -> word -> unit
    val editable_delete_selection: 'a GtkEditable -> unit
    val editable_changed: 'a GtkEditable -> unit
    val editable_set_position: 'a GtkEditable -> int -> unit
    val editable_get_position: 'a GtkEditable -> int
    val editable_set_editable: 'a GtkEditable -> bool -> unit

    (* *** Entry *** *)

    type 'a entry_t
    type 'a GtkEntry = 'a entry_t GtkEditable


    val entry_new: unit -> base GtkEntry
    val entry_new_with_max_length: int -> base GtkEntry
    val entry_set_text: 'a GtkEntry -> string -> unit
    val entry_append_text: 'a GtkEntry -> string -> unit
    val entry_prepend_text: 'a GtkEntry -> string -> unit
    val entry_set_position: 'a GtkEntry -> int -> unit
    val entry_get_text: 'a GtkEntry -> string
    val entry_select_region: 'a GtkEntry -> int -> int -> unit
    val entry_set_visibility: 'a GtkEntry -> bool -> unit
    val entry_set_editable: 'a GtkEntry -> bool -> unit
    val entry_set_max_length: 'a GtkEntry -> word -> unit

    (* *** SpinButton *** *)

    type 'a spinbutton_t
    type 'a GtkSpinButton = 'a spinbutton_t GtkEntry


    val spin_button_new: 'a GtkAdjustment option -> real -> word -> base GtkSpinButton
    val spin_button_new': real -> word -> base GtkSpinButton
    val spin_button_set_adjustment: 'a GtkSpinButton -> 'b GtkAdjustment -> unit
    val spin_button_get_adjustment: 'a GtkSpinButton -> base GtkAdjustment
    val spin_button_set_digits: 'a GtkSpinButton -> word -> unit
    val spin_button_get_value_as_float: 'a GtkSpinButton -> real
    val spin_button_get_value_as_int: 'a GtkSpinButton -> int
    val spin_button_set_value: 'a GtkSpinButton -> real -> unit
    val spin_button_set_update_policy: 'a GtkSpinButton -> gtk_spin_button_update_policy -> unit
    val spin_button_set_numeric: 'a GtkSpinButton -> bool -> unit
    val spin_button_spin: 'a GtkSpinButton -> gtk_spin_type -> real -> unit
    val spin_button_set_wrap: 'a GtkSpinButton -> bool -> unit
    val spin_button_set_shadow_type: 'a GtkSpinButton -> gtk_shadow_type -> unit
    val spin_button_set_snap_to_ticks: 'a GtkSpinButton -> bool -> unit
    val spin_button_update: 'a GtkSpinButton -> unit
    val spin_button_configure: 'a GtkSpinButton -> 'b GtkAdjustment -> real -> word -> unit

    (* *** Combo *** *)

    type 'a combo_t
    type 'a GtkCombo = 'a combo_t GtkHBox

    val combo_get_entry: 'a GtkCombo -> base GtkEntry
    val combo_get_list: 'a GtkCombo -> base GtkList

    val combo_new: unit -> base GtkCombo
    val combo_set_value_in_list: 'a GtkCombo -> bool -> bool -> unit
    val combo_set_use_arrows: 'a GtkCombo -> bool -> unit
    val combo_set_use_arrows_always: 'a GtkCombo -> bool -> unit
    val combo_set_case_sensitive: 'a GtkCombo -> bool -> unit
    val combo_set_item_string: 'a GtkCombo -> 'b GtkItem -> string -> unit
    val combo_disable_activate: 'a GtkCombo -> unit

    (* *** Text *** *)

    type 'a text_t
    type 'a GtkText = 'a text_t GtkEditable

    val text_get_hadj: 'a GtkText -> base GtkAdjustment
    val text_get_vadj: 'a GtkText -> base GtkAdjustment

    val text_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkText
    val text_new': unit -> base GtkText
    val text_set_editable: 'a GtkText -> bool -> unit
    val text_set_word_wrap: 'a GtkText -> bool -> unit
    val text_set_line_wrap: 'a GtkText -> bool -> unit
    val text_set_adjustments: 'a GtkText -> 'b GtkAdjustment option -> 'c GtkAdjustment option -> unit
    val text_set_adjustments': 'a GtkText -> unit
    val text_set_point: 'a GtkText -> word -> unit
    val text_get_point: 'a GtkText -> word
    val text_get_length: 'a GtkText -> word
    val text_freeze: 'a GtkText -> unit
    val text_thaw: 'a GtkText -> unit
    val text_insert: 'a GtkText -> gdk_font option -> gdk_color option -> gdk_color option -> string -> int -> unit
    val text_insert': 'a GtkText -> string -> int -> unit
    val text_backward_delete: 'a GtkText -> word -> unit
    val text_forward_delete: 'a GtkText -> word -> unit
    val connect_value_changed: 'a GtkAdjustment -> (unit -> unit) -> unit
    val connect_pressed: 'a GtkButton -> (unit -> unit) -> unit
    val connect_released: 'a GtkButton -> (unit -> unit) -> unit
    val connect_clicked: 'a GtkButton -> (unit -> unit) -> unit
    val connect_enter: 'a GtkButton -> (unit -> unit) -> unit
    val connect_leave: 'a GtkButton -> (unit -> unit) -> unit
    val connect_month_changed: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_day_selected: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_day_selected_double_click: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_prev_month: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_next_month: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_prev_year: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_next_year: 'a GtkCalendar -> (unit -> unit) -> unit
    val connect_select_row: 'a GtkCList -> (unit -> unit) -> unit
    val connect_unselect_row: 'a GtkCList -> (unit -> unit) -> unit
    val connect_row_move: 'a GtkCList -> (unit -> unit) -> unit
    val connect_click_column: 'a GtkCList -> (unit -> unit) -> unit
    val connect_resize_column: 'a GtkCList -> (unit -> unit) -> unit
    val connect_add: 'a GtkContainer -> (unit -> unit) -> unit
    val connect_remove: 'a GtkContainer -> (unit -> unit) -> unit
    val connect_check_resize: 'a GtkContainer -> (unit -> unit) -> unit
    val connect_focus: 'a GtkContainer -> (unit -> unit) -> unit
    val connect_set_focus_child: 'a GtkContainer -> (unit -> unit) -> unit
    val connect_disconnect: 'a GtkData -> (unit -> unit) -> unit
    val connect_changed: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_insert_text: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_delete_text: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_activate: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_set_editable: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_move_cursor: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_move_word: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_move_page: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_move_to_row: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_move_to_column: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_kill_char: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_kill_word: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_kill_line: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_cut_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_copy_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_paste_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
    val connect_child_attached: 'a GtkHandleBox -> (unit -> unit) -> unit
    val connect_child_detached: 'a GtkHandleBox -> (unit -> unit) -> unit
    val connect_enable_device: 'a GtkInputDialog -> (unit -> unit) -> unit
    val connect_disable_device: 'a GtkInputDialog -> (unit -> unit) -> unit
    val connect_select: 'a GtkItem -> (unit -> unit) -> unit
    val connect_deselect: 'a GtkItem -> (unit -> unit) -> unit
    val connect_toggle: 'a GtkItem -> (unit -> unit) -> unit
    val connect_toggle_focus_row: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_select_all: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_unselect_all: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_undo_selection: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_start_selection: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_end_selection: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_toggle_add_mode: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_extend_selection: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_scroll_vertical: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_scroll_horizontal: 'a GtkListItem -> (unit -> unit) -> unit
    val connect_switch_page: 'a GtkNotebook -> (unit -> unit) -> unit
    val connect_destroy: 'a GtkObject -> (unit -> unit) -> unit
    val connect_text_pushed: 'a GtkStatusbar -> (unit -> unit) -> unit
    val connect_text_popped: 'a GtkStatusbar -> (unit -> unit) -> unit
    val connect_set_scroll_adjustments: 'a GtkText -> (unit -> unit) -> unit
    val connect_start_query: 'a GtkTipsQuery -> (unit -> unit) -> unit
    val connect_stop_query: 'a GtkTipsQuery -> (unit -> unit) -> unit
    val connect_widget_entered: 'a GtkTipsQuery -> (unit -> unit) -> unit
    val connect_widget_selected: 'a GtkTipsQuery -> (unit -> unit) -> unit
    val connect_toggled: 'a GtkToggleButton -> (unit -> unit) -> unit
    val connect_orientation_changed: 'a GtkToolbar -> (unit -> unit) -> unit
    val connect_style_changed: 'a GtkToolbar -> (unit -> unit) -> unit
    val connect_selection_changed: 'a GtkTree -> (unit -> unit) -> unit
    val connect_select_child: 'a GtkTree -> (unit -> unit) -> unit
    val connect_unselect_child: 'a GtkTree -> (unit -> unit) -> unit
    val connect_expand: 'a GtkTreeItem -> (unit -> unit) -> unit
    val connect_collapse: 'a GtkTreeItem -> (unit -> unit) -> unit
    val connect_show: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_hide: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_map: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_unmap: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_realize: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_unrealize: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_draw: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_draw_focus: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_draw_default: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_size_request: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_size_allocate: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_state_changed: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_parent_set: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_style_set: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_grab_focus: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_button_press_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_button_release_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_motion_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_delete_event: 'a GtkWidget -> (unit -> bool) -> unit
    val connect_destroy_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_expose_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_key_press_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_key_release_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_enter_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_leave_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_configure_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_focus_in_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_focus_out_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_map_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_unmap_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_property_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_selection_clear_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_selection_request_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_selection_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_selection_received: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_selection_get: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_proximity_in_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_proximity_out_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_leave: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_begin: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_end: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_data_delete: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_motion: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_drop: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_data_get: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_drag_data_received: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_visibility_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_client_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_no_expose_event: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_debug_msg: 'a GtkWidget -> (unit -> unit) -> unit
    val connect_set_focus: 'a GtkWindow -> (unit -> unit) -> unit
end
------------------------------------------------------------
(* mgtk --- an SML binding for GTK.                                          *)
(* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         *)
(*                                                                           *)
(* This file is generated automatically. Search for AUTOMATICALLY to find    *)
(* the beginning of the autogenerated code.                                  *)
(*                                                                           *)
(* Command used to generate the file:                                        *)
(*   ../defs2sml -sml --no-header -o gtk.sml gtk.defs                        *)




(*                                                                           *)
(* Start of AUTOMATICALLY generated code.                                    *)
(*                                                                           *)


    type gdk_window_type = int
    val get_gdk_window_type_: unit -> int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_window_type")
    val (GDK_WINDOW_ROOT,GDK_WINDOW_TOPLEVEL,GDK_WINDOW_CHILD,GDK_WINDOW_DIALOG,GDK_WINDOW_TEMP,GDK_WINDOW_PIXMAP,GDK_WINDOW_FOREIGN)
        = get_gdk_window_type_ ()

    type gdk_window_class = int
    val get_gdk_window_class_: unit -> int * int
        = app1(symb"mgtk_get_gdk_window_class")
    val (GDK_INPUT_OUTPUT,GDK_INPUT_ONLY)
        = get_gdk_window_class_ ()

    type gdk_image_type = int
    val get_gdk_image_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_image_type")
    val (GDK_IMAGE_NORMAL,GDK_IMAGE_SHARED,GDK_IMAGE_FASTEST)
        = get_gdk_image_type_ ()

    type gdk_visual_type = int
    val get_gdk_visual_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_visual_type")
    val (GDK_VISUAL_STATIC_GRAY,GDK_VISUAL_GRAYSCALE,GDK_VISUAL_STATIC_COLOR,GDK_VISUAL_PSEUDO_COLOR,GDK_VISUAL_TRUE_COLOR,GDK_VISUAL_DIRECT_COLOR)
        = get_gdk_visual_type_ ()

    type gdk_font_type = int
    val get_gdk_font_type_: unit -> int * int
        = app1(symb"mgtk_get_gdk_font_type")
    val (GDK_FONT_FONT,GDK_FONT_FONTSET)
        = get_gdk_font_type_ ()

    type gdk_window_attributes_type = int
    val get_gdk_window_attributes_type_: unit -> int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_window_attributes_type")
    val (GDK_WA_TITLE,GDK_WA_X,GDK_WA_Y,GDK_WA_CURSOR,GDK_WA_COLORMAP,GDK_WA_VISUAL,GDK_WA_WMCLASS,GDK_WA_NOREDIR)
        = get_gdk_window_attributes_type_ ()

    type gdk_window_hints = int
    val get_gdk_window_hints_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_window_hints")
    val (GDK_HINT_POS,GDK_HINT_MIN_SIZE,GDK_HINT_MAX_SIZE,GDK_HINT_BASE_SIZE,GDK_HINT_ASPECT,GDK_HINT_RESIZE_INC)
        = get_gdk_window_hints_ ()

    type gdk_function = int
    val get_gdk_function_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_function")
    val (GDK_COPY,GDK_INVERT,GDK_XOR,GDK_CLEAR,GDK_AND,GDK_AND_REVERSE,GDK_AND_INVERT,GDK_NOOP,GDK_OR,GDK_EQUIV,GDK_OR_REVERSE,GDK_COPY_INVERT,GDK_OR_INVERT,GDK_NAND,GDK_SET)
        = get_gdk_function_ ()

    type gdk_fill = int
    val get_gdk_fill_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gdk_fill")
    val (GDK_SOLID,GDK_TILED,GDK_STIPPLED,GDK_OPAQUE_STIPPLED)
        = get_gdk_fill_ ()

    type gdk_fill_rule = int
    val get_gdk_fill_rule_: unit -> int * int
        = app1(symb"mgtk_get_gdk_fill_rule")
    val (GDK_EVEN_ODD_RULE,GDK_WINDING_RULE)
        = get_gdk_fill_rule_ ()

    type gdk_line_style = int
    val get_gdk_line_style_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_line_style")
    val (GDK_LINE_SOLID,GDK_LINE_ON_OFF_DASH,GDK_LINE_DOUBLE_DASH)
        = get_gdk_line_style_ ()

    type gdk_cap_style = int
    val get_gdk_cap_style_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gdk_cap_style")
    val (GDK_CAP_NOT_LAST,GDK_CAP_BUTT,GDK_CAP_ROUND,GDK_CAP_PROJECTING)
        = get_gdk_cap_style_ ()

    type gdk_join_style = int
    val get_gdk_join_style_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_join_style")
    val (GDK_JOIN_MITER,GDK_JOIN_ROUND,GDK_JOIN_BEVEL)
        = get_gdk_join_style_ ()

    type gdk_cursor_type = int
    val get_gdk_cursor_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_cursor_type")
    val (GDK_NUM_GLYPHS,GDK_X_CURSOR,GDK_ARROW,GDK_BASED_ARROW_DOWN,GDK_BASED_ARROW_UP,GDK_BOAT,GDK_BOGOSITY,GDK_BOTTOM_LEFT_CORNER,GDK_BOTTOM_RIGHT_CORNER,GDK_BOTTOM_SIDE,GDK_BOTTOM_TEE,GDK_BOX_SPIRAL,GDK_CENTER_PTR,GDK_CIRCLE,GDK_CLOCK,GDK_COFFEE_MUG,GDK_CROSS,GDK_CROSS_REVERSE,GDK_CROSSHAIR,GDK_DIAMOND_CROSS,GDK_DOT,GDK_DOTBOX,GDK_DOUBLE_ARROW,GDK_DRAFT_LARGE,GDK_DRAFT_SMALL,GDK_DRAPED_BOX,GDK_EXCHANGE,GDK_FLEUR,GDK_GOBBLER,GDK_GUMBY,GDK_HAND1,GDK_HAND2,GDK_HEART,GDK_ICON,GDK_IRON_CROSS,GDK_LEFT_PTR,GDK_LEFT_SIDE,GDK_LEFT_TEE,GDK_LEFTBUTTON,GDK_LL_ANGLE,GDK_LR_ANGLE,GDK_MAN,GDK_MIDDLEBUTTON,GDK_MOUSE,GDK_PENCIL,GDK_PIRATE,GDK_PLUS,GDK_QUESTION_ARROW,GDK_RIGHT_PTR,GDK_RIGHT_SIDE,GDK_RIGHT_TEE,GDK_RIGHTBUTTON,GDK_RTL_LOGO,GDK_SAILBOAT,GDK_SB_DOWN_ARROW,GDK_SB_H_DOUBLE_ARROW,GDK_SB_LEFT_ARROW,GDK_SB_RIGHT_ARROW,GDK_SB_UP_ARROW,GDK_SB_V_DOUBLE_ARROW,GDK_SHUTTLE,GDK_SIZING,GDK_SPIDER,GDK_SPRAYCAN,GDK_STAR,GDK_TARGET,GDK_TCROSS,GDK_TOP_LEFT_ARROW,GDK_TOP_LEFT_CORNER,GDK_TOP_RIGHT_CORNER,GDK_TOP_SIDE,GDK_TOP_TEE,GDK_TREK,GDK_UL_ANGLE,GDK_UMBRELLA,GDK_UR_ANGLE,GDK_WATCH,GDK_XTERM,GDK_LAST_CURSOR,GDK_CURSOR_IS_PIXMAP)
        = get_gdk_cursor_type_ ()

    type gdk_filter_return = int
    val get_gdk_filter_return_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_filter_return")
    val (GDK_FILTER_CONTINUE,GDK_FILTER_TRANSLATE,GDK_FILTER_REMOVE)
        = get_gdk_filter_return_ ()

    type gdk_visibility_state = int
    val get_gdk_visibility_state_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_visibility_state")
    val (GDK_VISIBILITY_UNOBSCURED,GDK_VISIBILITY_PARTIAL,GDK_VISIBILITY_FULLY_OBSCURED)
        = get_gdk_visibility_state_ ()

    type gdk_event_type = int
    val get_gdk_event_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_event_type")
    val (GDK_NOTHING,GDK_DELETE,GDK_DESTROY,GDK_EXPOSE,GDK_MOTION_NOTIFY,GDK_BUTTON_PRESS,GDK_2BUTTON_PRESS,GDK_3BUTTON_PRESS,GDK_BUTTON_RELEASE,GDK_KEY_PRESS,GDK_KEY_RELEASE,GDK_ENTER_NOTIFY,GDK_LEAVE_NOTIFY,GDK_FOCUS_CHANGE,GDK_CONFIGURE,GDK_MAP,GDK_UNMAP,GDK_PROPERTY_NOTIFY,GDK_SELECTION_CLEAR,GDK_SELECTION_REQUEST,GDK_SELECTION_NOTIFY,GDK_PROXIMITY_IN,GDK_PROXIMITY_OUT,GDK_DRAG_ENTER,GDK_DRAG_LEAVE,GDK_DRAG_MOTION,GDK_DRAG_STATUS,GDK_DROP_START,GDK_DROP_FINISHED,GDK_CLIENT_EVENT,GDK_VISIBILITY_NOTIFY,GDK_NO_EXPOSE)
        = get_gdk_event_type_ ()

    type gdk_event_mask = int
    val get_gdk_event_mask_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_event_mask")
    val (GDK_EXPOSURE_MASK,GDK_POINTER_MOTION_MASK,GDK_POINTER_MOTION_HINT_MASK,GDK_BUTTON_MOTION_MASK,GDK_BUTTON1_MOTION_MASK,GDK_BUTTON2_MOTION_MASK,GDK_BUTTON3_MOTION_MASK,GDK_BUTTON_PRESS_MASK,GDK_BUTTON_RELEASE_MASK,GDK_KEY_PRESS_MASK,GDK_KEY_RELEASE_MASK,GDK_ENTER_NOTIFY_MASK,GDK_LEAVE_NOTIFY_MASK,GDK_FOCUS_CHANGE_MASK,GDK_STRUCTURE_MASK,GDK_PROPERTY_CHANGE_MASK,GDK_VISIBILITY_NOTIFY_MASK,GDK_PROXIMITY_IN_MASK,GDK_PROXIMITY_OUT_MASK,GDK_SUBSTRUCTURE_MASK,GDK_ALL_EVENTS_MASK)
        = get_gdk_event_mask_ ()

    type gdk_notify_type = int
    val get_gdk_notify_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_notify_type")
    val (GDK_NOTIFY_ANCESTOR,GDK_NOTIFY_VIRTUAL,GDK_NOTIFY_INFERIOR,GDK_NOTIFY_NONLINEAR,GDK_NOTIFY_NONLINEAR_VIRTUAL,GDK_NOTIFY_UNKNOWN)
        = get_gdk_notify_type_ ()

    type gdk_crossing_mode = int
    val get_gdk_crossing_mode_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_crossing_mode")
    val (GDK_CROSSING_NORMAL,GDK_CROSSING_GRAB,GDK_CROSSING_UNGRAB)
        = get_gdk_crossing_mode_ ()

    type gdk_modifier_type = int
    val get_gdk_modifier_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_modifier_type")
    val (GDK_SHIFT_MASK,GDK_LOCK_MASK,GDK_CONTROL_MASK,GDK_MOD1_MASK,GDK_MOD2_MASK,GDK_MOD3_MASK,GDK_MOD4_MASK,GDK_MOD5_MASK,GDK_BUTTON1_MASK,GDK_BUTTON2_MASK,GDK_BUTTON3_MASK,GDK_BUTTON4_MASK,GDK_BUTTON5_MASK,GDK_RELEASE_MASK,GDK_MODIFIER_MASK)
        = get_gdk_modifier_type_ ()

    type gdk_subwindow_mode = int
    val get_gdk_subwindow_mode_: unit -> int * int
        = app1(symb"mgtk_get_gdk_subwindow_mode")
    val (GDK_CLIP_BY_CHILDREN,GDK_INCLUDE_INFERIORS)
        = get_gdk_subwindow_mode_ ()

    type gdk_input_condition = int
    val get_gdk_input_condition_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_input_condition")
    val (GDK_INPUT_READ,GDK_INPUT_WRITE,GDK_INPUT_EXCEPTION)
        = get_gdk_input_condition_ ()

    type gdk_status = int
    val get_gdk_status_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gdk_status")
    val (GDK_OK,GDK_ERROR,GDK_ERROR_PARAM,GDK_ERROR_FILE,GDK_ERROR_MEM)
        = get_gdk_status_ ()

    type gdk_byte_order = int
    val get_gdk_byte_order_: unit -> int * int
        = app1(symb"mgtk_get_gdk_byte_order")
    val (GDK_LSB_FIRST,GDK_MSB_FIRST)
        = get_gdk_byte_order_ ()

    type gdk_gc_values_mask = int
    val get_gdk_gc_values_mask_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_gc_values_mask")
    val (GDK_GC_FOREGROUND,GDK_GC_BACKGROUND,GDK_GC_FONT,GDK_GC_FUNCTION,GDK_GC_FILL,GDK_GC_TILE,GDK_GC_STIPPLE,GDK_GC_CLIP_MASK,GDK_GC_SUBWINDOW,GDK_GC_TS_X_ORIGIN,GDK_GC_TS_Y_ORIGIN,GDK_GC_CLIP_X_ORIGIN,GDK_GC_CLIP_Y_ORIGIN,GDK_GC_EXPOSURES,GDK_GC_LINE_WIDTH,GDK_GC_LINE_STYLE,GDK_GC_CAP_STYLE,GDK_GC_JOIN_STYLE)
        = get_gdk_gc_values_mask_ ()

    type gdk_selection = int
    val get_gdk_selection_: unit -> int * int
        = app1(symb"mgtk_get_gdk_selection")
    val (GDK_SELECTION_PRIMARY,GDK_SELECTION_SECONDARY)
        = get_gdk_selection_ ()

    type gdk_property_state = int
    val get_gdk_property_state_: unit -> int * int
        = app1(symb"mgtk_get_gdk_property_state")
    val (GDK_PROPERTY_NEW_VALUE,GDK_PROPERTY_DELETE)
        = get_gdk_property_state_ ()

    type gdk_prop_mode = int
    val get_gdk_prop_mode_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_prop_mode")
    val (GDK_PROP_MODE_REPLACE,GDK_PROP_MODE_PREPEND,GDK_PROP_MODE_APPEND)
        = get_gdk_prop_mode_ ()

    type gdk_input_source = int
    val get_gdk_input_source_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gdk_input_source")
    val (GDK_SOURCE_MOUSE,GDK_SOURCE_PEN,GDK_SOURCE_ERASER,GDK_SOURCE_CURSOR)
        = get_gdk_input_source_ ()

    type gdk_input_mode = int
    val get_gdk_input_mode_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_input_mode")
    val (GDK_MODE_DISABLED,GDK_MODE_SCREEN,GDK_MODE_WINDOW)
        = get_gdk_input_mode_ ()

    type gdk_axis_use = int
    val get_gdk_axis_use_: unit -> int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_axis_use")
    val (GDK_AXIS_IGNORE,GDK_AXIS_X,GDK_AXIS_Y,GDK_AXIS_PRESSURE,GDK_AXIS_XTILT,GDK_AXIS_YTILT,GDK_AXIS_LAST)
        = get_gdk_axis_use_ ()

    type gdk_target = int
    val get_gdk_target_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gdk_target")
    val (GDK_TARGET_BITMAP,GDK_TARGET_COLORMAP,GDK_TARGET_DRAWABLE,GDK_TARGET_PIXMAP,GDK_TARGET_STRING)
        = get_gdk_target_ ()

    type gdk_selection_type = int
    val get_gdk_selection_type_: unit -> int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_selection_type")
    val (GDK_SELECTION_TYPE_ATOM,GDK_SELECTION_TYPE_BITMAP,GDK_SELECTION_TYPE_COLORMAP,GDK_SELECTION_TYPE_DRAWABLE,GDK_SELECTION_TYPE_INTEGER,GDK_SELECTION_TYPE_PIXMAP,GDK_SELECTION_TYPE_WINDOW,GDK_SELECTION_TYPE_STRING)
        = get_gdk_selection_type_ ()

    type gdk_extension_mode = int
    val get_gdk_extension_mode_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_extension_mode")
    val (GDK_EXTENSION_EVENTS_NONE,GDK_EXTENSION_EVENTS_ALL,GDK_EXTENSION_EVENTS_CURSOR)
        = get_gdk_extension_mode_ ()

    type gdk_im_style = int
    val get_gdk_im_style_: unit -> int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_im_style")
    val (GDK_IM_PREEDIT_AREA,GDK_IM_PREEDIT_CALLBACKS,GDK_IM_PREEDIT_POSITION,GDK_IM_PREEDIT_NOTHING,GDK_IM_PREEDIT_NONE,GDK_IM_PREEDIT_MASK,GDK_IM_STATUS_AREA,GDK_IM_STATUS_CALLBACKS,GDK_IM_STATUS_NOTHING,GDK_IM_STATUS_NONE,GDK_IM_STATUS_MASK)
        = get_gdk_im_style_ ()

    type gdk_ic_attributes_type = int
    val get_gdk_ic_attributes_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_ic_attributes_type")
    val (GDK_IC_STYLE,GDK_IC_CLIENT_WINDOW,GDK_IC_FOCUS_WINDOW,GDK_IC_FILTER_EVENTS,GDK_IC_SPOT_LOCATION,GDK_IC_LINE_SPACING,GDK_IC_CURSOR,GDK_IC_PREEDIT_FONTSET,GDK_IC_PREEDIT_AREA,GDK_IC_PREEDIT_AREA_NEEDED,GDK_IC_PREEDIT_FOREGROUND,GDK_IC_PREEDIT_BACKGROUND,GDK_IC_PREEDIT_PIXMAP,GDK_IC_PREEDIT_COLORMAP,GDK_IC_STATUS_FONTSET,GDK_IC_STATUS_AREA,GDK_IC_STATUS_AREA_NEEDED,GDK_IC_STATUS_FOREGROUND,GDK_IC_STATUS_BACKGROUND,GDK_IC_STATUS_PIXMAP,GDK_IC_STATUS_COLORMAP,GDK_IC_ALL_REQ,GDK_IC_PREEDIT_AREA_REQ,GDK_IC_PREEDIT_POSITION_REQ)
        = get_gdk_ic_attributes_type_ ()

    type gdk_wm_decoration = int
    val get_gdk_wm_decoration_: unit -> int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_wm_decoration")
    val (GDK_DECOR_ALL,GDK_DECOR_BORDER,GDK_DECOR_RESIZEH,GDK_DECOR_TITLE,GDK_DECOR_MENU,GDK_DECOR_MINIMIZE,GDK_DECOR_MAXIMIZE)
        = get_gdk_wm_decoration_ ()

    type gdk_wm_function = int
    val get_gdk_wm_function_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_wm_function")
    val (GDK_FUNC_ALL,GDK_FUNC_RESIZE,GDK_FUNC_MOVE,GDK_FUNC_MINIMIZE,GDK_FUNC_MAXIMIZE,GDK_FUNC_CLOSE)
        = get_gdk_wm_function_ ()

    type gdk_color_context_mode = int
    val get_gdk_color_context_mode_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_color_context_mode")
    val (GDK_CC_MODE_UNDEFINED,GDK_CC_MODE_BW,GDK_CC_MODE_STD_CMAP,GDK_CC_MODE_TRUE,GDK_CC_MODE_MY_GRAY,GDK_CC_MODE_PALETTE)
        = get_gdk_color_context_mode_ ()

    type gdk_overlap_type = int
    val get_gdk_overlap_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_overlap_type")
    val (GDK_OVERLAP_RECTANGLE_IN,GDK_OVERLAP_RECTANGLE_OUT,GDK_OVERLAP_RECTANGLE_PART)
        = get_gdk_overlap_type_ ()

    type gdk_drag_action = int
    val get_gdk_drag_action_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gdk_drag_action")
    val (GDK_ACTION_DEFAULT,GDK_ACTION_COPY,GDK_ACTION_MOVE,GDK_ACTION_LINK,GDK_ACTION_PRIVATE,GDK_ACTION_ASK)
        = get_gdk_drag_action_ ()

    type gdk_drag_protocol = int
    val get_gdk_drag_protocol_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_drag_protocol")
    val (GDK_DRAG_PROTO_MOTIF,GDK_DRAG_PROTO_XDND,GDK_DRAG_PROTO_ROOTWIN)
        = get_gdk_drag_protocol_ ()

    type gdk_rgb_dither = int
    val get_gdk_rgb_dither_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_rgb_dither")
    val (GDK_RGB_DITHER_NONE,GDK_RGB_DITHER_NORMAL,GDK_RGB_DITHER_MAX)
        = get_gdk_rgb_dither_ ()

    type gdk_drag_context = gpointer

    type gdk_colormap = gpointer

    type gdk_font = gpointer

    type gdk_window = gpointer

    type gdk_pixmap = gpointer

    type gdk_bitmap = gpointer

    type gdk_drawable = gpointer

    type gdk_event = gpointer

    type gdk_color = gpointer

    type gdk_gc = gpointer

    val gdk_beep_: unit -> unit
        = app1(symb"mgtk_gdk_beep")
    val gdk_beep: unit -> unit
        = fn dummy => gdk_beep_ dummy

    val gdk_font_load_: string -> gdk_font
        = app1(symb"mgtk_gdk_font_load")
    val gdk_font_load: string -> gdk_font
        = fn name => gdk_font_load_ name

    val gdk_fontset_load_: string -> gdk_font
        = app1(symb"mgtk_gdk_fontset_load")
    val gdk_fontset_load: string -> gdk_font
        = fn name => gdk_fontset_load_ name

    val gdk_color_alloc_: gdk_colormap -> gdk_color -> bool
        = app2(symb"mgtk_gdk_color_alloc")
    val gdk_color_alloc: gdk_colormap -> gdk_color -> bool
        = fn colormap => fn color => gdk_color_alloc_ colormap color

    val gdk_color_black_: gdk_colormap -> gdk_color -> bool
        = app2(symb"mgtk_gdk_color_black")
    val gdk_color_black: gdk_colormap -> gdk_color -> bool
        = fn colormap => fn color => gdk_color_black_ colormap color

    val gdk_color_change_: gdk_colormap -> gdk_color -> bool
        = app2(symb"mgtk_gdk_color_change")
    val gdk_color_change: gdk_colormap -> gdk_color -> bool
        = fn colormap => fn color => gdk_color_change_ colormap color

    val gdk_color_parse_: string -> bool * gdk_color
        = app1(symb"mgtk_gdk_color_parse")
    val gdk_color_parse: string -> bool * gdk_color
        = fn spec => gdk_color_parse_ spec

    val gdk_color_white_: gdk_colormap -> gdk_color -> bool
        = app2(symb"mgtk_gdk_color_white")
    val gdk_color_white: gdk_colormap -> gdk_color -> bool
        = fn colormap => fn color => gdk_color_white_ colormap color

    val gdk_colormap_alloc_color_: gdk_colormap -> gdk_color -> bool -> bool -> bool
        = app4(symb"mgtk_gdk_colormap_alloc_color")
    val gdk_colormap_alloc_color: gdk_colormap -> gdk_color -> bool -> bool -> bool
        = fn colormap => fn color => fn writeable => fn best_match => gdk_colormap_alloc_color_ colormap color writeable best_match

    val gdk_colormap_change_: gdk_colormap -> int -> unit
        = app2(symb"mgtk_gdk_colormap_change")
    val gdk_colormap_change: gdk_colormap -> int -> unit
        = fn colormap => fn ncolors => gdk_colormap_change_ colormap ncolors

    val gdk_colormap_free_colors_: gdk_colormap -> gdk_color -> int -> unit
        = app3(symb"mgtk_gdk_colormap_free_colors")
    val gdk_colormap_free_colors: gdk_colormap -> gdk_color -> int -> unit
        = fn colormap => fn colors => fn ncolors => gdk_colormap_free_colors_ colormap colors ncolors

    val gdk_colormap_get_system_: unit -> gdk_colormap
        = app1(symb"mgtk_gdk_colormap_get_system")
    val gdk_colormap_get_system: unit -> gdk_colormap
        = fn dummy => gdk_colormap_get_system_ dummy

    val gdk_colormap_get_system_size_: unit -> int
        = app1(symb"mgtk_gdk_colormap_get_system_size")
    val gdk_colormap_get_system_size: unit -> int
        = fn dummy => gdk_colormap_get_system_size_ dummy

    val gdk_gc_set_foreground_: gdk_gc -> gdk_color -> unit
        = app2(symb"mgtk_gdk_gc_set_foreground")
    val gdk_gc_set_foreground: gdk_gc -> gdk_color -> unit
        = fn gc => fn color => gdk_gc_set_foreground_ gc color

    val gdk_gc_set_background_: gdk_gc -> gdk_color -> unit
        = app2(symb"mgtk_gdk_gc_set_background")
    val gdk_gc_set_background: gdk_gc -> gdk_color -> unit
        = fn gc => fn color => gdk_gc_set_background_ gc color

    val gdk_gc_set_font_: gdk_gc -> gdk_font -> unit
        = app2(symb"mgtk_gdk_gc_set_font")
    val gdk_gc_set_font: gdk_gc -> gdk_font -> unit
        = fn gc => fn font => gdk_gc_set_font_ gc font

    val gdk_window_clear_area_: gdk_drawable -> int -> int -> int -> int -> unit
        = app5(symb"mgtk_gdk_window_clear_area")
    val gdk_window_clear_area: gdk_drawable -> int -> int -> int -> int -> unit
        = fn drawable => fn x1 => fn y1 => fn x2 => fn y2 => gdk_window_clear_area_ drawable x1 y1 x2 y2

    val gdk_draw_point_: gdk_drawable -> gdk_gc -> int -> int -> unit
        = app4(symb"mgtk_gdk_draw_point")
    val gdk_draw_point: gdk_drawable -> gdk_gc -> int -> int -> unit
        = fn drawable => fn gc => fn x => fn y => gdk_draw_point_ drawable gc x y

    val gdk_draw_line_: gdk_drawable * gdk_gc * int * int * int * int -> unit
        = app1(symb"mgtk_gdk_draw_line")
    val gdk_draw_line: gdk_drawable -> gdk_gc -> int -> int -> int -> int -> unit
        = fn drawable => fn gc => fn x1 => fn y1 => fn x2 => fn y2 => gdk_draw_line_ (drawable, gc, x1, y1, x2, y2)

    val gdk_draw_rectangle_: gdk_drawable * gdk_gc * bool * int * int * int * int -> unit
        = app1(symb"mgtk_gdk_draw_rectangle")
    val gdk_draw_rectangle: gdk_drawable -> gdk_gc -> bool -> int -> int -> int -> int -> unit
        = fn drawable => fn gc => fn filled => fn x => fn y => fn width => fn height => gdk_draw_rectangle_ (drawable, gc, filled, x, y, width, height)

    val gdk_draw_arc_: gdk_drawable * gdk_gc * bool * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gdk_draw_arc")
    val gdk_draw_arc: gdk_drawable -> gdk_gc -> bool -> int -> int -> int -> int -> int -> int -> unit
        = fn drawable => fn gc => fn filled => fn x => fn y => fn width => fn height => fn angle1 => fn angle2 => gdk_draw_arc_ (drawable, gc, filled, x, y, width, height, angle1, angle2)

    val gdk_draw_string_: gdk_drawable * gdk_font * gdk_gc * int * int * string -> unit
        = app1(symb"mgtk_gdk_draw_string")
    val gdk_draw_string: gdk_drawable -> gdk_font -> gdk_gc -> int -> int -> string -> unit
        = fn drawable => fn font => fn gc => fn x => fn y => fn str => gdk_draw_string_ (drawable, font, gc, x, y, str)

    val gdk_draw_text_: gdk_drawable * gdk_font * gdk_gc * int * int * string * int -> unit
        = app1(symb"mgtk_gdk_draw_text")
    val gdk_draw_text: gdk_drawable -> gdk_font -> gdk_gc -> int -> int -> string -> int -> unit
        = fn drawable => fn font => fn gc => fn x => fn y => fn text => fn text_length => gdk_draw_text_ (drawable, font, gc, x, y, text, text_length)

    val gdk_draw_pixmap_: gdk_drawable * gdk_gc * gdk_drawable * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gdk_draw_pixmap")
    val gdk_draw_pixmap: gdk_drawable -> gdk_gc -> gdk_drawable -> int -> int -> int -> int -> int -> int -> unit
        = fn drawable => fn gc => fn src => fn xsrc => fn ysrc => fn xdest => fn ydest => fn width => fn height => gdk_draw_pixmap_ (drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height)

    val gdk_screen_width_: unit -> int
        = app1(symb"mgtk_gdk_screen_width")
    val gdk_screen_width: unit -> int
        = fn dummy => gdk_screen_width_ dummy

    val gdk_screen_height_: unit -> int
        = app1(symb"mgtk_gdk_screen_height")
    val gdk_screen_height: unit -> int
        = fn dummy => gdk_screen_height_ dummy

    val gdk_screen_width_mm_: unit -> int
        = app1(symb"mgtk_gdk_screen_width_mm")
    val gdk_screen_width_mm: unit -> int
        = fn dummy => gdk_screen_width_mm_ dummy

    val gdk_screen_height_mm_: unit -> int
        = app1(symb"mgtk_gdk_screen_height_mm")
    val gdk_screen_height_mm: unit -> int
        = fn dummy => gdk_screen_height_mm_ dummy

    val gdk_drag_status_: gdk_drag_context -> int -> word -> unit
        = app3(symb"mgtk_gdk_drag_status")
    val gdk_drag_status: gdk_drag_context -> gdk_drag_action list -> word -> unit
        = fn context => fn action => fn time => gdk_drag_status_ context (setFlags action) time

    val check_version_: word -> word -> word -> string
        = app3(symb"mgtk_gtk_check_version")
    val check_version: word -> word -> word -> string
        = fn required_major => fn required_minor => fn required_micro => check_version_ required_major required_minor required_micro

    val exit_: int -> unit
        = app1(symb"mgtk_gtk_exit")
    val exit: int -> unit
        = fn error_code => exit_ error_code

    type gtk_accel_flags = int
    val get_gtk_accel_flags_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_accel_flags")
    val (ACCEL_VISIBLE,ACCEL_SIGNAL_VISIBLE,ACCEL_LOCKED,ACCEL_MASK)
        = get_gtk_accel_flags_ ()

    type gtk_calendar_display_options = int
    val get_gtk_calendar_display_options_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_calendar_display_options")
    val (CALENDAR_SHOW_HEADING,CALENDAR_SHOW_DAY_NAMES,CALENDAR_NO_MONTH_CHANGE,CALENDAR_SHOW_WEEK_NUMBERS,CALENDAR_WEEK_START_MONDAY)
        = get_gtk_calendar_display_options_ ()

    type gtk_cell_type = int
    val get_gtk_cell_type_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_cell_type")
    val (CELL_EMPTY,CELL_TEXT,CELL_PIXMAP,CELL_PIXTEXT,CELL_WIDGET)
        = get_gtk_cell_type_ ()

    type gtk_clist_drag_pos = int
    val get_gtk_clist_drag_pos_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_clist_drag_pos")
    val (CLIST_DRAG_NONE,CLIST_DRAG_BEFORE,CLIST_DRAG_INTO,CLIST_DRAG_AFTER)
        = get_gtk_clist_drag_pos_ ()

    type gtk_button_action = int
    val get_gtk_button_action_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_button_action")
    val (BUTTON_IGNORED,BUTTON_SELECTS,BUTTON_DRAGS,BUTTON_EXPANDS)
        = get_gtk_button_action_ ()

    type gtk_ctree_pos = int
    val get_gtk_ctree_pos_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_ctree_pos")
    val (CTREE_POS_BEFORE,CTREE_POS_AS_CHILD,CTREE_POS_AFTER)
        = get_gtk_ctree_pos_ ()

    type gtk_ctree_line_style = int
    val get_gtk_ctree_line_style_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_ctree_line_style")
    val (CTREE_LINES_NONE,CTREE_LINES_SOLID,CTREE_LINES_DOTTED,CTREE_LINES_TABBED)
        = get_gtk_ctree_line_style_ ()

    type gtk_ctree_expander_style = int
    val get_gtk_ctree_expander_style_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_ctree_expander_style")
    val (CTREE_EXPANDER_NONE,CTREE_EXPANDER_SQUARE,CTREE_EXPANDER_TRIANGLE,CTREE_EXPANDER_CIRCULAR)
        = get_gtk_ctree_expander_style_ ()

    type gtk_ctree_expansion_type = int
    val get_gtk_ctree_expansion_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_ctree_expansion_type")
    val (CTREE_EXPANSION_EXPAND,CTREE_EXPANSION_EXPAND_RECURSIVE,CTREE_EXPANSION_COLLAPSE,CTREE_EXPANSION_COLLAPSE_RECURSIVE,CTREE_EXPANSION_TOGGLE,CTREE_EXPANSION_TOGGLE_RECURSIVE)
        = get_gtk_ctree_expansion_type_ ()

    type gtk_debug_flag = int
    val get_gtk_debug_flag_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_debug_flag")
    val (DEBUG_OBJECTS,DEBUG_MISC,DEBUG_SIGNALS,DEBUG_DND)
        = get_gtk_debug_flag_ ()

    type gtk_dest_defaults = int
    val get_gtk_dest_defaults_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_dest_defaults")
    val (DEST_DEFAULT_MOTION,DEST_DEFAULT_HIGHLIGHT,DEST_DEFAULT_DROP,DEST_DEFAULT_ALL)
        = get_gtk_dest_defaults_ ()

    type gtk_target_flags = int
    val get_gtk_target_flags_: unit -> int * int
        = app1(symb"mgtk_get_gtk_target_flags")
    val (TARGET_SAME_APP,TARGET_SAME_WIDGET)
        = get_gtk_target_flags_ ()

    type gtk_arrow_type = int
    val get_gtk_arrow_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_arrow_type")
    val (ARROW_UP,ARROW_DOWN,ARROW_LEFT,ARROW_RIGHT)
        = get_gtk_arrow_type_ ()

    type gtk_attach_options = int
    val get_gtk_attach_options_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_attach_options")
    val (EXPAND,SHRINK,FILL)
        = get_gtk_attach_options_ ()

    type gtk_button_box_style = int
    val get_gtk_button_box_style_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_button_box_style")
    val (BUTTONBOX_DEFAULT_STYLE,BUTTONBOX_SPREAD,BUTTONBOX_EDGE,BUTTONBOX_START,BUTTONBOX_END)
        = get_gtk_button_box_style_ ()

    type gtk_curve_type = int
    val get_gtk_curve_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_curve_type")
    val (CURVE_TYPE_LINEAR,CURVE_TYPE_SPLINE,CURVE_TYPE_FREE)
        = get_gtk_curve_type_ ()

    type gtk_direction_type = int
    val get_gtk_direction_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_direction_type")
    val (DIR_TAB_FORWARD,DIR_TAB_BACKWARD,DIR_UP,DIR_DOWN,DIR_LEFT,DIR_RIGHT)
        = get_gtk_direction_type_ ()

    type gtk_justification = int
    val get_gtk_justification_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_justification")
    val (JUSTIFY_LEFT,JUSTIFY_RIGHT,JUSTIFY_CENTER,JUSTIFY_FILL)
        = get_gtk_justification_ ()

    type gtk_match_type = int
    val get_gtk_match_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_match_type")
    val (MATCH_ALL,MATCH_ALL_TAIL,MATCH_HEAD,MATCH_TAIL,MATCH_EXACT,MATCH_LAST)
        = get_gtk_match_type_ ()

    type gtk_menu_direction_type = int
    val get_gtk_menu_direction_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_menu_direction_type")
    val (MENU_DIR_PARENT,MENU_DIR_CHILD,MENU_DIR_NEXT,MENU_DIR_PREV)
        = get_gtk_menu_direction_type_ ()

    type gtk_menu_factory_type = int
    val get_gtk_menu_factory_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_menu_factory_type")
    val (MENU_FACTORY_MENU,MENU_FACTORY_MENU_BAR,MENU_FACTORY_OPTION_MENU)
        = get_gtk_menu_factory_type_ ()

    type gtk_metric_type = int
    val get_gtk_metric_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_metric_type")
    val (PIXELS,INCHES,CENTIMETERS)
        = get_gtk_metric_type_ ()

    type gtk_orientation = int
    val get_gtk_orientation_: unit -> int * int
        = app1(symb"mgtk_get_gtk_orientation")
    val (ORIENTATION_HORIZONTAL,ORIENTATION_VERTICAL)
        = get_gtk_orientation_ ()

    type gtk_corner_type = int
    val get_gtk_corner_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_corner_type")
    val (CORNER_TOP_LEFT,CORNER_BOTTOM_LEFT,CORNER_TOP_RIGHT,CORNER_BOTTOM_RIGHT)
        = get_gtk_corner_type_ ()

    type gtk_pack_type = int
    val get_gtk_pack_type_: unit -> int * int
        = app1(symb"mgtk_get_gtk_pack_type")
    val (PACK_START,PACK_END)
        = get_gtk_pack_type_ ()

    type gtk_path_priority_type = int
    val get_gtk_path_priority_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_path_priority_type")
    val (PATH_PRIO_LOWEST,PATH_PRIO_GTK,PATH_PRIO_APPLICATION,PATH_PRIO_RC,PATH_PRIO_HIGHEST,PATH_PRIO_MASK)
        = get_gtk_path_priority_type_ ()

    type gtk_path_type = int
    val get_gtk_path_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_path_type")
    val (PATH_WIDGET,PATH_WIDGET_CLASS,PATH_CLASS)
        = get_gtk_path_type_ ()

    type gtk_policy_type = int
    val get_gtk_policy_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_policy_type")
    val (POLICY_ALWAYS,POLICY_AUTOMATIC,POLICY_NEVER)
        = get_gtk_policy_type_ ()

    type gtk_position_type = int
    val get_gtk_position_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_position_type")
    val (POS_LEFT,POS_RIGHT,POS_TOP,POS_BOTTOM)
        = get_gtk_position_type_ ()

    type gtk_preview_type = int
    val get_gtk_preview_type_: unit -> int * int
        = app1(symb"mgtk_get_gtk_preview_type")
    val (PREVIEW_COLOR,PREVIEW_GRAYSCALE)
        = get_gtk_preview_type_ ()

    type gtk_relief_style = int
    val get_gtk_relief_style_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_relief_style")
    val (RELIEF_NORMAL,RELIEF_HALF,RELIEF_NONE)
        = get_gtk_relief_style_ ()

    type gtk_resize_mode = int
    val get_gtk_resize_mode_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_resize_mode")
    val (RESIZE_PARENT,RESIZE_QUEUE,RESIZE_IMMEDIATE)
        = get_gtk_resize_mode_ ()

    type gtk_signal_run_type = int
    val get_gtk_signal_run_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_signal_run_type")
    val (RUN_FIRST,RUN_LAST,RUN_BOTH,RUN_NO_RECURSE,RUN_ACTION,RUN_NO_HOOKS)
        = get_gtk_signal_run_type_ ()

    type gtk_scroll_type = int
    val get_gtk_scroll_type_: unit -> int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_scroll_type")
    val (SCROLL_NONE,SCROLL_STEP_BACKWARD,SCROLL_STEP_FORWARD,SCROLL_PAGE_BACKWARD,SCROLL_PAGE_FORWARD,SCROLL_JUMP)
        = get_gtk_scroll_type_ ()

    type gtk_selection_mode = int
    val get_gtk_selection_mode_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_selection_mode")
    val (SELECTION_SINGLE,SELECTION_BROWSE,SELECTION_MULTIPLE,SELECTION_EXTENDED)
        = get_gtk_selection_mode_ ()

    type gtk_shadow_type = int
    val get_gtk_shadow_type_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_shadow_type")
    val (SHADOW_NONE,SHADOW_IN,SHADOW_OUT,SHADOW_ETCHED_IN,SHADOW_ETCHED_OUT)
        = get_gtk_shadow_type_ ()

    type gtk_state_type = int
    val get_gtk_state_type_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_state_type")
    val (STATE_NORMAL,STATE_ACTIVE,STATE_PRELIGHT,STATE_SELECTED,STATE_INSENSITIVE)
        = get_gtk_state_type_ ()

    type gtk_submenu_direction = int
    val get_gtk_submenu_direction_: unit -> int * int
        = app1(symb"mgtk_get_gtk_submenu_direction")
    val (DIRECTION_LEFT,DIRECTION_RIGHT)
        = get_gtk_submenu_direction_ ()

    type gtk_submenu_placement = int
    val get_gtk_submenu_placement_: unit -> int * int
        = app1(symb"mgtk_get_gtk_submenu_placement")
    val (TOP_BOTTOM,LEFT_RIGHT)
        = get_gtk_submenu_placement_ ()

    type gtk_toolbar_style = int
    val get_gtk_toolbar_style_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_toolbar_style")
    val (TOOLBAR_ICONS,TOOLBAR_TEXT,TOOLBAR_BOTH)
        = get_gtk_toolbar_style_ ()

    type gtk_trough_type = int
    val get_gtk_trough_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_trough_type")
    val (TROUGH_NONE,TROUGH_START,TROUGH_END,TROUGH_JUMP)
        = get_gtk_trough_type_ ()

    type gtk_update_type = int
    val get_gtk_update_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_update_type")
    val (UPDATE_CONTINUOUS,UPDATE_DISCONTINUOUS,UPDATE_DELAYED)
        = get_gtk_update_type_ ()

    type gtk_visibility = int
    val get_gtk_visibility_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_visibility")
    val (VISIBILITY_NONE,VISIBILITY_PARTIAL,VISIBILITY_FULL)
        = get_gtk_visibility_ ()

    type gtk_window_position = int
    val get_gtk_window_position_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_window_position")
    val (WIN_POS_NONE,WIN_POS_CENTER,WIN_POS_MOUSE)
        = get_gtk_window_position_ ()

    type gtk_window_type = int
    val get_gtk_window_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_window_type")
    val (WINDOW_TOPLEVEL,WINDOW_DIALOG,WINDOW_POPUP)
        = get_gtk_window_type_ ()

    type gtk_sort_type = int
    val get_gtk_sort_type_: unit -> int * int
        = app1(symb"mgtk_get_gtk_sort_type")
    val (SORT_ASCENDING,SORT_DESCENDING)
        = get_gtk_sort_type_ ()

    type gtk_font_metric_type = int
    val get_gtk_font_metric_type_: unit -> int * int
        = app1(symb"mgtk_get_gtk_font_metric_type")
    val (FONT_METRIC_PIXELS,FONT_METRIC_POINTS)
        = get_gtk_font_metric_type_ ()

    type gtk_font_type = int
    val get_gtk_font_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_font_type")
    val (FONT_BITMAP,FONT_SCALABLE,FONT_SCALABLE_BITMAP,FONT_ALL)
        = get_gtk_font_type_ ()

    type gtk_font_filter_type = int
    val get_gtk_font_filter_type_: unit -> int * int
        = app1(symb"mgtk_get_gtk_font_filter_type")
    val (FONT_FILTER_BASE,FONT_FILTER_USER)
        = get_gtk_font_filter_type_ ()

    type gtk_object_flags = int
    val get_gtk_object_flags_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_object_flags")
    val (DESTROYED,FLOATING,CONNECTED,CONSTRUCTED)
        = get_gtk_object_flags_ ()

    type gtk_arg_flags = int
    val get_gtk_arg_flags_: unit -> int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_arg_flags")
    val (ARG_READABLE,ARG_WRITABLE,ARG_CONSTRUCT,ARG_CONSTRUCT_ONLY,ARG_CHILD_ARG,ARG_MASK,ARG_READWRITE)
        = get_gtk_arg_flags_ ()

    type gtk_packer_options = int
    val get_gtk_packer_options_: unit -> int * int * int
        = app1(symb"mgtk_get_gtk_packer_options")
    val (PACK_EXPAND,FILL_X,FILL_Y)
        = get_gtk_packer_options_ ()

    type gtk_side_type = int
    val get_gtk_side_type_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_side_type")
    val (SIDE_TOP,SIDE_BOTTOM,SIDE_LEFT,SIDE_RIGHT)
        = get_gtk_side_type_ ()

    type gtk_anchor_type = int
    val get_gtk_anchor_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_anchor_type")
    val (ANCHOR_CENTER,ANCHOR_NORTH,ANCHOR_NORTH_WEST,ANCHOR_NORTH_EAST,ANCHOR_SOUTH,ANCHOR_SOUTH_WEST,ANCHOR_SOUTH_EAST,ANCHOR_WEST,ANCHOR_EAST,ANCHOR_N,ANCHOR_NW,ANCHOR_NE,ANCHOR_S,ANCHOR_SW,ANCHOR_SE,ANCHOR_W,ANCHOR_E)
        = get_gtk_anchor_type_ ()

    type gtk_progress_bar_style = int
    val get_gtk_progress_bar_style_: unit -> int * int
        = app1(symb"mgtk_get_gtk_progress_bar_style")
    val (PROGRESS_CONTINUOUS,PROGRESS_DISCRETE)
        = get_gtk_progress_bar_style_ ()

    type gtk_progress_bar_orientation = int
    val get_gtk_progress_bar_orientation_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_progress_bar_orientation")
    val (PROGRESS_LEFT_TO_RIGHT,PROGRESS_RIGHT_TO_LEFT,PROGRESS_BOTTOM_TO_TOP,PROGRESS_TOP_TO_BOTTOM)
        = get_gtk_progress_bar_orientation_ ()

    type gtk_rc_flags = int
    val get_gtk_rc_flags_: unit -> int * int * int * int
        = app1(symb"mgtk_get_gtk_rc_flags")
    val (RC_FG,RC_BG,RC_TEXT,RC_BASE)
        = get_gtk_rc_flags_ ()

    type gtk_rc_token_type = int
    val get_gtk_rc_token_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_rc_token_type")
    val (RC_TOKEN_INVALID,RC_TOKEN_INCLUDE,RC_TOKEN_NORMAL,RC_TOKEN_ACTIVE,RC_TOKEN_PRELIGHT,RC_TOKEN_SELECTED,RC_TOKEN_INSENSITIVE,RC_TOKEN_FG,RC_TOKEN_BG,RC_TOKEN_BASE,RC_TOKEN_TEXT,RC_TOKEN_FONT,RC_TOKEN_FONTSET,RC_TOKEN_BG_PIXMAP,RC_TOKEN_PIXMAP_PATH,RC_TOKEN_STYLE,RC_TOKEN_BINDING,RC_TOKEN_BIND,RC_TOKEN_WIDGET,RC_TOKEN_WIDGET_CLASS,RC_TOKEN_CLASS,RC_TOKEN_LOWEST,RC_TOKEN_GTK,RC_TOKEN_APPLICATION,RC_TOKEN_RC,RC_TOKEN_HIGHEST,RC_TOKEN_ENGINE,RC_TOKEN_MODULE_PATH,RC_TOKEN_LAST)
        = get_gtk_rc_token_type_ ()

    type gtk_spin_button_update_policy = int
    val get_gtk_spin_button_update_policy_: unit -> int * int
        = app1(symb"mgtk_get_gtk_spin_button_update_policy")
    val (UPDATE_ALWAYS,UPDATE_IF_VALID)
        = get_gtk_spin_button_update_policy_ ()

    type gtk_spin_type = int
    val get_gtk_spin_type_: unit -> int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_spin_type")
    val (SPIN_STEP_FORWARD,SPIN_STEP_BACKWARD,SPIN_PAGE_FORWARD,SPIN_PAGE_BACKWARD,SPIN_HOME,SPIN_END,SPIN_USER_DEFINED)
        = get_gtk_spin_type_ ()

    type gtk_toolbar_child_type = int
    val get_gtk_toolbar_child_type_: unit -> int * int * int * int * int
        = app1(symb"mgtk_get_gtk_toolbar_child_type")
    val (TOOLBAR_CHILD_SPACE,TOOLBAR_CHILD_BUTTON,TOOLBAR_CHILD_TOGGLEBUTTON,TOOLBAR_CHILD_RADIOBUTTON,TOOLBAR_CHILD_WIDGET)
        = get_gtk_toolbar_child_type_ ()

    type gtk_toolbar_space_style = int
    val get_gtk_toolbar_space_style_: unit -> int * int
        = app1(symb"mgtk_get_gtk_toolbar_space_style")
    val (TOOLBAR_SPACE_EMPTY,TOOLBAR_SPACE_LINE)
        = get_gtk_toolbar_space_style_ ()

    type gtk_tree_view_mode = int
    val get_gtk_tree_view_mode_: unit -> int * int
        = app1(symb"mgtk_get_gtk_tree_view_mode")
    val (TREE_VIEW_LINE,TREE_VIEW_ITEM)
        = get_gtk_tree_view_mode_ ()

    type gtk_fundamental_type = int
    val get_gtk_fundamental_type_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_fundamental_type")
    val (TYPE_INVALID,TYPE_NONE,TYPE_CHAR,TYPE_UCHAR,TYPE_BOOL,TYPE_INT,TYPE_UINT,TYPE_LONG,TYPE_ULONG,TYPE_FLOAT,TYPE_DOUBLE,TYPE_STRING,TYPE_ENUM,TYPE_FLAGS,TYPE_BOXED,TYPE_POINTER,TYPE_SIGNAL,TYPE_ARGS,TYPE_CALLBACK,TYPE_C_CALLBACK,TYPE_FOREIGN,TYPE_OBJECT)
        = get_gtk_fundamental_type_ ()

    type gtk_widget_flags = int
    val get_gtk_widget_flags_: unit -> int * int * int * int * int * int * int * int * int * int * int * int * int * int * int * int
        = app1(symb"mgtk_get_gtk_widget_flags")
    val (TOPLEVEL,NO_WINDOW,REALIZED,MAPPED,VISIBLE,SENSITIVE,PARENT_SENSITIVE,CAN_FOCUS,HAS_FOCUS,CAN_DEFAULT,HAS_DEFAULT,HAS_GRAB,RC_STYLE,COMPOSITE_CHILD,NO_REPARENT,APP_PAINTABLE)
        = get_gtk_widget_flags_ ()

    type gtk_accel_group = gpointer

    type gtk_style = gpointer

    type gtk_selection_data = gpointer

    val draw_arrow_: gtk_style * gdk_window * int * int * int * bool * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_arrow")
    val draw_arrow: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> gtk_arrow_type -> bool -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn arrow_type => fn fill => fn x => fn y => fn width => fn height => draw_arrow_ (style, window, state_type, shadow_type, arrow_type, fill, x, y, width, height)

    val draw_box_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_box")
    val draw_box: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_box_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_box_gap_: gtk_style * gdk_window * int * int * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_box_gap")
    val draw_box_gap: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => fn gap_side => fn gap_x => fn gap_width => draw_box_gap_ (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)

    val draw_check_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_check")
    val draw_check: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_check_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_cross_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_cross")
    val draw_cross: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_cross_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_diamond_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_diamond")
    val draw_diamond: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_diamond_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_extension_: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_extension")
    val draw_extension: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => fn gap_side => draw_extension_ (style, window, state_type, shadow_type, x, y, width, height, gap_side)

    val draw_flat_box_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_flat_box")
    val draw_flat_box: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_flat_box_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_focus_: gtk_style * gdk_window * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_focus")
    val draw_focus: gtk_style -> gdk_window -> int -> int -> int -> int -> unit
        = fn style => fn window => fn x => fn y => fn width => fn height => draw_focus_ (style, window, x, y, width, height)

    val draw_handle_: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_handle")
    val draw_handle: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_orientation -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => fn orientation => draw_handle_ (style, window, state_type, shadow_type, x, y, width, height, orientation)

    val draw_hline_: gtk_style * gdk_window * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_hline")
    val draw_hline: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn x1 => fn x2 => fn y => draw_hline_ (style, window, state_type, x1, x2, y)

    val draw_option_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_option")
    val draw_option: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_option_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_oval_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_oval")
    val draw_oval: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_oval_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_ramp_: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_ramp")
    val draw_ramp: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> gtk_arrow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn arrow_type => fn x => fn y => fn width => fn height => draw_ramp_ (style, window, state_type, shadow_type, arrow_type, x, y, width, height)

    val draw_shadow_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_shadow")
    val draw_shadow: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_shadow_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_shadow_gap_: gtk_style * gdk_window * int * int * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_shadow_gap")
    val draw_shadow_gap: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_position_type -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => fn gap_side => fn gap_x => fn gap_width => draw_shadow_gap_ (style, window, state_type, shadow_type, x, y, width, height, gap_side, gap_x, gap_width)

    val draw_slider_: gtk_style * gdk_window * int * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_slider")
    val draw_slider: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> gtk_orientation -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => fn orientation => draw_slider_ (style, window, state_type, shadow_type, x, y, width, height, orientation)

    val draw_string_: gtk_style * gdk_window * int * int * int * string -> unit
        = app1(symb"mgtk_gtk_draw_string")
    val draw_string: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> string -> unit
        = fn style => fn window => fn state_type => fn x => fn y => fn string => draw_string_ (style, window, state_type, x, y, string)

    val draw_tab_: gtk_style * gdk_window * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_tab")
    val draw_tab: gtk_style -> gdk_window -> gtk_state_type -> gtk_shadow_type -> int -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn shadow_type => fn x => fn y => fn width => fn height => draw_tab_ (style, window, state_type, shadow_type, x, y, width, height)

    val draw_vline_: gtk_style * gdk_window * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_draw_vline")
    val draw_vline: gtk_style -> gdk_window -> gtk_state_type -> int -> int -> int -> unit
        = fn style => fn window => fn state_type => fn y1 => fn y2 => fn x => draw_vline_ (style, window, state_type, y1, y2, x)

    val grab_add_: gtkobj -> unit
        = app1(symb"mgtk_gtk_grab_add")
    val grab_add: 'a GtkWidget -> unit
        = fn OBJ widget => grab_add_ widget

    val grab_get_current_: unit -> gtkobj
        = app1(symb"mgtk_gtk_grab_get_current")
    val grab_get_current: unit -> base GtkWidget
        = fn dummy => OBJ(grab_get_current_ dummy)

    val grab_remove_: gtkobj -> unit
        = app1(symb"mgtk_gtk_grab_remove")
    val grab_remove: 'a GtkWidget -> unit
        = fn OBJ widget => grab_remove_ widget

    val drag_finish_: gdk_drag_context -> bool -> bool -> word -> unit
        = app4(symb"mgtk_gtk_drag_finish")
    val drag_finish: gdk_drag_context -> bool -> bool -> word -> unit
        = fn context => fn success => fn del => fn time => drag_finish_ context success del time

    val drag_get_source_widget_: gdk_drag_context -> gtkobj
        = app1(symb"mgtk_gtk_drag_get_source_widget")
    val drag_get_source_widget: gdk_drag_context -> base GtkWidget
        = fn context => OBJ(drag_get_source_widget_ context)

    val drag_highlight_: gtkobj -> unit
        = app1(symb"mgtk_gtk_drag_highlight")
    val drag_highlight: 'a GtkWidget -> unit
        = fn OBJ widget => drag_highlight_ widget

    val drag_unhighlight_: gtkobj -> unit
        = app1(symb"mgtk_gtk_drag_unhighlight")
    val drag_unhighlight: 'a GtkWidget -> unit
        = fn OBJ widget => drag_unhighlight_ widget

    val drag_dest_set_proxy_: gtkobj -> gdk_window -> int -> bool -> unit
        = app4(symb"mgtk_gtk_drag_dest_set_proxy")
    val drag_dest_set_proxy: 'a GtkWidget -> gdk_window -> gdk_drag_protocol -> bool -> unit
        = fn OBJ widget => fn proxy_window => fn protocol => fn use_coordinates => drag_dest_set_proxy_ widget proxy_window protocol use_coordinates

    val drag_dest_unset_: gtkobj -> unit
        = app1(symb"mgtk_gtk_drag_dest_unset")
    val drag_dest_unset: 'a GtkWidget -> unit
        = fn OBJ widget => drag_dest_unset_ widget

    val drag_source_unset_: gtkobj -> unit
        = app1(symb"mgtk_gtk_drag_source_unset")
    val drag_source_unset: 'a GtkWidget -> unit
        = fn OBJ widget => drag_source_unset_ widget

    val drag_source_set_icon_: gtkobj -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> unit
        = app4(symb"mgtk_gtk_drag_source_set_icon")
    val drag_source_set_icon: 'a GtkWidget -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> unit
        = fn OBJ widget => fn colormap => fn pixmap => fn mask => drag_source_set_icon_ widget colormap pixmap mask

    val drag_set_icon_widget_: gdk_drag_context -> gtkobj -> int -> int -> unit
        = app4(symb"mgtk_gtk_drag_set_icon_widget")
    val drag_set_icon_widget: gdk_drag_context -> 'a GtkWidget -> int -> int -> unit
        = fn context => fn OBJ widget => fn hot_x => fn hot_y => drag_set_icon_widget_ context widget hot_x hot_y

    val drag_set_icon_pixmap_: gdk_drag_context * gdk_colormap * gdk_pixmap * gdk_bitmap * int * int -> unit
        = app1(symb"mgtk_gtk_drag_set_icon_pixmap")
    val drag_set_icon_pixmap: gdk_drag_context -> gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit
        = fn context => fn colormap => fn pixmap => fn mask => fn hot_x => fn hot_y => drag_set_icon_pixmap_ (context, colormap, pixmap, mask, hot_x, hot_y)

    val drag_set_icon_default_: gdk_drag_context -> unit
        = app1(symb"mgtk_gtk_drag_set_icon_default")
    val drag_set_icon_default: gdk_drag_context -> unit
        = fn context => drag_set_icon_default_ context

    val drag_set_default_icon_: gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit
        = app5(symb"mgtk_gtk_drag_set_default_icon")
    val drag_set_default_icon: gdk_colormap -> gdk_pixmap -> gdk_bitmap -> int -> int -> unit
        = fn colormap => fn pixmap => fn mask => fn hot_x => fn hot_y => drag_set_default_icon_ colormap pixmap mask hot_x hot_y

    val selection_remove_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_selection_remove_all")
    val selection_remove_all: 'a GtkWidget -> unit
        = fn OBJ widget => selection_remove_all_ widget

    (* *** Data *** *)

    type 'a data_t = base
    type 'a GtkData = 'a data_t GtkObject


    (* *** Adjustment *** *)

    type 'a adjustment_t = base
    type 'a GtkAdjustment = 'a adjustment_t GtkData

    val adjustment_get_value_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_value")
    val adjustment_get_value: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_value_ wid

    val adjustment_get_lower_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_lower")
    val adjustment_get_lower: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_lower_ wid

    val adjustment_get_upper_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_upper")
    val adjustment_get_upper: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_upper_ wid

    val adjustment_get_step_increment_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_step_increment")
    val adjustment_get_step_increment: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_step_increment_ wid

    val adjustment_get_page_increment_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_page_increment")
    val adjustment_get_page_increment: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_page_increment_ wid

    val adjustment_get_page_size_: gtkobj -> real
        = app1(symb"mgtk_gtk_adjustment_get_page_size")
    val adjustment_get_page_size: 'a GtkAdjustment -> real
        = fn OBJ wid => adjustment_get_page_size_ wid


    val adjustment_new_: real * real * real * real * real * real -> gtkobj
        = app1(symb"mgtk_gtk_adjustment_new")
    val adjustment_new: real -> real -> real -> real -> real -> real -> base GtkObject
        = fn valu => fn lower => fn upper => fn step_increment => fn page_increment => fn page_size => OBJ(adjustment_new_ (valu, lower, upper, step_increment, page_increment, page_size))

    val adjustment_changed_: gtkobj -> unit
        = app1(symb"mgtk_gtk_adjustment_changed")
    val adjustment_changed: 'a GtkAdjustment -> unit
        = fn OBJ adjustment => adjustment_changed_ adjustment

    val adjustment_value_changed_: gtkobj -> unit
        = app1(symb"mgtk_gtk_adjustment_value_changed")
    val adjustment_value_changed: 'a GtkAdjustment -> unit
        = fn OBJ adjustment => adjustment_value_changed_ adjustment

    val adjustment_clamp_page_: gtkobj -> real -> real -> unit
        = app3(symb"mgtk_gtk_adjustment_clamp_page")
    val adjustment_clamp_page: 'a GtkAdjustment -> real -> real -> unit
        = fn OBJ adjustment => fn lower => fn upper => adjustment_clamp_page_ adjustment lower upper

    val adjustment_set_value_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_adjustment_set_value")
    val adjustment_set_value: 'a GtkAdjustment -> real -> unit
        = fn OBJ adjustment => fn valu => adjustment_set_value_ adjustment valu

    val widget_get_window_: gtkobj -> gdk_window
        = app1(symb"mgtk_gtk_widget_get_window")
    val widget_get_window: 'a GtkWidget -> gdk_window
        = fn OBJ widget => widget_get_window_ widget

    val widget_get_drawable_: gtkobj -> gdk_drawable
        = app1(symb"mgtk_gtk_widget_get_drawable")
    val widget_get_drawable: 'a GtkWidget -> gdk_drawable
        = fn OBJ widget => widget_get_drawable_ widget

    val widget_get_state_: gtkobj -> int
        = app1(symb"mgtk_gtk_widget_get_state")
    val widget_get_state: 'a GtkWidget -> gtk_state_type
        = fn OBJ widget => widget_get_state_ widget

    val widget_get_allocation_: gtkobj -> int * int * int * int
        = app1(symb"mgtk_gtk_widget_get_allocation")
    val widget_get_allocation: 'a GtkWidget -> int * int * int * int
        = fn OBJ widget => widget_get_allocation_ widget

    val widget_get_style_fg_gc_: gtkobj -> int -> gdk_gc
        = app2(symb"mgtk_gtk_widget_get_style_fg_gc")
    val widget_get_style_fg_gc: 'a GtkWidget -> gtk_state_type -> gdk_gc
        = fn OBJ widget => fn state => widget_get_style_fg_gc_ widget state

    val widget_destroy_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_destroy")
    val widget_destroy: 'a GtkWidget -> unit
        = fn OBJ widget => widget_destroy_ widget

    val widget_unparent_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_unparent")
    val widget_unparent: 'a GtkWidget -> unit
        = fn OBJ widget => widget_unparent_ widget

    val widget_show_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_show")
    val widget_show: 'a GtkWidget -> unit
        = fn OBJ widget => widget_show_ widget

    val widget_show_now_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_show_now")
    val widget_show_now: 'a GtkWidget -> unit
        = fn OBJ widget => widget_show_now_ widget

    val widget_hide_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_hide")
    val widget_hide: 'a GtkWidget -> unit
        = fn OBJ widget => widget_hide_ widget

    val widget_show_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_show_all")
    val widget_show_all: 'a GtkWidget -> unit
        = fn OBJ widget => widget_show_all_ widget

    val widget_hide_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_hide_all")
    val widget_hide_all: 'a GtkWidget -> unit
        = fn OBJ widget => widget_hide_all_ widget

    val widget_map_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_map")
    val widget_map: 'a GtkWidget -> unit
        = fn OBJ widget => widget_map_ widget

    val widget_unmap_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_unmap")
    val widget_unmap: 'a GtkWidget -> unit
        = fn OBJ widget => widget_unmap_ widget

    val widget_realize_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_realize")
    val widget_realize: 'a GtkWidget -> unit
        = fn OBJ widget => widget_realize_ widget

    val widget_unrealize_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_unrealize")
    val widget_unrealize: 'a GtkWidget -> unit
        = fn OBJ widget => widget_unrealize_ widget

    val widget_queue_draw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_queue_draw")
    val widget_queue_draw: 'a GtkWidget -> unit
        = fn OBJ widget => widget_queue_draw_ widget

    val widget_queue_resize_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_queue_resize")
    val widget_queue_resize: 'a GtkWidget -> unit
        = fn OBJ widget => widget_queue_resize_ widget

    val widget_draw_focus_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_draw_focus")
    val widget_draw_focus: 'a GtkWidget -> unit
        = fn OBJ widget => widget_draw_focus_ widget

    val widget_draw_default_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_draw_default")
    val widget_draw_default: 'a GtkWidget -> unit
        = fn OBJ widget => widget_draw_default_ widget

    val widget_add_accelerator_: gtkobj * string * gtk_accel_group * word * int * int -> unit
        = app1(symb"mgtk_gtk_widget_add_accelerator")
    val widget_add_accelerator: 'a GtkWidget -> string -> gtk_accel_group -> word -> gdk_modifier_type list -> gtk_accel_flags list -> unit
        = fn OBJ widget => fn signal_name => fn group => fn key => fn modifiers => fn flags => widget_add_accelerator_ (widget, signal_name, group, key, (setFlags modifiers), (setFlags flags))

    val widget_remove_accelerator_: gtkobj -> gtk_accel_group -> word -> int -> unit
        = app4(symb"mgtk_gtk_widget_remove_accelerator")
    val widget_remove_accelerator: 'a GtkWidget -> gtk_accel_group -> word -> gdk_modifier_type list -> unit
        = fn OBJ widget => fn group => fn key => fn modifiers => widget_remove_accelerator_ widget group key (setFlags modifiers)

    val widget_remove_accelerators_: gtkobj -> string -> bool -> unit
        = app3(symb"mgtk_gtk_widget_remove_accelerators")
    val widget_remove_accelerators: 'a GtkWidget -> string -> bool -> unit
        = fn OBJ widget => fn signal_name => fn visible_only => widget_remove_accelerators_ widget signal_name visible_only

    val widget_accelerator_signal_: gtkobj -> gtk_accel_group -> word -> int -> word
        = app4(symb"mgtk_gtk_widget_accelerator_signal")
    val widget_accelerator_signal: 'a GtkWidget -> gtk_accel_group -> word -> gdk_modifier_type list -> word
        = fn OBJ widget => fn group => fn key => fn modifiers => widget_accelerator_signal_ widget group key (setFlags modifiers)

    val widget_lock_accelerators_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_lock_accelerators")
    val widget_lock_accelerators: 'a GtkWidget -> unit
        = fn OBJ widget => widget_lock_accelerators_ widget

    val widget_unlock_accelerators_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_unlock_accelerators")
    val widget_unlock_accelerators: 'a GtkWidget -> unit
        = fn OBJ widget => widget_unlock_accelerators_ widget

    val widget_accelerators_locked_: gtkobj -> bool
        = app1(symb"mgtk_gtk_widget_accelerators_locked")
    val widget_accelerators_locked: 'a GtkWidget -> bool
        = fn OBJ widget => widget_accelerators_locked_ widget

    val widget_event_: gtkobj -> gdk_event -> bool
        = app2(symb"mgtk_gtk_widget_event")
    val widget_event: 'a GtkWidget -> gdk_event -> bool
        = fn OBJ widget => fn event => widget_event_ widget event

    val widget_activate_: gtkobj -> bool
        = app1(symb"mgtk_gtk_widget_activate")
    val widget_activate: 'a GtkWidget -> bool
        = fn OBJ widget => widget_activate_ widget

    val widget_set_scroll_adjustments_: gtkobj -> gtkobj -> gtkobj -> bool
        = app3(symb"mgtk_gtk_widget_set_scroll_adjustments")
    val widget_set_scroll_adjustments: 'a GtkWidget -> 'b GtkAdjustment -> 'c GtkAdjustment -> bool
        = fn OBJ widget => fn OBJ hadjustment => fn OBJ vadjustment => widget_set_scroll_adjustments_ widget hadjustment vadjustment

    val widget_reparent_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_widget_reparent")
    val widget_reparent: 'a GtkWidget -> 'b GtkWidget -> unit
        = fn OBJ widget => fn OBJ new_parent => widget_reparent_ widget new_parent

    val widget_popup_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_widget_popup")
    val widget_popup: 'a GtkWidget -> int -> int -> unit
        = fn OBJ widget => fn x => fn y => widget_popup_ widget x y

    val widget_grab_focus_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_grab_focus")
    val widget_grab_focus: 'a GtkWidget -> unit
        = fn OBJ widget => widget_grab_focus_ widget

    val widget_grab_default_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_grab_default")
    val widget_grab_default: 'a GtkWidget -> unit
        = fn OBJ widget => widget_grab_default_ widget

    val widget_set_name_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_widget_set_name")
    val widget_set_name: 'a GtkWidget -> string -> unit
        = fn OBJ widget => fn name => widget_set_name_ widget name

    val widget_get_name_: gtkobj -> string
        = app1(symb"mgtk_gtk_widget_get_name")
    val widget_get_name: 'a GtkWidget -> string
        = fn OBJ widget => widget_get_name_ widget

    val widget_set_state_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_widget_set_state")
    val widget_set_state: 'a GtkWidget -> gtk_state_type -> unit
        = fn OBJ widget => fn state => widget_set_state_ widget state

    val widget_set_sensitive_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_widget_set_sensitive")
    val widget_set_sensitive: 'a GtkWidget -> bool -> unit
        = fn OBJ widget => fn sensitive => widget_set_sensitive_ widget sensitive

    val widget_set_app_paintable_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_widget_set_app_paintable")
    val widget_set_app_paintable: 'a GtkWidget -> bool -> unit
        = fn OBJ widget => fn app_paintable => widget_set_app_paintable_ widget app_paintable

    val widget_set_parent_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_widget_set_parent")
    val widget_set_parent: 'a GtkWidget -> 'b GtkWidget -> unit
        = fn OBJ widget => fn OBJ parent => widget_set_parent_ widget parent

    val widget_set_parent_window_: gtkobj -> gdk_window -> unit
        = app2(symb"mgtk_gtk_widget_set_parent_window")
    val widget_set_parent_window: 'a GtkWidget -> gdk_window -> unit
        = fn OBJ widget => fn parent_window => widget_set_parent_window_ widget parent_window

    val widget_get_parent_window_: gtkobj -> gdk_window
        = app1(symb"mgtk_gtk_widget_get_parent_window")
    val widget_get_parent_window: 'a GtkWidget -> gdk_window
        = fn OBJ widget => widget_get_parent_window_ widget

    val widget_set_uposition_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_widget_set_uposition")
    val widget_set_uposition: 'a GtkWidget -> int -> int -> unit
        = fn OBJ widget => fn x => fn y => widget_set_uposition_ widget x y

    val widget_set_usize_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_widget_set_usize")
    val widget_set_usize: 'a GtkWidget -> int -> int -> unit
        = fn OBJ widget => fn height => fn width => widget_set_usize_ widget height width

    val widget_set_events_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_widget_set_events")
    val widget_set_events: 'a GtkWidget -> gdk_event_mask list -> unit
        = fn OBJ widget => fn events => widget_set_events_ widget (setFlags events)

    val widget_add_events_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_widget_add_events")
    val widget_add_events: 'a GtkWidget -> gdk_event_mask list -> unit
        = fn OBJ widget => fn events => widget_add_events_ widget (setFlags events)

    val widget_set_extension_events_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_widget_set_extension_events")
    val widget_set_extension_events: 'a GtkWidget -> gdk_event_mask list -> unit
        = fn OBJ widget => fn events => widget_set_extension_events_ widget (setFlags events)

    val widget_get_extension_events_: gtkobj -> int
        = app1(symb"mgtk_gtk_widget_get_extension_events")
    val widget_get_extension_events: 'a GtkWidget -> gdk_event_mask list
        = fn OBJ widget => getFlags(widget_get_extension_events_ widget)

    val widget_get_toplevel_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_widget_get_toplevel")
    val widget_get_toplevel: 'a GtkWidget -> base GtkWidget
        = fn OBJ widget => OBJ(widget_get_toplevel_ widget)

    val widget_get_ancestor_: gtkobj -> word -> gtkobj
        = app2(symb"mgtk_gtk_widget_get_ancestor")
    val widget_get_ancestor: 'a GtkWidget -> word -> base GtkWidget
        = fn OBJ widget => fn typ => OBJ(widget_get_ancestor_ widget typ)

    val widget_get_colormap_: gtkobj -> gdk_colormap
        = app1(symb"mgtk_gtk_widget_get_colormap")
    val widget_get_colormap: 'a GtkWidget -> gdk_colormap
        = fn OBJ widget => widget_get_colormap_ widget

    val widget_get_events_: gtkobj -> int
        = app1(symb"mgtk_gtk_widget_get_events")
    val widget_get_events: 'a GtkWidget -> gdk_event_mask list
        = fn OBJ widget => getFlags(widget_get_events_ widget)

    val widget_is_ancestor_: gtkobj -> gtkobj -> bool
        = app2(symb"mgtk_gtk_widget_is_ancestor")
    val widget_is_ancestor: 'a GtkWidget -> 'b GtkWidget -> bool
        = fn OBJ widget => fn OBJ ancestor => widget_is_ancestor_ widget ancestor

    val widget_hide_on_delete_: gtkobj -> int
        = app1(symb"mgtk_gtk_widget_hide_on_delete")
    val widget_hide_on_delete: 'a GtkWidget -> int
        = fn OBJ widget => widget_hide_on_delete_ widget

    val widget_set_style_: gtkobj -> gtk_style -> unit
        = app2(symb"mgtk_gtk_widget_set_style")
    val widget_set_style: 'a GtkWidget -> gtk_style -> unit
        = fn OBJ widget => fn style => widget_set_style_ widget style

    val widget_set_rc_style_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_set_rc_style")
    val widget_set_rc_style: 'a GtkWidget -> unit
        = fn OBJ widget => widget_set_rc_style_ widget

    val widget_ensure_style_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_ensure_style")
    val widget_ensure_style: 'a GtkWidget -> unit
        = fn OBJ widget => widget_ensure_style_ widget

    val widget_get_style_: gtkobj -> gtk_style
        = app1(symb"mgtk_gtk_widget_get_style")
    val widget_get_style: 'a GtkWidget -> gtk_style
        = fn OBJ widget => widget_get_style_ widget

    val widget_restore_default_style_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_restore_default_style")
    val widget_restore_default_style: 'a GtkWidget -> unit
        = fn OBJ widget => widget_restore_default_style_ widget

    val widget_set_composite_name_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_widget_set_composite_name")
    val widget_set_composite_name: 'a GtkWidget -> string -> unit
        = fn OBJ widget => fn name => widget_set_composite_name_ widget name

    val widget_get_composite_name_: gtkobj -> string
        = app1(symb"mgtk_gtk_widget_get_composite_name")
    val widget_get_composite_name: 'a GtkWidget -> string
        = fn OBJ widget => widget_get_composite_name_ widget

    val widget_reset_rc_styles_: gtkobj -> unit
        = app1(symb"mgtk_gtk_widget_reset_rc_styles")
    val widget_reset_rc_styles: 'a GtkWidget -> unit
        = fn OBJ widget => widget_reset_rc_styles_ widget

    val widget_push_style_: gtk_style -> unit
        = app1(symb"mgtk_gtk_widget_push_style")
    val widget_push_style: gtk_style -> unit
        = fn style => widget_push_style_ style

    val widget_push_colormap_: gdk_colormap -> unit
        = app1(symb"mgtk_gtk_widget_push_colormap")
    val widget_push_colormap: gdk_colormap -> unit
        = fn cmap => widget_push_colormap_ cmap

    val widget_pop_style_: unit -> unit
        = app1(symb"mgtk_gtk_widget_pop_style")
    val widget_pop_style: unit -> unit
        = fn dummy => widget_pop_style_ dummy

    val widget_pop_colormap_: unit -> unit
        = app1(symb"mgtk_gtk_widget_pop_colormap")
    val widget_pop_colormap: unit -> unit
        = fn dummy => widget_pop_colormap_ dummy

    val widget_set_default_style_: gtk_style -> unit
        = app1(symb"mgtk_gtk_widget_set_default_style")
    val widget_set_default_style: gtk_style -> unit
        = fn style => widget_set_default_style_ style

    val widget_set_default_colormap_: gdk_colormap -> unit
        = app1(symb"mgtk_gtk_widget_set_default_colormap")
    val widget_set_default_colormap: gdk_colormap -> unit
        = fn cmap => widget_set_default_colormap_ cmap

    val widget_get_default_style_: unit -> gtk_style
        = app1(symb"mgtk_gtk_widget_get_default_style")
    val widget_get_default_style: unit -> gtk_style
        = fn dummy => widget_get_default_style_ dummy

    val widget_get_default_colormap_: unit -> gdk_colormap
        = app1(symb"mgtk_gtk_widget_get_default_colormap")
    val widget_get_default_colormap: unit -> gdk_colormap
        = fn dummy => widget_get_default_colormap_ dummy

    val widget_shape_combine_mask_: gtkobj -> gdk_bitmap -> int -> int -> unit
        = app4(symb"mgtk_gtk_widget_shape_combine_mask")
    val widget_shape_combine_mask: 'a GtkWidget -> gdk_bitmap -> int -> int -> unit
        = fn OBJ widget => fn mask => fn ofs_x => fn ofs_y => widget_shape_combine_mask_ widget mask ofs_x ofs_y

    (* *** Tooltips *** *)

    type 'a tooltips_t = base
    type 'a GtkTooltips = 'a tooltips_t GtkData


    val tooltips_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_tooltips_new")
    val tooltips_new: unit -> base GtkTooltips
        = fn dummy => OBJ(tooltips_new_ dummy)

    val tooltips_enable_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tooltips_enable")
    val tooltips_enable: 'a GtkTooltips -> unit
        = fn OBJ tooltips => tooltips_enable_ tooltips

    val tooltips_disable_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tooltips_disable")
    val tooltips_disable: 'a GtkTooltips -> unit
        = fn OBJ tooltips => tooltips_disable_ tooltips

    val tooltips_set_delay_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_tooltips_set_delay")
    val tooltips_set_delay: 'a GtkTooltips -> int -> unit
        = fn OBJ tooltips => fn delay => tooltips_set_delay_ tooltips delay

    val tooltips_set_tip_: gtkobj -> gtkobj -> string option -> string option -> unit
        = app4(symb"mgtk_gtk_tooltips_set_tip")
    val tooltips_set_tip: 'a GtkTooltips -> 'b GtkWidget -> string option -> string option -> unit
        = fn OBJ tooltips => fn OBJ widget => fn tip_text => fn tip_private => tooltips_set_tip_ tooltips widget tip_text tip_private

    val tooltips_set_tip'_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tooltips_set_tip_short")
    val tooltips_set_tip': 'a GtkTooltips -> 'b GtkWidget -> unit
        = fn OBJ tooltips => fn OBJ widget => tooltips_set_tip'_ tooltips widget

    val tooltips_set_colors_: gtkobj -> gdk_color -> gdk_color -> unit
        = app3(symb"mgtk_gtk_tooltips_set_colors")
    val tooltips_set_colors: 'a GtkTooltips -> gdk_color -> gdk_color -> unit
        = fn OBJ tooltips => fn background => fn foreground => tooltips_set_colors_ tooltips background foreground

    val tooltips_force_window_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tooltips_force_window")
    val tooltips_force_window: 'a GtkTooltips -> unit
        = fn OBJ tooltips => tooltips_force_window_ tooltips

    (* *** Container *** *)

    type 'a container_t = base
    type 'a GtkContainer = 'a container_t GtkWidget


    val container_set_border_width_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_container_set_border_width")
    val container_set_border_width: 'a GtkContainer -> int -> unit
        = fn OBJ container => fn border_width => container_set_border_width_ container border_width

    val container_add_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_container_add")
    val container_add: 'a GtkContainer -> 'b GtkWidget -> unit
        = fn OBJ container => fn OBJ widget => container_add_ container widget

    val container_remove_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_container_remove")
    val container_remove: 'a GtkContainer -> 'b GtkWidget -> unit
        = fn OBJ container => fn OBJ widget => container_remove_ container widget

    val container_set_resize_mode_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_container_set_resize_mode")
    val container_set_resize_mode: 'a GtkContainer -> gtk_resize_mode -> unit
        = fn OBJ container => fn resize_mode => container_set_resize_mode_ container resize_mode

    val container_check_resize_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_check_resize")
    val container_check_resize: 'a GtkContainer -> unit
        = fn OBJ container => container_check_resize_ container

    val container_child_composite_name_: gtkobj -> gtkobj -> string
        = app2(symb"mgtk_gtk_container_child_composite_name")
    val container_child_composite_name: 'a GtkContainer -> 'b GtkWidget -> string
        = fn OBJ container => fn OBJ child => container_child_composite_name_ container child

    val container_focus_: gtkobj -> int -> int
        = app2(symb"mgtk_gtk_container_focus")
    val container_focus: 'a GtkContainer -> gtk_direction_type -> int
        = fn OBJ container => fn direction => container_focus_ container direction

    val container_set_focus_child_: gtkobj -> gtkobj option -> unit
        = app2(symb"mgtk_gtk_container_set_focus_child")
    val container_set_focus_child: 'a GtkContainer -> 'b GtkWidget option -> unit
        = fn OBJ container => fn child => container_set_focus_child_ container (unwrapObjOpt child)

    val container_set_focus_child'_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_set_focus_child_short")
    val container_set_focus_child': 'a GtkContainer -> unit
        = fn OBJ container => container_set_focus_child'_ container

    val container_set_focus_vadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_container_set_focus_vadjustment")
    val container_set_focus_vadjustment: 'a GtkContainer -> 'b GtkAdjustment -> unit
        = fn OBJ container => fn OBJ adjustment => container_set_focus_vadjustment_ container adjustment

    val container_set_focus_hadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_container_set_focus_hadjustment")
    val container_set_focus_hadjustment: 'a GtkContainer -> 'b GtkAdjustment -> unit
        = fn OBJ container => fn OBJ adjustment => container_set_focus_hadjustment_ container adjustment

    val container_register_toplevel_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_register_toplevel")
    val container_register_toplevel: 'a GtkContainer -> unit
        = fn OBJ container => container_register_toplevel_ container

    val container_unregister_toplevel_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_unregister_toplevel")
    val container_unregister_toplevel: 'a GtkContainer -> unit
        = fn OBJ container => container_unregister_toplevel_ container

    val container_resize_children_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_resize_children")
    val container_resize_children: 'a GtkContainer -> unit
        = fn OBJ container => container_resize_children_ container

    val container_child_type_: gtkobj -> word
        = app1(symb"mgtk_gtk_container_child_type")
    val container_child_type: 'a GtkContainer -> word
        = fn OBJ container => container_child_type_ container

    val container_clear_resize_widgets_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_clear_resize_widgets")
    val container_clear_resize_widgets: 'a GtkContainer -> unit
        = fn OBJ container => container_clear_resize_widgets_ container

    val container_dequeue_resize_handler_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_dequeue_resize_handler")
    val container_dequeue_resize_handler: 'a GtkContainer -> unit
        = fn OBJ container => container_dequeue_resize_handler_ container

    val container_queue_resize_: gtkobj -> unit
        = app1(symb"mgtk_gtk_container_queue_resize")
    val container_queue_resize: 'a GtkContainer -> unit
        = fn OBJ container => container_queue_resize_ container

    val container_set_reallocate_redraws_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_container_set_reallocate_redraws")
    val container_set_reallocate_redraws: 'a GtkContainer -> bool -> unit
        = fn OBJ container => fn needs_redraws => container_set_reallocate_redraws_ container needs_redraws

    (* *** Fixed *** *)

    type 'a fixed_t = base
    type 'a GtkFixed = 'a fixed_t GtkContainer


    val fixed_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_fixed_new")
    val fixed_new: unit -> base GtkFixed
        = fn dummy => OBJ(fixed_new_ dummy)

    val fixed_put_: gtkobj -> gtkobj -> int -> int -> unit
        = app4(symb"mgtk_gtk_fixed_put")
    val fixed_put: 'a GtkFixed -> 'b GtkWidget -> int -> int -> unit
        = fn OBJ fixed => fn OBJ widget => fn x => fn y => fixed_put_ fixed widget x y

    val fixed_move_: gtkobj -> gtkobj -> int -> int -> unit
        = app4(symb"mgtk_gtk_fixed_move")
    val fixed_move: 'a GtkFixed -> 'b GtkWidget -> int -> int -> unit
        = fn OBJ fixed => fn OBJ widget => fn x => fn y => fixed_move_ fixed widget x y

    (* *** Bin *** *)

    type 'a bin_t = base
    type 'a GtkBin = 'a bin_t GtkContainer


    (* *** EventBox *** *)

    type 'a eventbox_t = base
    type 'a GtkEventBox = 'a eventbox_t GtkBin


    val event_box_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_event_box_new")
    val event_box_new: unit -> base GtkEventBox
        = fn dummy => OBJ(event_box_new_ dummy)

    (* *** Window *** *)

    type 'a window_t = base
    type 'a GtkWindow = 'a window_t GtkBin


    val window_new_: int -> gtkobj
        = app1(symb"mgtk_gtk_window_new")
    val window_new: gtk_window_type -> base GtkWindow
        = fn typ => OBJ(window_new_ typ)

    val window_set_title_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_window_set_title")
    val window_set_title: 'a GtkWindow -> string -> unit
        = fn OBJ window => fn title => window_set_title_ window title

    val window_set_wmclass_: gtkobj -> string -> string -> unit
        = app3(symb"mgtk_gtk_window_set_wmclass")
    val window_set_wmclass: 'a GtkWindow -> string -> string -> unit
        = fn OBJ window => fn wmclass_class => fn wmclass_name => window_set_wmclass_ window wmclass_class wmclass_name

    val window_set_policy_: gtkobj -> bool -> bool -> bool -> unit
        = app4(symb"mgtk_gtk_window_set_policy")
    val window_set_policy: 'a GtkWindow -> bool -> bool -> bool -> unit
        = fn OBJ window => fn allow_shrink => fn allow_grow => fn auto_shrink => window_set_policy_ window allow_shrink allow_grow auto_shrink

    val window_add_accel_group_: gtkobj -> gtk_accel_group -> unit
        = app2(symb"mgtk_gtk_window_add_accel_group")
    val window_add_accel_group: 'a GtkWindow -> gtk_accel_group -> unit
        = fn OBJ window => fn group => window_add_accel_group_ window group

    val window_remove_accel_group_: gtkobj -> gtk_accel_group -> unit
        = app2(symb"mgtk_gtk_window_remove_accel_group")
    val window_remove_accel_group: 'a GtkWindow -> gtk_accel_group -> unit
        = fn OBJ window => fn group => window_remove_accel_group_ window group

    val window_set_position_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_window_set_position")
    val window_set_position: 'a GtkWindow -> gtk_window_position -> unit
        = fn OBJ window => fn position => window_set_position_ window position

    val window_activate_focus_: gtkobj -> int
        = app1(symb"mgtk_gtk_window_activate_focus")
    val window_activate_focus: 'a GtkWindow -> int
        = fn OBJ window => window_activate_focus_ window

    val window_activate_default_: gtkobj -> int
        = app1(symb"mgtk_gtk_window_activate_default")
    val window_activate_default: 'a GtkWindow -> int
        = fn OBJ window => window_activate_default_ window

    val window_set_transient_for_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_window_set_transient_for")
    val window_set_transient_for: 'a GtkWindow -> 'b GtkWindow -> unit
        = fn OBJ window => fn OBJ parent => window_set_transient_for_ window parent

    val window_set_default_size_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_window_set_default_size")
    val window_set_default_size: 'a GtkWindow -> int -> int -> unit
        = fn OBJ window => fn width => fn height => window_set_default_size_ window width height

    val window_set_modal_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_window_set_modal")
    val window_set_modal: 'a GtkWindow -> bool -> unit
        = fn OBJ window => fn modal => window_set_modal_ window modal

    (* *** HandleBox *** *)

    type 'a handlebox_t = base
    type 'a GtkHandleBox = 'a handlebox_t GtkBin


    val handle_box_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_handle_box_new")
    val handle_box_new: unit -> base GtkHandleBox
        = fn dummy => OBJ(handle_box_new_ dummy)

    val handle_box_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_handle_box_set_shadow_type")
    val handle_box_set_shadow_type: 'a GtkHandleBox -> gtk_shadow_type -> unit
        = fn OBJ handle_box => fn typ => handle_box_set_shadow_type_ handle_box typ

    val handle_box_set_handle_position_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_handle_box_set_handle_position")
    val handle_box_set_handle_position: 'a GtkHandleBox -> gtk_position_type -> unit
        = fn OBJ handle_box => fn position => handle_box_set_handle_position_ handle_box position

    val handle_box_set_snap_edge_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_handle_box_set_snap_edge")
    val handle_box_set_snap_edge: 'a GtkHandleBox -> gtk_position_type -> unit
        = fn OBJ handle_box => fn position => handle_box_set_snap_edge_ handle_box position

    (* *** Box *** *)

    type 'a box_t = base
    type 'a GtkBox = 'a box_t GtkContainer


    val box_pack_start_: gtkobj -> gtkobj -> bool -> bool -> int -> unit
        = app5(symb"mgtk_gtk_box_pack_start")
    val box_pack_start: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> unit
        = fn OBJ box => fn OBJ child => fn expand => fn fill => fn padding => box_pack_start_ box child expand fill padding

    val box_pack_end_: gtkobj -> gtkobj -> bool -> bool -> int -> unit
        = app5(symb"mgtk_gtk_box_pack_end")
    val box_pack_end: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> unit
        = fn OBJ box => fn OBJ child => fn expand => fn fill => fn padding => box_pack_end_ box child expand fill padding

    val box_pack_start_defaults_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_box_pack_start_defaults")
    val box_pack_start_defaults: 'a GtkBox -> 'b GtkWidget -> unit
        = fn OBJ box => fn OBJ child => box_pack_start_defaults_ box child

    val box_pack_end_defaults_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_box_pack_end_defaults")
    val box_pack_end_defaults: 'a GtkBox -> 'b GtkWidget -> unit
        = fn OBJ box => fn OBJ child => box_pack_end_defaults_ box child

    val box_set_homogeneous_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_box_set_homogeneous")
    val box_set_homogeneous: 'a GtkBox -> bool -> unit
        = fn OBJ box => fn homogenous => box_set_homogeneous_ box homogenous

    val box_set_spacing_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_box_set_spacing")
    val box_set_spacing: 'a GtkBox -> int -> unit
        = fn OBJ box => fn spacing => box_set_spacing_ box spacing

    val box_reorder_child_: gtkobj -> gtkobj -> word -> unit
        = app3(symb"mgtk_gtk_box_reorder_child")
    val box_reorder_child: 'a GtkBox -> 'b GtkWidget -> word -> unit
        = fn OBJ box => fn OBJ child => fn pos => box_reorder_child_ box child pos

    val box_set_child_packing_: gtkobj * gtkobj * bool * bool * int * int -> unit
        = app1(symb"mgtk_gtk_box_set_child_packing")
    val box_set_child_packing: 'a GtkBox -> 'b GtkWidget -> bool -> bool -> int -> gtk_pack_type -> unit
        = fn OBJ box => fn OBJ child => fn expand => fn fill => fn padding => fn pack_type => box_set_child_packing_ (box, child, expand, fill, padding, pack_type)

    val box_query_child_packing_: gtkobj -> gtkobj -> bool * bool * word * int
        = app2(symb"mgtk_gtk_box_query_child_packing")
    val box_query_child_packing: 'a GtkBox -> 'b GtkWidget -> bool * bool * word * gtk_pack_type
        = fn OBJ box => fn OBJ child => box_query_child_packing_ box child

    (* *** HBox *** *)

    type 'a hbox_t = base
    type 'a GtkHBox = 'a hbox_t GtkBox


    val hbox_new_: bool -> int -> gtkobj
        = app2(symb"mgtk_gtk_hbox_new")
    val hbox_new: bool -> int -> base GtkHBox
        = fn homogeneous => fn spacing => OBJ(hbox_new_ homogeneous spacing)

    (* *** VBox *** *)

    type 'a vbox_t = base
    type 'a GtkVBox = 'a vbox_t GtkBox


    val vbox_new_: bool -> int -> gtkobj
        = app2(symb"mgtk_gtk_vbox_new")
    val vbox_new: bool -> int -> base GtkVBox
        = fn homogeneous => fn spacing => OBJ(vbox_new_ homogeneous spacing)

    (* *** ButtonBox *** *)

    type 'a buttonbox_t = base
    type 'a GtkButtonBox = 'a buttonbox_t GtkBox


    val button_box_get_child_size_: gtkobj -> int * int
        = app1(symb"mgtk_gtk_button_box_get_child_size")
    val button_box_get_child_size: 'a GtkButtonBox -> int * int
        = fn OBJ widget => button_box_get_child_size_ widget

    val button_box_get_child_size_default_: unit -> int * int
        = app1(symb"mgtk_gtk_button_box_get_child_size_default")
    val button_box_get_child_size_default: unit -> int * int
        = fn dummy => button_box_get_child_size_default_ dummy

    val button_box_get_child_ipadding_: gtkobj -> int * int
        = app1(symb"mgtk_gtk_button_box_get_child_ipadding")
    val button_box_get_child_ipadding: 'a GtkButtonBox -> int * int
        = fn OBJ widget => button_box_get_child_ipadding_ widget

    val button_box_get_child_ipadding_default_: unit -> int * int
        = app1(symb"mgtk_gtk_button_box_get_child_ipadding_default")
    val button_box_get_child_ipadding_default: unit -> int * int
        = fn dummy => button_box_get_child_ipadding_default_ dummy

    val button_box_set_child_size_default_: int -> int -> unit
        = app2(symb"mgtk_gtk_button_box_set_child_size_default")
    val button_box_set_child_size_default: int -> int -> unit
        = fn min_width => fn min_height => button_box_set_child_size_default_ min_width min_height

    val button_box_set_child_ipadding_default_: int -> int -> unit
        = app2(symb"mgtk_gtk_button_box_set_child_ipadding_default")
    val button_box_set_child_ipadding_default: int -> int -> unit
        = fn ipad_x => fn ipad_y => button_box_set_child_ipadding_default_ ipad_x ipad_y

    val button_box_get_spacing_: gtkobj -> int
        = app1(symb"mgtk_gtk_button_box_get_spacing")
    val button_box_get_spacing: 'a GtkButtonBox -> int
        = fn OBJ widget => button_box_get_spacing_ widget

    val button_box_get_layout_: gtkobj -> int
        = app1(symb"mgtk_gtk_button_box_get_layout")
    val button_box_get_layout: 'a GtkButtonBox -> gtk_button_box_style
        = fn OBJ widget => button_box_get_layout_ widget

    val button_box_set_spacing_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_button_box_set_spacing")
    val button_box_set_spacing: 'a GtkButtonBox -> int -> unit
        = fn OBJ widget => fn spacing => button_box_set_spacing_ widget spacing

    val button_box_set_layout_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_button_box_set_layout")
    val button_box_set_layout: 'a GtkButtonBox -> gtk_button_box_style -> unit
        = fn OBJ widget => fn layout_style => button_box_set_layout_ widget layout_style

    val button_box_set_child_size_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_button_box_set_child_size")
    val button_box_set_child_size: 'a GtkButtonBox -> int -> int -> unit
        = fn OBJ widget => fn min_width => fn min_height => button_box_set_child_size_ widget min_width min_height

    val button_box_set_child_ipadding_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_button_box_set_child_ipadding")
    val button_box_set_child_ipadding: 'a GtkButtonBox -> int -> int -> unit
        = fn OBJ widget => fn ipad_x => fn ipad_y => button_box_set_child_ipadding_ widget ipad_x ipad_y

    (* *** HButtonBox *** *)

    type 'a hbuttonbox_t = base
    type 'a GtkHButtonBox = 'a hbuttonbox_t GtkButtonBox


    val hbutton_box_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hbutton_box_new")
    val hbutton_box_new: unit -> base GtkHButtonBox
        = fn dummy => OBJ(hbutton_box_new_ dummy)

    val hbutton_box_get_spacing_default_: unit -> int
        = app1(symb"mgtk_gtk_hbutton_box_get_spacing_default")
    val hbutton_box_get_spacing_default: unit -> int
        = fn dummy => hbutton_box_get_spacing_default_ dummy

    val hbutton_box_get_layout_default_: unit -> int
        = app1(symb"mgtk_gtk_hbutton_box_get_layout_default")
    val hbutton_box_get_layout_default: unit -> gtk_button_box_style
        = fn dummy => hbutton_box_get_layout_default_ dummy

    val hbutton_box_set_spacing_default_: int -> unit
        = app1(symb"mgtk_gtk_hbutton_box_set_spacing_default")
    val hbutton_box_set_spacing_default: int -> unit
        = fn spacing => hbutton_box_set_spacing_default_ spacing

    val hbutton_box_set_layout_default_: int -> unit
        = app1(symb"mgtk_gtk_hbutton_box_set_layout_default")
    val hbutton_box_set_layout_default: gtk_button_box_style -> unit
        = fn layout => hbutton_box_set_layout_default_ layout

    (* *** VButtonBox *** *)

    type 'a vbuttonbox_t = base
    type 'a GtkVButtonBox = 'a vbuttonbox_t GtkButtonBox


    val vbutton_box_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vbutton_box_new")
    val vbutton_box_new: unit -> base GtkVButtonBox
        = fn dummy => OBJ(vbutton_box_new_ dummy)

    val vbutton_box_get_spacing_default_: unit -> int
        = app1(symb"mgtk_gtk_vbutton_box_get_spacing_default")
    val vbutton_box_get_spacing_default: unit -> int
        = fn dummy => vbutton_box_get_spacing_default_ dummy

    val vbutton_box_get_layout_default_: unit -> int
        = app1(symb"mgtk_gtk_vbutton_box_get_layout_default")
    val vbutton_box_get_layout_default: unit -> gtk_button_box_style
        = fn dummy => vbutton_box_get_layout_default_ dummy

    val vbutton_box_set_spacing_default_: int -> unit
        = app1(symb"mgtk_gtk_vbutton_box_set_spacing_default")
    val vbutton_box_set_spacing_default: int -> unit
        = fn spacing => vbutton_box_set_spacing_default_ spacing

    val vbutton_box_set_layout_default_: int -> unit
        = app1(symb"mgtk_gtk_vbutton_box_set_layout_default")
    val vbutton_box_set_layout_default: gtk_button_box_style -> unit
        = fn layout => vbutton_box_set_layout_default_ layout

    (* *** Dialog *** *)

    type 'a dialog_t = base
    type 'a GtkDialog = 'a dialog_t GtkWindow

    val dialog_get_vbox_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_dialog_get_vbox")
    val dialog_get_vbox: 'a GtkDialog -> base GtkVBox
        = fn OBJ wid => OBJ(dialog_get_vbox_ wid)

    val dialog_get_action_area_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_dialog_get_action_area")
    val dialog_get_action_area: 'a GtkDialog -> base GtkHBox
        = fn OBJ wid => OBJ(dialog_get_action_area_ wid)


    val dialog_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_dialog_new")
    val dialog_new: unit -> base GtkDialog
        = fn dummy => OBJ(dialog_new_ dummy)

    (* *** Table *** *)

    type 'a table_t = base
    type 'a GtkTable = 'a table_t GtkContainer


    val table_new_: int -> int -> bool -> gtkobj
        = app3(symb"mgtk_gtk_table_new")
    val table_new: int -> int -> bool -> base GtkTable
        = fn rows => fn columns => fn homogenous => OBJ(table_new_ rows columns homogenous)

    val table_set_row_spacing_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_table_set_row_spacing")
    val table_set_row_spacing: 'a GtkTable -> int -> int -> unit
        = fn OBJ table => fn row => fn spacing => table_set_row_spacing_ table row spacing

    val table_set_col_spacing_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_table_set_col_spacing")
    val table_set_col_spacing: 'a GtkTable -> int -> int -> unit
        = fn OBJ table => fn column => fn spacing => table_set_col_spacing_ table column spacing

    val table_set_row_spacings_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_table_set_row_spacings")
    val table_set_row_spacings: 'a GtkTable -> int -> unit
        = fn OBJ table => fn spacing => table_set_row_spacings_ table spacing

    val table_set_col_spacings_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_table_set_col_spacings")
    val table_set_col_spacings: 'a GtkTable -> int -> unit
        = fn OBJ table => fn spacing => table_set_col_spacings_ table spacing

    val table_set_homogeneous_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_table_set_homogeneous")
    val table_set_homogeneous: 'a GtkTable -> bool -> unit
        = fn OBJ table => fn homogeneous => table_set_homogeneous_ table homogeneous

    (* *** Packer *** *)

    type 'a packer_t = base
    type 'a GtkPacker = 'a packer_t GtkContainer


    val packer_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_packer_new")
    val packer_new: unit -> base GtkPacker
        = fn dummy => OBJ(packer_new_ dummy)

    val packer_add_defaults_: gtkobj -> gtkobj -> int -> int -> int -> unit
        = app5(symb"mgtk_gtk_packer_add_defaults")
    val packer_add_defaults: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> unit
        = fn OBJ packer => fn OBJ child => fn side => fn anchor => fn options => packer_add_defaults_ packer child side anchor (setFlags options)

    val packer_add_: gtkobj * gtkobj * int * int * int * word * word * word * word * word -> unit
        = app1(symb"mgtk_gtk_packer_add")
    val packer_add: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> word -> word -> word -> word -> word -> unit
        = fn OBJ packer => fn OBJ child => fn side => fn anchor => fn options => fn border_width => fn pad_x => fn pad_y => fn ipad_x => fn ipad_y => packer_add_ (packer, child, side, anchor, (setFlags options), border_width, pad_x, pad_y, ipad_x, ipad_y)

    val packer_set_child_packing_: gtkobj * gtkobj * int * int * int * word * word * word * word * word -> unit
        = app1(symb"mgtk_gtk_packer_set_child_packing")
    val packer_set_child_packing: 'a GtkPacker -> 'b GtkWidget -> gtk_side_type -> gtk_anchor_type -> gtk_packer_options list -> word -> word -> word -> word -> word -> unit
        = fn OBJ packer => fn OBJ child => fn size => fn anchor => fn options => fn border_width => fn pad_x => fn pad_y => fn ipad_x => fn ipad_y => packer_set_child_packing_ (packer, child, size, anchor, (setFlags options), border_width, pad_x, pad_y, ipad_x, ipad_y)

    val packer_reorder_child_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_packer_reorder_child")
    val packer_reorder_child: 'a GtkPacker -> 'b GtkWidget -> int -> unit
        = fn OBJ packer => fn OBJ widget => fn position => packer_reorder_child_ packer widget position

    val packer_set_spacing_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_packer_set_spacing")
    val packer_set_spacing: 'a GtkPacker -> word -> unit
        = fn OBJ packer => fn spacing => packer_set_spacing_ packer spacing

    val packer_set_default_border_width_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_packer_set_default_border_width")
    val packer_set_default_border_width: 'a GtkPacker -> word -> unit
        = fn OBJ packer => fn border => packer_set_default_border_width_ packer border

    val packer_set_default_pad_: gtkobj -> word -> word -> unit
        = app3(symb"mgtk_gtk_packer_set_default_pad")
    val packer_set_default_pad: 'a GtkPacker -> word -> word -> unit
        = fn OBJ packer => fn pad_x => fn pad_y => packer_set_default_pad_ packer pad_x pad_y

    val packer_set_default_ipad_: gtkobj -> word -> word -> unit
        = app3(symb"mgtk_gtk_packer_set_default_ipad")
    val packer_set_default_ipad: 'a GtkPacker -> word -> word -> unit
        = fn OBJ packer => fn ipad_x => fn ipad_y => packer_set_default_ipad_ packer ipad_x ipad_y

    (* *** Paned *** *)

    type 'a paned_t = base
    type 'a GtkPaned = 'a paned_t GtkContainer


    val paned_add1_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_paned_add1")
    val paned_add1: 'a GtkPaned -> 'b GtkWidget -> unit
        = fn OBJ paned => fn OBJ child => paned_add1_ paned child

    val paned_add2_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_paned_add2")
    val paned_add2: 'a GtkPaned -> 'b GtkWidget -> unit
        = fn OBJ paned => fn OBJ child => paned_add2_ paned child

    val paned_pack1_: gtkobj -> gtkobj -> bool -> bool -> unit
        = app4(symb"mgtk_gtk_paned_pack1")
    val paned_pack1: 'a GtkPaned -> 'b GtkWidget -> bool -> bool -> unit
        = fn OBJ paned => fn OBJ child => fn resize => fn shrink => paned_pack1_ paned child resize shrink

    val paned_pack2_: gtkobj -> gtkobj -> bool -> bool -> unit
        = app4(symb"mgtk_gtk_paned_pack2")
    val paned_pack2: 'a GtkPaned -> 'b GtkWidget -> bool -> bool -> unit
        = fn OBJ paned => fn OBJ child => fn resize => fn shrink => paned_pack2_ paned child resize shrink

    val paned_set_position_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_paned_set_position")
    val paned_set_position: 'a GtkPaned -> int -> unit
        = fn OBJ paned => fn position => paned_set_position_ paned position

    val paned_set_handle_size_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_paned_set_handle_size")
    val paned_set_handle_size: 'a GtkPaned -> word -> unit
        = fn OBJ paned => fn size => paned_set_handle_size_ paned size

    val paned_set_gutter_size_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_paned_set_gutter_size")
    val paned_set_gutter_size: 'a GtkPaned -> word -> unit
        = fn OBJ paned => fn size => paned_set_gutter_size_ paned size

    (* *** HPaned *** *)

    type 'a hpaned_t = base
    type 'a GtkHPaned = 'a hpaned_t GtkPaned


    val hpaned_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hpaned_new")
    val hpaned_new: unit -> base GtkHPaned
        = fn dummy => OBJ(hpaned_new_ dummy)

    (* *** VPaned *** *)

    type 'a vpaned_t = base
    type 'a GtkVPaned = 'a vpaned_t GtkPaned


    val vpaned_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vpaned_new")
    val vpaned_new: unit -> base GtkVPaned
        = fn dummy => OBJ(vpaned_new_ dummy)

    (* *** Frame *** *)

    type 'a frame_t = base
    type 'a GtkFrame = 'a frame_t GtkBin


    val frame_new_: string option -> gtkobj
        = app1(symb"mgtk_gtk_frame_new")
    val frame_new: string option -> base GtkFrame
        = fn label => OBJ(frame_new_ label)

    val frame_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_frame_new_short")
    val frame_new': unit -> base GtkFrame
        = fn dummy => OBJ(frame_new'_ dummy)

    val frame_set_label_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_frame_set_label")
    val frame_set_label: 'a GtkFrame -> string -> unit
        = fn OBJ frame => fn label => frame_set_label_ frame label

    val frame_set_label_align_: gtkobj -> real -> real -> unit
        = app3(symb"mgtk_gtk_frame_set_label_align")
    val frame_set_label_align: 'a GtkFrame -> real -> real -> unit
        = fn OBJ frame => fn xalign => fn yalign => frame_set_label_align_ frame xalign yalign

    val frame_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_frame_set_shadow_type")
    val frame_set_shadow_type: 'a GtkFrame -> gtk_shadow_type -> unit
        = fn OBJ frame => fn typ => frame_set_shadow_type_ frame typ

    (* *** AspectFrame *** *)

    type 'a aspectframe_t = base
    type 'a GtkAspectFrame = 'a aspectframe_t GtkFrame


    val aspect_frame_new_: string -> real -> real -> real -> int -> gtkobj
        = app5(symb"mgtk_gtk_aspect_frame_new")
    val aspect_frame_new: string -> real -> real -> real -> int -> base GtkAspectFrame
        = fn label => fn xalign => fn yalign => fn ratio => fn obey_child => OBJ(aspect_frame_new_ label xalign yalign ratio obey_child)

    val aspect_frame_set_: gtkobj -> real -> real -> real -> int -> unit
        = app5(symb"mgtk_gtk_aspect_frame_set")
    val aspect_frame_set: 'a GtkAspectFrame -> real -> real -> real -> int -> unit
        = fn OBJ aspect_frame => fn xalign => fn yalign => fn ratio => fn obey_child => aspect_frame_set_ aspect_frame xalign yalign ratio obey_child

    (* *** Viewport *** *)

    type 'a viewport_t = base
    type 'a GtkViewport = 'a viewport_t GtkBin


    val viewport_new_: gtkobj option -> gtkobj option -> gtkobj
        = app2(symb"mgtk_gtk_viewport_new")
    val viewport_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkViewport
        = fn hadjustment => fn vadjustment => OBJ(viewport_new_ (unwrapObjOpt hadjustment) (unwrapObjOpt vadjustment))

    val viewport_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_viewport_new_short")
    val viewport_new': unit -> base GtkViewport
        = fn dummy => OBJ(viewport_new'_ dummy)

    val viewport_get_hadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_viewport_get_hadjustment")
    val viewport_get_hadjustment: 'a GtkViewport -> base GtkAdjustment
        = fn OBJ viewport => OBJ(viewport_get_hadjustment_ viewport)

    val viewport_get_vadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_viewport_get_vadjustment")
    val viewport_get_vadjustment: 'a GtkViewport -> base GtkAdjustment
        = fn OBJ viewport => OBJ(viewport_get_vadjustment_ viewport)

    val viewport_set_hadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_viewport_set_hadjustment")
    val viewport_set_hadjustment: 'a GtkViewport -> 'b GtkAdjustment -> unit
        = fn OBJ viewport => fn OBJ adjustment => viewport_set_hadjustment_ viewport adjustment

    val viewport_set_vadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_viewport_set_vadjustment")
    val viewport_set_vadjustment: 'a GtkViewport -> 'b GtkAdjustment -> unit
        = fn OBJ viewport => fn OBJ adjustment => viewport_set_vadjustment_ viewport adjustment

    val viewport_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_viewport_set_shadow_type")
    val viewport_set_shadow_type: 'a GtkViewport -> gtk_shadow_type -> unit
        = fn OBJ viewport => fn typ => viewport_set_shadow_type_ viewport typ

    (* *** ScrolledWindow *** *)

    type 'a scrolledwindow_t = base
    type 'a GtkScrolledWindow = 'a scrolledwindow_t GtkContainer


    val scrolled_window_new_: gtkobj option -> gtkobj option -> gtkobj
        = app2(symb"mgtk_gtk_scrolled_window_new")
    val scrolled_window_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkScrolledWindow
        = fn hadjustment => fn vadjustment => OBJ(scrolled_window_new_ (unwrapObjOpt hadjustment) (unwrapObjOpt vadjustment))

    val scrolled_window_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_scrolled_window_new_short")
    val scrolled_window_new': unit -> base GtkScrolledWindow
        = fn dummy => OBJ(scrolled_window_new'_ dummy)

    val scrolled_window_set_hadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_scrolled_window_set_hadjustment")
    val scrolled_window_set_hadjustment: 'a GtkScrolledWindow -> 'b GtkAdjustment -> unit
        = fn OBJ scrolled_window => fn OBJ adjustment => scrolled_window_set_hadjustment_ scrolled_window adjustment

    val scrolled_window_set_vadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_scrolled_window_set_vadjustment")
    val scrolled_window_set_vadjustment: 'a GtkScrolledWindow -> 'b GtkAdjustment -> unit
        = fn OBJ scrolled_window => fn OBJ adjustment => scrolled_window_set_vadjustment_ scrolled_window adjustment

    val scrolled_window_get_hadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_scrolled_window_get_hadjustment")
    val scrolled_window_get_hadjustment: 'a GtkScrolledWindow -> base GtkAdjustment
        = fn OBJ scrolled_window => OBJ(scrolled_window_get_hadjustment_ scrolled_window)

    val scrolled_window_get_vadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_scrolled_window_get_vadjustment")
    val scrolled_window_get_vadjustment: 'a GtkScrolledWindow -> base GtkAdjustment
        = fn OBJ scrolled_window => OBJ(scrolled_window_get_vadjustment_ scrolled_window)

    val scrolled_window_set_policy_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_scrolled_window_set_policy")
    val scrolled_window_set_policy: 'a GtkScrolledWindow -> gtk_policy_type -> gtk_policy_type -> unit
        = fn OBJ scrolled_window => fn hscrollbar_policy => fn vscrollbar_policy => scrolled_window_set_policy_ scrolled_window hscrollbar_policy vscrollbar_policy

    val scrolled_window_set_placement_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_scrolled_window_set_placement")
    val scrolled_window_set_placement: 'a GtkScrolledWindow -> gtk_corner_type -> unit
        = fn OBJ scrolled_window => fn window_placement => scrolled_window_set_placement_ scrolled_window window_placement

    val scrolled_window_add_with_viewport_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_scrolled_window_add_with_viewport")
    val scrolled_window_add_with_viewport: 'a GtkScrolledWindow -> 'b GtkWidget -> unit
        = fn OBJ scrolled_window => fn OBJ child => scrolled_window_add_with_viewport_ scrolled_window child

    (* *** Notebook *** *)

    type 'a notebook_t = base
    type 'a GtkNotebook = 'a notebook_t GtkContainer

    val notebook_get_tab_pos_: gtkobj -> int
        = app1(symb"mgtk_gtk_notebook_get_tab_pos")
    val notebook_get_tab_pos: 'a GtkNotebook -> gtk_position_type
        = fn OBJ wid => notebook_get_tab_pos_ wid


    val notebook_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_notebook_new")
    val notebook_new: unit -> base GtkNotebook
        = fn dummy => OBJ(notebook_new_ dummy)

    val notebook_append_page_: gtkobj -> gtkobj -> gtkobj -> unit
        = app3(symb"mgtk_gtk_notebook_append_page")
    val notebook_append_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => notebook_append_page_ notebook child tab_label

    val notebook_append_page_menu_: gtkobj -> gtkobj -> gtkobj -> gtkobj -> unit
        = app4(symb"mgtk_gtk_notebook_append_page_menu")
    val notebook_append_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => fn OBJ menu_label => notebook_append_page_menu_ notebook child tab_label menu_label

    val notebook_prepend_page_: gtkobj -> gtkobj -> gtkobj -> unit
        = app3(symb"mgtk_gtk_notebook_prepend_page")
    val notebook_prepend_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => notebook_prepend_page_ notebook child tab_label

    val notebook_prepend_page_menu_: gtkobj -> gtkobj -> gtkobj -> gtkobj -> unit
        = app4(symb"mgtk_gtk_notebook_prepend_page_menu")
    val notebook_prepend_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => fn OBJ menu_label => notebook_prepend_page_menu_ notebook child tab_label menu_label

    val notebook_insert_page_: gtkobj -> gtkobj -> gtkobj -> int -> unit
        = app4(symb"mgtk_gtk_notebook_insert_page")
    val notebook_insert_page: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> int -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => fn position => notebook_insert_page_ notebook child tab_label position

    val notebook_insert_page_menu_: gtkobj -> gtkobj -> gtkobj -> gtkobj -> int -> unit
        = app5(symb"mgtk_gtk_notebook_insert_page_menu")
    val notebook_insert_page_menu: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> 'd GtkWidget -> int -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => fn OBJ menu_label => fn position => notebook_insert_page_menu_ notebook child tab_label menu_label position

    val notebook_remove_page_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_notebook_remove_page")
    val notebook_remove_page: 'a GtkNotebook -> int -> unit
        = fn OBJ notebook => fn page_num => notebook_remove_page_ notebook page_num

    val notebook_get_current_page_: gtkobj -> int
        = app1(symb"mgtk_gtk_notebook_get_current_page")
    val notebook_get_current_page: 'a GtkNotebook -> int
        = fn OBJ notebook => notebook_get_current_page_ notebook

    val notebook_get_nth_page_: gtkobj -> int -> gtkobj
        = app2(symb"mgtk_gtk_notebook_get_nth_page")
    val notebook_get_nth_page: 'a GtkNotebook -> int -> base GtkWidget
        = fn OBJ notebook => fn page_num => OBJ(notebook_get_nth_page_ notebook page_num)

    val notebook_page_num_: gtkobj -> gtkobj -> int
        = app2(symb"mgtk_gtk_notebook_page_num")
    val notebook_page_num: 'a GtkNotebook -> 'b GtkWidget -> int
        = fn OBJ notebook => fn OBJ page => notebook_page_num_ notebook page

    val notebook_set_page_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_notebook_set_page")
    val notebook_set_page: 'a GtkNotebook -> int -> unit
        = fn OBJ notebook => fn page_num => notebook_set_page_ notebook page_num

    val notebook_next_page_: gtkobj -> unit
        = app1(symb"mgtk_gtk_notebook_next_page")
    val notebook_next_page: 'a GtkNotebook -> unit
        = fn OBJ notebook => notebook_next_page_ notebook

    val notebook_prev_page_: gtkobj -> unit
        = app1(symb"mgtk_gtk_notebook_prev_page")
    val notebook_prev_page: 'a GtkNotebook -> unit
        = fn OBJ notebook => notebook_prev_page_ notebook

    val notebook_reorder_child_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_notebook_reorder_child")
    val notebook_reorder_child: 'a GtkNotebook -> 'b GtkWidget -> int -> unit
        = fn OBJ notebook => fn OBJ child => fn position => notebook_reorder_child_ notebook child position

    val notebook_set_tab_pos_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_notebook_set_tab_pos")
    val notebook_set_tab_pos: 'a GtkNotebook -> gtk_position_type -> unit
        = fn OBJ notebook => fn pos => notebook_set_tab_pos_ notebook pos

    val notebook_set_show_tabs_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_notebook_set_show_tabs")
    val notebook_set_show_tabs: 'a GtkNotebook -> bool -> unit
        = fn OBJ notebook => fn show_tabs => notebook_set_show_tabs_ notebook show_tabs

    val notebook_set_show_border_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_notebook_set_show_border")
    val notebook_set_show_border: 'a GtkNotebook -> bool -> unit
        = fn OBJ notebook => fn show_border => notebook_set_show_border_ notebook show_border

    val notebook_set_scrollable_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_notebook_set_scrollable")
    val notebook_set_scrollable: 'a GtkNotebook -> int -> unit
        = fn OBJ notebook => fn scrollable => notebook_set_scrollable_ notebook scrollable

    val notebook_set_homogeneous_tabs_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_notebook_set_homogeneous_tabs")
    val notebook_set_homogeneous_tabs: 'a GtkNotebook -> bool -> unit
        = fn OBJ notebook => fn homogeneous => notebook_set_homogeneous_tabs_ notebook homogeneous

    val notebook_set_tab_border_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_notebook_set_tab_border")
    val notebook_set_tab_border: 'a GtkNotebook -> int -> unit
        = fn OBJ notebook => fn border_width => notebook_set_tab_border_ notebook border_width

    val notebook_set_tab_hborder_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_notebook_set_tab_hborder")
    val notebook_set_tab_hborder: 'a GtkNotebook -> word -> unit
        = fn OBJ notebook => fn tab_hborder => notebook_set_tab_hborder_ notebook tab_hborder

    val notebook_set_tab_vborder_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_notebook_set_tab_vborder")
    val notebook_set_tab_vborder: 'a GtkNotebook -> word -> unit
        = fn OBJ notebook => fn tab_vborder => notebook_set_tab_vborder_ notebook tab_vborder

    val notebook_popup_enable_: gtkobj -> unit
        = app1(symb"mgtk_gtk_notebook_popup_enable")
    val notebook_popup_enable: 'a GtkNotebook -> unit
        = fn OBJ notebook => notebook_popup_enable_ notebook

    val notebook_popup_disable_: gtkobj -> unit
        = app1(symb"mgtk_gtk_notebook_popup_disable")
    val notebook_popup_disable: 'a GtkNotebook -> unit
        = fn OBJ notebook => notebook_popup_disable_ notebook

    val notebook_get_tab_label_: gtkobj -> gtkobj -> gtkobj
        = app2(symb"mgtk_gtk_notebook_get_tab_label")
    val notebook_get_tab_label: 'a GtkNotebook -> 'b GtkWidget -> base GtkWidget
        = fn OBJ notebook => fn OBJ child => OBJ(notebook_get_tab_label_ notebook child)

    val notebook_set_tab_label_: gtkobj -> gtkobj -> gtkobj -> unit
        = app3(symb"mgtk_gtk_notebook_set_tab_label")
    val notebook_set_tab_label: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ tab_label => notebook_set_tab_label_ notebook child tab_label

    val notebook_set_tab_label_text_: gtkobj -> gtkobj -> string -> unit
        = app3(symb"mgtk_gtk_notebook_set_tab_label_text")
    val notebook_set_tab_label_text: 'a GtkNotebook -> 'b GtkWidget -> string -> unit
        = fn OBJ notebook => fn OBJ child => fn tab_text => notebook_set_tab_label_text_ notebook child tab_text

    val notebook_get_menu_label_: gtkobj -> gtkobj -> gtkobj
        = app2(symb"mgtk_gtk_notebook_get_menu_label")
    val notebook_get_menu_label: 'a GtkNotebook -> 'b GtkWidget -> base GtkWidget
        = fn OBJ notebook => fn OBJ child => OBJ(notebook_get_menu_label_ notebook child)

    val notebook_set_menu_label_: gtkobj -> gtkobj -> gtkobj -> unit
        = app3(symb"mgtk_gtk_notebook_set_menu_label")
    val notebook_set_menu_label: 'a GtkNotebook -> 'b GtkWidget -> 'c GtkWidget -> unit
        = fn OBJ notebook => fn OBJ child => fn OBJ menu_label => notebook_set_menu_label_ notebook child menu_label

    val notebook_set_menu_label_text_: gtkobj -> gtkobj -> string -> unit
        = app3(symb"mgtk_gtk_notebook_set_menu_label_text")
    val notebook_set_menu_label_text: 'a GtkNotebook -> 'b GtkWidget -> string -> unit
        = fn OBJ notebook => fn OBJ child => fn menu_text => notebook_set_menu_label_text_ notebook child menu_text

    val notebook_query_tab_label_packing_: gtkobj -> gtkobj -> bool * bool * int
        = app2(symb"mgtk_gtk_notebook_query_tab_label_packing")
    val notebook_query_tab_label_packing: 'a GtkNotebook -> 'b GtkWidget -> bool * bool * gtk_pack_type
        = fn OBJ notebook => fn OBJ child => notebook_query_tab_label_packing_ notebook child

    val notebook_set_tab_label_packing_: gtkobj -> gtkobj -> bool -> bool -> int -> unit
        = app5(symb"mgtk_gtk_notebook_set_tab_label_packing")
    val notebook_set_tab_label_packing: 'a GtkNotebook -> 'b GtkWidget -> bool -> bool -> gtk_pack_type -> unit
        = fn OBJ notebook => fn OBJ child => fn expand => fn fill => fn pack_type => notebook_set_tab_label_packing_ notebook child expand fill pack_type

    (* *** Alignment *** *)

    type 'a alignment_t = base
    type 'a GtkAlignment = 'a alignment_t GtkBin


    val alignment_new_: real -> real -> real -> real -> gtkobj
        = app4(symb"mgtk_gtk_alignment_new")
    val alignment_new: real -> real -> real -> real -> base GtkAlignment
        = fn xalign => fn yalign => fn xscale => fn yscale => OBJ(alignment_new_ xalign yalign xscale yscale)

    val alignment_set_: gtkobj -> real -> real -> real -> real -> unit
        = app5(symb"mgtk_gtk_alignment_set")
    val alignment_set: 'a GtkAlignment -> real -> real -> real -> real -> unit
        = fn OBJ alignment => fn xalign => fn yalign => fn xscale => fn yscale => alignment_set_ alignment xalign yalign xscale yscale

    (* *** Layout *** *)

    type 'a layout_t = base
    type 'a GtkLayout = 'a layout_t GtkContainer


    val layout_new_: gtkobj option -> gtkobj option -> gtkobj
        = app2(symb"mgtk_gtk_layout_new")
    val layout_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkLayout
        = fn hadjustment => fn vadjustment => OBJ(layout_new_ (unwrapObjOpt hadjustment) (unwrapObjOpt vadjustment))

    val layout_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_layout_new_short")
    val layout_new': unit -> base GtkLayout
        = fn dummy => OBJ(layout_new'_ dummy)

    val layout_put_: gtkobj -> gtkobj -> int -> int -> unit
        = app4(symb"mgtk_gtk_layout_put")
    val layout_put: 'a GtkLayout -> 'b GtkWidget -> int -> int -> unit
        = fn OBJ layout => fn OBJ child => fn x => fn y => layout_put_ layout child x y

    val layout_move_: gtkobj -> gtkobj -> int -> int -> unit
        = app4(symb"mgtk_gtk_layout_move")
    val layout_move: 'a GtkLayout -> 'b GtkWidget -> int -> int -> unit
        = fn OBJ layout => fn OBJ child => fn x => fn y => layout_move_ layout child x y

    val layout_set_size_: gtkobj -> word -> word -> unit
        = app3(symb"mgtk_gtk_layout_set_size")
    val layout_set_size: 'a GtkLayout -> word -> word -> unit
        = fn OBJ layout => fn width => fn height => layout_set_size_ layout width height

    val layout_freeze_: gtkobj -> unit
        = app1(symb"mgtk_gtk_layout_freeze")
    val layout_freeze: 'a GtkLayout -> unit
        = fn OBJ layout => layout_freeze_ layout

    val layout_thaw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_layout_thaw")
    val layout_thaw: 'a GtkLayout -> unit
        = fn OBJ layout => layout_thaw_ layout

    val layout_get_hadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_layout_get_hadjustment")
    val layout_get_hadjustment: 'a GtkLayout -> base GtkAdjustment
        = fn OBJ layout => OBJ(layout_get_hadjustment_ layout)

    val layout_get_vadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_layout_get_vadjustment")
    val layout_get_vadjustment: 'a GtkLayout -> base GtkAdjustment
        = fn OBJ layout => OBJ(layout_get_vadjustment_ layout)

    val layout_set_hadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_layout_set_hadjustment")
    val layout_set_hadjustment: 'a GtkLayout -> 'b GtkAdjustment -> unit
        = fn OBJ layout => fn OBJ adjustment => layout_set_hadjustment_ layout adjustment

    val layout_set_vadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_layout_set_vadjustment")
    val layout_set_vadjustment: 'a GtkLayout -> 'b GtkAdjustment -> unit
        = fn OBJ layout => fn OBJ adjustment => layout_set_vadjustment_ layout adjustment

    (* *** Plug *** *)

    type 'a plug_t = base
    type 'a GtkPlug = 'a plug_t GtkWindow


    val plug_new_: word -> gtkobj
        = app1(symb"mgtk_gtk_plug_new")
    val plug_new: word -> base GtkPlug
        = fn socket_id => OBJ(plug_new_ socket_id)

    (* *** Toolbar *** *)

    type 'a toolbar_t = base
    type 'a GtkToolbar = 'a toolbar_t GtkContainer


    val toolbar_new_: int -> int -> gtkobj
        = app2(symb"mgtk_gtk_toolbar_new")
    val toolbar_new: gtk_orientation -> gtk_toolbar_style -> base GtkToolbar
        = fn orientation => fn style => OBJ(toolbar_new_ orientation style)

    val toolbar_append_space_: gtkobj -> unit
        = app1(symb"mgtk_gtk_toolbar_append_space")
    val toolbar_append_space: 'a GtkToolbar -> unit
        = fn OBJ toolbar => toolbar_append_space_ toolbar

    val toolbar_prepend_space_: gtkobj -> unit
        = app1(symb"mgtk_gtk_toolbar_prepend_space")
    val toolbar_prepend_space: 'a GtkToolbar -> unit
        = fn OBJ toolbar => toolbar_prepend_space_ toolbar

    val toolbar_insert_space_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_insert_space")
    val toolbar_insert_space: 'a GtkToolbar -> int -> unit
        = fn OBJ toolbar => fn position => toolbar_insert_space_ toolbar position

    val toolbar_append_widget_: gtkobj -> gtkobj -> string -> string -> unit
        = app4(symb"mgtk_gtk_toolbar_append_widget")
    val toolbar_append_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> unit
        = fn OBJ Toolbar => fn OBJ Widget => fn tooltip_text => fn tooltip_private_text => toolbar_append_widget_ Toolbar Widget tooltip_text tooltip_private_text

    val toolbar_prepend_widget_: gtkobj -> gtkobj -> string -> string -> unit
        = app4(symb"mgtk_gtk_toolbar_prepend_widget")
    val toolbar_prepend_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> unit
        = fn OBJ Toolbar => fn OBJ Widget => fn tooltip_text => fn tooltip_private_text => toolbar_prepend_widget_ Toolbar Widget tooltip_text tooltip_private_text

    val toolbar_insert_widget_: gtkobj -> gtkobj -> string -> string -> int -> unit
        = app5(symb"mgtk_gtk_toolbar_insert_widget")
    val toolbar_insert_widget: 'a GtkToolbar -> 'b GtkWidget -> string -> string -> int -> unit
        = fn OBJ toolbar => fn OBJ widget => fn tooltip_text => fn tooltip_private_text => fn position => toolbar_insert_widget_ toolbar widget tooltip_text tooltip_private_text position

    val toolbar_set_orientation_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_set_orientation")
    val toolbar_set_orientation: 'a GtkToolbar -> gtk_orientation -> unit
        = fn OBJ toolbar => fn orientation => toolbar_set_orientation_ toolbar orientation

    val toolbar_set_style_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_set_style")
    val toolbar_set_style: 'a GtkToolbar -> gtk_toolbar_style -> unit
        = fn OBJ toolbar => fn style => toolbar_set_style_ toolbar style

    val toolbar_set_space_size_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_set_space_size")
    val toolbar_set_space_size: 'a GtkToolbar -> int -> unit
        = fn OBJ toolbar => fn space_size => toolbar_set_space_size_ toolbar space_size

    val toolbar_set_space_style_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_set_space_style")
    val toolbar_set_space_style: 'a GtkToolbar -> gtk_toolbar_space_style -> unit
        = fn OBJ toolbar => fn space_style => toolbar_set_space_style_ toolbar space_style

    val toolbar_set_tooltips_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_toolbar_set_tooltips")
    val toolbar_set_tooltips: 'a GtkToolbar -> bool -> unit
        = fn OBJ toolbar => fn enable => toolbar_set_tooltips_ toolbar enable

    val toolbar_set_button_relief_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_toolbar_set_button_relief")
    val toolbar_set_button_relief: 'a GtkToolbar -> gtk_relief_style -> unit
        = fn OBJ toolbar => fn relief => toolbar_set_button_relief_ toolbar relief

    val toolbar_get_button_relief_: gtkobj -> int
        = app1(symb"mgtk_gtk_toolbar_get_button_relief")
    val toolbar_get_button_relief: 'a GtkToolbar -> gtk_relief_style
        = fn OBJ toolbar => toolbar_get_button_relief_ toolbar

    (* *** Button *** *)

    type 'a button_t = base
    type 'a GtkButton = 'a button_t GtkContainer


    val button_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_button_new")
    val button_new: unit -> base GtkButton
        = fn dummy => OBJ(button_new_ dummy)

    val button_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_button_new_with_label")
    val button_new_with_label: string -> base GtkButton
        = fn label => OBJ(button_new_with_label_ label)

    val button_pressed_: gtkobj -> unit
        = app1(symb"mgtk_gtk_button_pressed")
    val button_pressed: 'a GtkButton -> unit
        = fn OBJ button => button_pressed_ button

    val button_released_: gtkobj -> unit
        = app1(symb"mgtk_gtk_button_released")
    val button_released: 'a GtkButton -> unit
        = fn OBJ button => button_released_ button

    val button_clicked_: gtkobj -> unit
        = app1(symb"mgtk_gtk_button_clicked")
    val button_clicked: 'a GtkButton -> unit
        = fn OBJ button => button_clicked_ button

    val button_enter_: gtkobj -> unit
        = app1(symb"mgtk_gtk_button_enter")
    val button_enter: 'a GtkButton -> unit
        = fn OBJ button => button_enter_ button

    val button_leave_: gtkobj -> unit
        = app1(symb"mgtk_gtk_button_leave")
    val button_leave: 'a GtkButton -> unit
        = fn OBJ button => button_leave_ button

    val button_set_relief_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_button_set_relief")
    val button_set_relief: 'a GtkButton -> gtk_relief_style -> unit
        = fn OBJ button => fn newstyle => button_set_relief_ button newstyle

    val button_get_relief_: gtkobj -> int
        = app1(symb"mgtk_gtk_button_get_relief")
    val button_get_relief: 'a GtkButton -> gtk_relief_style
        = fn OBJ button => button_get_relief_ button

    (* *** ToggleButton *** *)

    type 'a togglebutton_t = base
    type 'a GtkToggleButton = 'a togglebutton_t GtkButton

    val toggle_button_get_draw_indicator_: gtkobj -> bool
        = app1(symb"mgtk_gtk_toggle_button_get_draw_indicator")
    val toggle_button_get_draw_indicator: 'a GtkToggleButton -> bool
        = fn OBJ wid => toggle_button_get_draw_indicator_ wid


    val toggle_button_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_toggle_button_new")
    val toggle_button_new: unit -> base GtkToggleButton
        = fn dummy => OBJ(toggle_button_new_ dummy)

    val toggle_button_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_toggle_button_new_with_label")
    val toggle_button_new_with_label: string -> base GtkToggleButton
        = fn label => OBJ(toggle_button_new_with_label_ label)

    val toggle_button_set_mode_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_toggle_button_set_mode")
    val toggle_button_set_mode: 'a GtkToggleButton -> bool -> unit
        = fn OBJ toggle_button => fn draw_indicator => toggle_button_set_mode_ toggle_button draw_indicator

    val toggle_button_set_active_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_toggle_button_set_active")
    val toggle_button_set_active: 'a GtkToggleButton -> bool -> unit
        = fn OBJ toggle_button => fn state => toggle_button_set_active_ toggle_button state

    val toggle_button_get_active_: gtkobj -> bool
        = app1(symb"mgtk_gtk_toggle_button_get_active")
    val toggle_button_get_active: 'a GtkToggleButton -> bool
        = fn OBJ toggle_button => toggle_button_get_active_ toggle_button

    val toggle_button_toggled_: gtkobj -> unit
        = app1(symb"mgtk_gtk_toggle_button_toggled")
    val toggle_button_toggled: 'a GtkToggleButton -> unit
        = fn OBJ toggle_button => toggle_button_toggled_ toggle_button

    (* *** CheckButton *** *)

    type 'a checkbutton_t = base
    type 'a GtkCheckButton = 'a checkbutton_t GtkToggleButton


    val check_button_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_check_button_new")
    val check_button_new: unit -> base GtkCheckButton
        = fn dummy => OBJ(check_button_new_ dummy)

    val check_button_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_check_button_new_with_label")
    val check_button_new_with_label: string -> base GtkCheckButton
        = fn label => OBJ(check_button_new_with_label_ label)

    (* *** RadioButton *** *)

    type 'a radiobutton_t = base
    type 'a GtkRadioButton = 'a radiobutton_t GtkCheckButton


    val radio_button_new_from_widget_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_radio_button_new_from_widget")
    val radio_button_new_from_widget: 'a GtkRadioButton -> base GtkRadioButton
        = fn OBJ group => OBJ(radio_button_new_from_widget_ group)

    val radio_button_new_with_label_from_widget_: gtkobj option -> string -> gtkobj
        = app2(symb"mgtk_gtk_radio_button_new_with_label_from_widget")
    val radio_button_new_with_label_from_widget: 'a GtkRadioButton option -> string -> base GtkRadioButton
        = fn group => fn label => OBJ(radio_button_new_with_label_from_widget_ (unwrapObjOpt group) label)

    val radio_button_new_with_label_from_widget'_: string -> gtkobj
        = app1(symb"mgtk_gtk_radio_button_new_with_label_from_widget_short")
    val radio_button_new_with_label_from_widget': string -> base GtkRadioButton
        = fn label => OBJ(radio_button_new_with_label_from_widget'_ label)

    (* *** Misc *** *)

    type 'a misc_t = base
    type 'a GtkMisc = 'a misc_t GtkWidget


    val misc_set_alignment_: gtkobj -> real -> real -> unit
        = app3(symb"mgtk_gtk_misc_set_alignment")
    val misc_set_alignment: 'a GtkMisc -> real -> real -> unit
        = fn OBJ misc => fn xalign => fn yalign => misc_set_alignment_ misc xalign yalign

    val misc_set_padding_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_misc_set_padding")
    val misc_set_padding: 'a GtkMisc -> int -> int -> unit
        = fn OBJ misc => fn xpad => fn ypad => misc_set_padding_ misc xpad ypad

    (* *** Arrow *** *)

    type 'a arrow_t = base
    type 'a GtkArrow = 'a arrow_t GtkMisc


    val arrow_new_: int -> int -> gtkobj
        = app2(symb"mgtk_gtk_arrow_new")
    val arrow_new: gtk_arrow_type -> gtk_shadow_type -> base GtkArrow
        = fn arrow_type => fn shadow_type => OBJ(arrow_new_ arrow_type shadow_type)

    val arrow_set_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_arrow_set")
    val arrow_set: 'a GtkArrow -> gtk_arrow_type -> gtk_shadow_type -> unit
        = fn OBJ arrow => fn arrow_type => fn shadow_type => arrow_set_ arrow arrow_type shadow_type

    (* *** Label *** *)

    type 'a label_t = base
    type 'a GtkLabel = 'a label_t GtkMisc


    val label_new_: string -> gtkobj
        = app1(symb"mgtk_gtk_label_new")
    val label_new: string -> base GtkLabel
        = fn str => OBJ(label_new_ str)

    val label_set_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_label_set_text")
    val label_set_text: 'a GtkLabel -> string -> unit
        = fn OBJ label => fn str => label_set_text_ label str

    val label_set_pattern_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_label_set_pattern")
    val label_set_pattern: 'a GtkLabel -> string -> unit
        = fn OBJ label => fn pattern => label_set_pattern_ label pattern

    val label_set_justify_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_label_set_justify")
    val label_set_justify: 'a GtkLabel -> gtk_justification -> unit
        = fn OBJ label => fn jtype => label_set_justify_ label jtype

    val label_set_line_wrap_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_label_set_line_wrap")
    val label_set_line_wrap: 'a GtkLabel -> bool -> unit
        = fn OBJ label => fn wrap => label_set_line_wrap_ label wrap

    val label_parse_uline_: gtkobj -> string -> word
        = app2(symb"mgtk_gtk_label_parse_uline")
    val label_parse_uline: 'a GtkLabel -> string -> word
        = fn OBJ label => fn string => label_parse_uline_ label string

    val label_get_: gtkobj -> string
        = app1(symb"mgtk_gtk_label_get")
    val label_get: 'a GtkLabel -> string
        = fn OBJ label => label_get_ label

    (* *** AccelLabel *** *)

    type 'a accellabel_t = base
    type 'a GtkAccelLabel = 'a accellabel_t GtkLabel


    val accel_label_new_: string -> gtkobj
        = app1(symb"mgtk_gtk_accel_label_new")
    val accel_label_new: string -> base GtkAccelLabel
        = fn string => OBJ(accel_label_new_ string)

    val accel_label_get_accel_width_: gtkobj -> word
        = app1(symb"mgtk_gtk_accel_label_get_accel_width")
    val accel_label_get_accel_width: 'a GtkAccelLabel -> word
        = fn OBJ accel_label => accel_label_get_accel_width_ accel_label

    val accel_label_set_accel_widget_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_accel_label_set_accel_widget")
    val accel_label_set_accel_widget: 'a GtkAccelLabel -> 'b GtkWidget -> unit
        = fn OBJ accel_label => fn OBJ accel_widget => accel_label_set_accel_widget_ accel_label accel_widget

    val accel_label_refetch_: gtkobj -> bool
        = app1(symb"mgtk_gtk_accel_label_refetch")
    val accel_label_refetch: 'a GtkAccelLabel -> bool
        = fn OBJ accel_label => accel_label_refetch_ accel_label

    (* *** TipsQuery *** *)

    type 'a tipsquery_t = base
    type 'a GtkTipsQuery = 'a tipsquery_t GtkLabel


    val tips_query_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_tips_query_new")
    val tips_query_new: unit -> base GtkTipsQuery
        = fn dummy => OBJ(tips_query_new_ dummy)

    val tips_query_start_query_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tips_query_start_query")
    val tips_query_start_query: 'a GtkTipsQuery -> unit
        = fn OBJ tips_query => tips_query_start_query_ tips_query

    val tips_query_stop_query_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tips_query_stop_query")
    val tips_query_stop_query: 'a GtkTipsQuery -> unit
        = fn OBJ tips_query => tips_query_stop_query_ tips_query

    val tips_query_set_caller_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tips_query_set_caller")
    val tips_query_set_caller: 'a GtkTipsQuery -> 'b GtkWidget -> unit
        = fn OBJ tips_query => fn OBJ caller => tips_query_set_caller_ tips_query caller

    val tips_query_set_labels_: gtkobj -> string -> string -> unit
        = app3(symb"mgtk_gtk_tips_query_set_labels")
    val tips_query_set_labels: 'a GtkTipsQuery -> string -> string -> unit
        = fn OBJ tips_query => fn label_inactive => fn label_no_tip => tips_query_set_labels_ tips_query label_inactive label_no_tip

    (* *** Item *** *)

    type 'a item_t = base
    type 'a GtkItem = 'a item_t GtkBin


    val item_select_: gtkobj -> unit
        = app1(symb"mgtk_gtk_item_select")
    val item_select: 'a GtkItem -> unit
        = fn OBJ item => item_select_ item

    val item_deselect_: gtkobj -> unit
        = app1(symb"mgtk_gtk_item_deselect")
    val item_deselect: 'a GtkItem -> unit
        = fn OBJ item => item_deselect_ item

    val item_toggle_: gtkobj -> unit
        = app1(symb"mgtk_gtk_item_toggle")
    val item_toggle: 'a GtkItem -> unit
        = fn OBJ item => item_toggle_ item

    (* *** Statusbar *** *)

    type 'a statusbar_t = base
    type 'a GtkStatusbar = 'a statusbar_t GtkHBox


    val statusbar_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_statusbar_new")
    val statusbar_new: unit -> base GtkStatusbar
        = fn dummy => OBJ(statusbar_new_ dummy)

    val statusbar_push_: gtkobj -> word -> string -> word
        = app3(symb"mgtk_gtk_statusbar_push")
    val statusbar_push: 'a GtkStatusbar -> word -> string -> word
        = fn OBJ statusbar => fn context_id => fn text => statusbar_push_ statusbar context_id text

    val statusbar_pop_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_statusbar_pop")
    val statusbar_pop: 'a GtkStatusbar -> word -> unit
        = fn OBJ statusbar => fn context_id => statusbar_pop_ statusbar context_id

    val statusbar_get_context_id_: gtkobj -> string -> word
        = app2(symb"mgtk_gtk_statusbar_get_context_id")
    val statusbar_get_context_id: 'a GtkStatusbar -> string -> word
        = fn OBJ statusbar => fn context_description => statusbar_get_context_id_ statusbar context_description

    val statusbar_remove_: gtkobj -> word -> word -> unit
        = app3(symb"mgtk_gtk_statusbar_remove")
    val statusbar_remove: 'a GtkStatusbar -> word -> word -> unit
        = fn OBJ statusbar => fn context_id => fn message_id => statusbar_remove_ statusbar context_id message_id

    (* *** Separator *** *)

    type 'a separator_t = base
    type 'a GtkSeparator = 'a separator_t GtkWidget


    (* *** HSeparator *** *)

    type 'a hseparator_t = base
    type 'a GtkHSeparator = 'a hseparator_t GtkSeparator


    val hseparator_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hseparator_new")
    val hseparator_new: unit -> base GtkHSeparator
        = fn dummy => OBJ(hseparator_new_ dummy)

    (* *** VSeparator *** *)

    type 'a vseparator_t = base
    type 'a GtkVSeparator = 'a vseparator_t GtkSeparator


    val vseparator_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vseparator_new")
    val vseparator_new: unit -> base GtkVSeparator
        = fn dummy => OBJ(vseparator_new_ dummy)

    (* *** Progress *** *)

    type 'a progress_t = base
    type 'a GtkProgress = 'a progress_t GtkWidget


    val progress_set_show_text_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_progress_set_show_text")
    val progress_set_show_text: 'a GtkProgress -> int -> unit
        = fn OBJ progress => fn show_text => progress_set_show_text_ progress show_text

    val progress_set_text_alignment_: gtkobj -> real -> real -> unit
        = app3(symb"mgtk_gtk_progress_set_text_alignment")
    val progress_set_text_alignment: 'a GtkProgress -> real -> real -> unit
        = fn OBJ progress => fn x_align => fn y_align => progress_set_text_alignment_ progress x_align y_align

    val progress_set_format_string_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_progress_set_format_string")
    val progress_set_format_string: 'a GtkProgress -> string -> unit
        = fn OBJ progress => fn format => progress_set_format_string_ progress format

    val progress_set_adjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_progress_set_adjustment")
    val progress_set_adjustment: 'a GtkProgress -> 'b GtkAdjustment -> unit
        = fn OBJ progress => fn OBJ adjustment => progress_set_adjustment_ progress adjustment

    val progress_configure_: gtkobj -> real -> real -> real -> unit
        = app4(symb"mgtk_gtk_progress_configure")
    val progress_configure: 'a GtkProgress -> real -> real -> real -> unit
        = fn OBJ progress => fn valu => fn min => fn max => progress_configure_ progress valu min max

    val progress_set_percentage_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_progress_set_percentage")
    val progress_set_percentage: 'a GtkProgress -> real -> unit
        = fn OBJ progress => fn percentage => progress_set_percentage_ progress percentage

    val progress_set_value_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_progress_set_value")
    val progress_set_value: 'a GtkProgress -> real -> unit
        = fn OBJ progress => fn valu => progress_set_value_ progress valu

    val progress_get_value_: gtkobj -> real
        = app1(symb"mgtk_gtk_progress_get_value")
    val progress_get_value: 'a GtkProgress -> real
        = fn OBJ progress => progress_get_value_ progress

    val progress_set_activity_mode_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_progress_set_activity_mode")
    val progress_set_activity_mode: 'a GtkProgress -> word -> unit
        = fn OBJ progress => fn activity_mode => progress_set_activity_mode_ progress activity_mode

    val progress_get_current_text_: gtkobj -> string
        = app1(symb"mgtk_gtk_progress_get_current_text")
    val progress_get_current_text: 'a GtkProgress -> string
        = fn OBJ progress => progress_get_current_text_ progress

    val progress_get_text_from_value_: gtkobj -> real -> string
        = app2(symb"mgtk_gtk_progress_get_text_from_value")
    val progress_get_text_from_value: 'a GtkProgress -> real -> string
        = fn OBJ progress => fn valu => progress_get_text_from_value_ progress valu

    val progress_get_current_percentage_: gtkobj -> real
        = app1(symb"mgtk_gtk_progress_get_current_percentage")
    val progress_get_current_percentage: 'a GtkProgress -> real
        = fn OBJ progress => progress_get_current_percentage_ progress

    val progress_get_percentage_from_value_: gtkobj -> real -> real
        = app2(symb"mgtk_gtk_progress_get_percentage_from_value")
    val progress_get_percentage_from_value: 'a GtkProgress -> real -> real
        = fn OBJ progress => fn valu => progress_get_percentage_from_value_ progress valu

    (* *** ProgressBar *** *)

    type 'a progressbar_t = base
    type 'a GtkProgressBar = 'a progressbar_t GtkWidget


    val progress_bar_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_progress_bar_new")
    val progress_bar_new: unit -> base GtkProgressBar
        = fn dummy => OBJ(progress_bar_new_ dummy)

    val progress_bar_new_with_adjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_progress_bar_new_with_adjustment")
    val progress_bar_new_with_adjustment: 'a GtkAdjustment -> base GtkProgressBar
        = fn OBJ adjustment => OBJ(progress_bar_new_with_adjustment_ adjustment)

    val progress_bar_set_bar_style_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_progress_bar_set_bar_style")
    val progress_bar_set_bar_style: 'a GtkProgressBar -> gtk_progress_bar_style -> unit
        = fn OBJ pbar => fn style => progress_bar_set_bar_style_ pbar style

    val progress_bar_set_discrete_blocks_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_progress_bar_set_discrete_blocks")
    val progress_bar_set_discrete_blocks: 'a GtkProgressBar -> word -> unit
        = fn OBJ pbar => fn blocks => progress_bar_set_discrete_blocks_ pbar blocks

    val progress_bar_set_activity_step_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_progress_bar_set_activity_step")
    val progress_bar_set_activity_step: 'a GtkProgressBar -> word -> unit
        = fn OBJ pbar => fn step => progress_bar_set_activity_step_ pbar step

    val progress_bar_set_activity_blocks_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_progress_bar_set_activity_blocks")
    val progress_bar_set_activity_blocks: 'a GtkProgressBar -> word -> unit
        = fn OBJ pbar => fn blocks => progress_bar_set_activity_blocks_ pbar blocks

    val progress_bar_set_orientation_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_progress_bar_set_orientation")
    val progress_bar_set_orientation: 'a GtkProgressBar -> gtk_progress_bar_orientation -> unit
        = fn OBJ pbar => fn orientation => progress_bar_set_orientation_ pbar orientation

    val progress_bar_update_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_progress_bar_update")
    val progress_bar_update: 'a GtkProgressBar -> real -> unit
        = fn OBJ progress_bar => fn percentage => progress_bar_update_ progress_bar percentage

    (* *** Pixmap *** *)

    type 'a pixmap_t = base
    type 'a GtkPixmap = 'a pixmap_t GtkMisc


    val pixmap_new_: gdk_pixmap -> gdk_bitmap option -> gtkobj
        = app2(symb"mgtk_gtk_pixmap_new")
    val pixmap_new: gdk_pixmap -> gdk_bitmap option -> base GtkWidget
        = fn pixmap => fn mask => OBJ(pixmap_new_ pixmap mask)

    val pixmap_new'_: gdk_pixmap -> gtkobj
        = app1(symb"mgtk_gtk_pixmap_new_short")
    val pixmap_new': gdk_pixmap -> base GtkWidget
        = fn pixmap => OBJ(pixmap_new'_ pixmap)

    val pixmap_set_: gtkobj -> gdk_pixmap -> gdk_bitmap -> unit
        = app3(symb"mgtk_gtk_pixmap_set")
    val pixmap_set: 'a GtkPixmap -> gdk_pixmap -> gdk_bitmap -> unit
        = fn OBJ pixmap => fn valu => fn mask => pixmap_set_ pixmap valu mask

    val pixmap_set_build_insensitive_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_pixmap_set_build_insensitive")
    val pixmap_set_build_insensitive: 'a GtkPixmap -> word -> unit
        = fn OBJ pixmap => fn build => pixmap_set_build_insensitive_ pixmap build

    (* *** ColorSelection *** *)

    type 'a colorselection_t = base
    type 'a GtkColorSelection = 'a colorselection_t GtkVBox


    val color_selection_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_new")
    val color_selection_new: unit -> base GtkColorSelection
        = fn dummy => OBJ(color_selection_new_ dummy)

    val color_selection_set_update_policy_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_color_selection_set_update_policy")
    val color_selection_set_update_policy: 'a GtkColorSelection -> gtk_update_type -> unit
        = fn OBJ colorsel => fn policy => color_selection_set_update_policy_ colorsel policy

    val color_selection_set_opacity_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_color_selection_set_opacity")
    val color_selection_set_opacity: 'a GtkColorSelection -> bool -> unit
        = fn OBJ colorsel => fn use_opacity => color_selection_set_opacity_ colorsel use_opacity

    (* *** ColorSelectionDialog *** *)

    type 'a colorselectiondialog_t = base
    type 'a GtkColorSelectionDialog = 'a colorselectiondialog_t GtkWindow

    val color_selection_dialog_get_colorsel_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_colorsel")
    val color_selection_dialog_get_colorsel: 'a GtkColorSelectionDialog -> base GtkColorSelection
        = fn OBJ wid => OBJ(color_selection_dialog_get_colorsel_ wid)

    val color_selection_dialog_get_main_vbox_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_main_vbox")
    val color_selection_dialog_get_main_vbox: 'a GtkColorSelectionDialog -> base GtkVBox
        = fn OBJ wid => OBJ(color_selection_dialog_get_main_vbox_ wid)

    val color_selection_dialog_get_ok_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_ok_button")
    val color_selection_dialog_get_ok_button: 'a GtkColorSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(color_selection_dialog_get_ok_button_ wid)

    val color_selection_dialog_get_reset_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_reset_button")
    val color_selection_dialog_get_reset_button: 'a GtkColorSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(color_selection_dialog_get_reset_button_ wid)

    val color_selection_dialog_get_cancel_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_cancel_button")
    val color_selection_dialog_get_cancel_button: 'a GtkColorSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(color_selection_dialog_get_cancel_button_ wid)

    val color_selection_dialog_get_help_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_get_help_button")
    val color_selection_dialog_get_help_button: 'a GtkColorSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(color_selection_dialog_get_help_button_ wid)


    val color_selection_dialog_new_: string -> gtkobj
        = app1(symb"mgtk_gtk_color_selection_dialog_new")
    val color_selection_dialog_new: string -> base GtkColorSelectionDialog
        = fn title => OBJ(color_selection_dialog_new_ title)

    (* *** InputDialog *** *)

    type 'a inputdialog_t = base
    type 'a GtkInputDialog = 'a inputdialog_t GtkDialog

    val input_dialog_get_close_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_input_dialog_get_close_button")
    val input_dialog_get_close_button: 'a GtkInputDialog -> base GtkButton
        = fn OBJ wid => OBJ(input_dialog_get_close_button_ wid)

    val input_dialog_get_save_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_input_dialog_get_save_button")
    val input_dialog_get_save_button: 'a GtkInputDialog -> base GtkButton
        = fn OBJ wid => OBJ(input_dialog_get_save_button_ wid)


    val input_dialog_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_input_dialog_new")
    val input_dialog_new: unit -> base GtkInputDialog
        = fn dummy => OBJ(input_dialog_new_ dummy)

    (* *** DrawingArea *** *)

    type 'a drawingarea_t = base
    type 'a GtkDrawingArea = 'a drawingarea_t GtkWidget


    val drawing_area_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_drawing_area_new")
    val drawing_area_new: unit -> base GtkDrawingArea
        = fn dummy => OBJ(drawing_area_new_ dummy)

    val drawing_area_size_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_drawing_area_size")
    val drawing_area_size: 'a GtkDrawingArea -> int -> int -> unit
        = fn OBJ darea => fn width => fn height => drawing_area_size_ darea width height

    (* *** Curve *** *)

    type 'a curve_t = base
    type 'a GtkCurve = 'a curve_t GtkDrawingArea


    val curve_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_curve_new")
    val curve_new: unit -> base GtkCurve
        = fn dummy => OBJ(curve_new_ dummy)

    val curve_reset_: gtkobj -> unit
        = app1(symb"mgtk_gtk_curve_reset")
    val curve_reset: 'a GtkCurve -> unit
        = fn OBJ curve => curve_reset_ curve

    val curve_set_gamma_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_curve_set_gamma")
    val curve_set_gamma: 'a GtkCurve -> real -> unit
        = fn OBJ curve => fn gamma => curve_set_gamma_ curve gamma

    val curve_set_range_: gtkobj -> real -> real -> real -> real -> unit
        = app5(symb"mgtk_gtk_curve_set_range")
    val curve_set_range: 'a GtkCurve -> real -> real -> real -> real -> unit
        = fn OBJ curve => fn min_x => fn max_x => fn min_y => fn max_y => curve_set_range_ curve min_x max_x min_y max_y

    val curve_set_curve_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_curve_set_curve_type")
    val curve_set_curve_type: 'a GtkCurve -> gtk_curve_type -> unit
        = fn OBJ curve => fn typ => curve_set_curve_type_ curve typ

    (* *** GammaCurve *** *)

    type 'a gammacurve_t = base
    type 'a GtkGammaCurve = 'a gammacurve_t GtkVBox


    val gamma_curve_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_gamma_curve_new")
    val gamma_curve_new: unit -> base GtkGammaCurve
        = fn dummy => OBJ(gamma_curve_new_ dummy)

    (* *** FileSelection *** *)

    type 'a fileselection_t = base
    type 'a GtkFileSelection = 'a fileselection_t GtkWindow

    val file_selection_get_dir_list_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_dir_list")
    val file_selection_get_dir_list: 'a GtkFileSelection -> base GtkWidget
        = fn OBJ wid => OBJ(file_selection_get_dir_list_ wid)

    val file_selection_get_file_list_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_file_list")
    val file_selection_get_file_list: 'a GtkFileSelection -> base GtkWidget
        = fn OBJ wid => OBJ(file_selection_get_file_list_ wid)

    val file_selection_get_selection_entry_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_selection_entry")
    val file_selection_get_selection_entry: 'a GtkFileSelection -> base GtkWidget
        = fn OBJ wid => OBJ(file_selection_get_selection_entry_ wid)

    val file_selection_get_selection_text_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_selection_text")
    val file_selection_get_selection_text: 'a GtkFileSelection -> base GtkWidget
        = fn OBJ wid => OBJ(file_selection_get_selection_text_ wid)

    val file_selection_get_main_vbox_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_main_vbox")
    val file_selection_get_main_vbox: 'a GtkFileSelection -> base GtkVBox
        = fn OBJ wid => OBJ(file_selection_get_main_vbox_ wid)

    val file_selection_get_ok_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_ok_button")
    val file_selection_get_ok_button: 'a GtkFileSelection -> base GtkButton
        = fn OBJ wid => OBJ(file_selection_get_ok_button_ wid)

    val file_selection_get_cancel_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_cancel_button")
    val file_selection_get_cancel_button: 'a GtkFileSelection -> base GtkButton
        = fn OBJ wid => OBJ(file_selection_get_cancel_button_ wid)

    val file_selection_get_help_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_get_help_button")
    val file_selection_get_help_button: 'a GtkFileSelection -> base GtkButton
        = fn OBJ wid => OBJ(file_selection_get_help_button_ wid)


    val file_selection_new_: string -> gtkobj
        = app1(symb"mgtk_gtk_file_selection_new")
    val file_selection_new: string -> base GtkFileSelection
        = fn title => OBJ(file_selection_new_ title)

    val file_selection_set_filename_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_file_selection_set_filename")
    val file_selection_set_filename: 'a GtkFileSelection -> string -> unit
        = fn OBJ filesel => fn filename => file_selection_set_filename_ filesel filename

    val file_selection_get_filename_: gtkobj -> string
        = app1(symb"mgtk_gtk_file_selection_get_filename")
    val file_selection_get_filename: 'a GtkFileSelection -> string
        = fn OBJ filesel => file_selection_get_filename_ filesel

    val file_selection_complete_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_file_selection_complete")
    val file_selection_complete: 'a GtkFileSelection -> string -> unit
        = fn OBJ filesel => fn pattern => file_selection_complete_ filesel pattern

    val file_selection_show_fileop_buttons_: gtkobj -> unit
        = app1(symb"mgtk_gtk_file_selection_show_fileop_buttons")
    val file_selection_show_fileop_buttons: 'a GtkFileSelection -> unit
        = fn OBJ filesel => file_selection_show_fileop_buttons_ filesel

    val file_selection_hide_fileop_buttons_: gtkobj -> unit
        = app1(symb"mgtk_gtk_file_selection_hide_fileop_buttons")
    val file_selection_hide_fileop_buttons: 'a GtkFileSelection -> unit
        = fn OBJ filesel => file_selection_hide_fileop_buttons_ filesel

    (* *** FontSelection *** *)

    type 'a fontselection_t = base
    type 'a GtkFontSelection = 'a fontselection_t GtkNotebook


    val font_selection_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_new")
    val font_selection_new: unit -> base GtkFontSelection
        = fn dummy => OBJ(font_selection_new_ dummy)

    val font_selection_get_font_name_: gtkobj -> string
        = app1(symb"mgtk_gtk_font_selection_get_font_name")
    val font_selection_get_font_name: 'a GtkFontSelection -> string
        = fn OBJ fontsel => font_selection_get_font_name_ fontsel

    val font_selection_get_font_: gtkobj -> gdk_font
        = app1(symb"mgtk_gtk_font_selection_get_font")
    val font_selection_get_font: 'a GtkFontSelection -> gdk_font
        = fn OBJ fontsel => font_selection_get_font_ fontsel

    val font_selection_set_font_name_: gtkobj -> string -> bool
        = app2(symb"mgtk_gtk_font_selection_set_font_name")
    val font_selection_set_font_name: 'a GtkFontSelection -> string -> bool
        = fn OBJ fontsel => fn fontname => font_selection_set_font_name_ fontsel fontname

    val font_selection_get_preview_text_: gtkobj -> string
        = app1(symb"mgtk_gtk_font_selection_get_preview_text")
    val font_selection_get_preview_text: 'a GtkFontSelection -> string
        = fn OBJ fontsel => font_selection_get_preview_text_ fontsel

    val font_selection_set_preview_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_font_selection_set_preview_text")
    val font_selection_set_preview_text: 'a GtkFontSelection -> string -> unit
        = fn OBJ fontsel => fn text => font_selection_set_preview_text_ fontsel text

    (* *** FontSelectionDialog *** *)

    type 'a fontselectiondialog_t = base
    type 'a GtkFontSelectionDialog = 'a fontselectiondialog_t GtkWindow

    val font_selection_dialog_get_fontsel_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_fontsel")
    val font_selection_dialog_get_fontsel: 'a GtkFontSelectionDialog -> base GtkWidget
        = fn OBJ wid => OBJ(font_selection_dialog_get_fontsel_ wid)

    val font_selection_dialog_get_main_vbox_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_main_vbox")
    val font_selection_dialog_get_main_vbox: 'a GtkFontSelectionDialog -> base GtkVBox
        = fn OBJ wid => OBJ(font_selection_dialog_get_main_vbox_ wid)

    val font_selection_dialog_get_action_area_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_action_area")
    val font_selection_dialog_get_action_area: 'a GtkFontSelectionDialog -> base GtkWidget
        = fn OBJ wid => OBJ(font_selection_dialog_get_action_area_ wid)

    val font_selection_dialog_get_ok_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_ok_button")
    val font_selection_dialog_get_ok_button: 'a GtkFontSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(font_selection_dialog_get_ok_button_ wid)

    val font_selection_dialog_get_apply_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_apply_button")
    val font_selection_dialog_get_apply_button: 'a GtkFontSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(font_selection_dialog_get_apply_button_ wid)

    val font_selection_dialog_get_cancel_button_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_get_cancel_button")
    val font_selection_dialog_get_cancel_button: 'a GtkFontSelectionDialog -> base GtkButton
        = fn OBJ wid => OBJ(font_selection_dialog_get_cancel_button_ wid)


    val font_selection_dialog_new_: string -> gtkobj
        = app1(symb"mgtk_gtk_font_selection_dialog_new")
    val font_selection_dialog_new: string -> base GtkFontSelectionDialog
        = fn title => OBJ(font_selection_dialog_new_ title)

    val font_selection_dialog_get_font_name_: gtkobj -> string
        = app1(symb"mgtk_gtk_font_selection_dialog_get_font_name")
    val font_selection_dialog_get_font_name: 'a GtkFontSelectionDialog -> string
        = fn OBJ fsd => font_selection_dialog_get_font_name_ fsd

    val font_selection_dialog_get_font_: gtkobj -> gdk_font
        = app1(symb"mgtk_gtk_font_selection_dialog_get_font")
    val font_selection_dialog_get_font: 'a GtkFontSelectionDialog -> gdk_font
        = fn OBJ fsd => font_selection_dialog_get_font_ fsd

    val font_selection_dialog_set_font_name_: gtkobj -> string -> bool
        = app2(symb"mgtk_gtk_font_selection_dialog_set_font_name")
    val font_selection_dialog_set_font_name: 'a GtkFontSelectionDialog -> string -> bool
        = fn OBJ fsd => fn fontname => font_selection_dialog_set_font_name_ fsd fontname

    val font_selection_dialog_get_preview_text_: gtkobj -> string
        = app1(symb"mgtk_gtk_font_selection_dialog_get_preview_text")
    val font_selection_dialog_get_preview_text: 'a GtkFontSelectionDialog -> string
        = fn OBJ fsd => font_selection_dialog_get_preview_text_ fsd

    val font_selection_dialog_set_preview_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_font_selection_dialog_set_preview_text")
    val font_selection_dialog_set_preview_text: 'a GtkFontSelectionDialog -> string -> unit
        = fn OBJ fsd => fn text => font_selection_dialog_set_preview_text_ fsd text

    (* *** Preview *** *)

    type 'a preview_t = base
    type 'a GtkPreview = 'a preview_t GtkWidget


    val preview_new_: int -> gtkobj
        = app1(symb"mgtk_gtk_preview_new")
    val preview_new: gtk_preview_type -> base GtkWidget
        = fn typ => OBJ(preview_new_ typ)

    val preview_size_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_preview_size")
    val preview_size: 'a GtkPreview -> int -> int -> unit
        = fn OBJ preview => fn width => fn height => preview_size_ preview width height

    val preview_put_: gtkobj * gdk_window * gdk_gc * int * int * int * int * int * int -> unit
        = app1(symb"mgtk_gtk_preview_put")
    val preview_put: 'a GtkPreview -> gdk_window -> gdk_gc -> int -> int -> int -> int -> int -> int -> unit
        = fn OBJ preview => fn window => fn gc => fn srcx => fn srcy => fn destx => fn desty => fn width => fn height => preview_put_ (preview, window, gc, srcx, srcy, destx, desty, width, height)

    val preview_set_expand_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_preview_set_expand")
    val preview_set_expand: 'a GtkPreview -> int -> unit
        = fn OBJ preview => fn expand => preview_set_expand_ preview expand

    val preview_set_color_cube_: word -> word -> word -> word -> unit
        = app4(symb"mgtk_gtk_preview_set_color_cube")
    val preview_set_color_cube: word -> word -> word -> word -> unit
        = fn nred_shades => fn ngreen_shades => fn nblue_shades => fn ngray_shades => preview_set_color_cube_ nred_shades ngreen_shades nblue_shades ngray_shades

    val preview_set_install_cmap_: int -> unit
        = app1(symb"mgtk_gtk_preview_set_install_cmap")
    val preview_set_install_cmap: int -> unit
        = fn install_cmap => preview_set_install_cmap_ install_cmap

    val preview_set_reserved_: int -> unit
        = app1(symb"mgtk_gtk_preview_set_reserved")
    val preview_set_reserved: int -> unit
        = fn nreserved => preview_set_reserved_ nreserved

    val preview_set_dither_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_preview_set_dither")
    val preview_set_dither: 'a GtkPreview -> gdk_rgb_dither -> unit
        = fn OBJ preview => fn dither => preview_set_dither_ preview dither

    (* *** Calendar *** *)

    type 'a calendar_t = base
    type 'a GtkCalendar = 'a calendar_t GtkWidget


    val calendar_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_calendar_new")
    val calendar_new: unit -> base GtkCalendar
        = fn dummy => OBJ(calendar_new_ dummy)

    val calendar_select_month_: gtkobj -> word -> word -> int
        = app3(symb"mgtk_gtk_calendar_select_month")
    val calendar_select_month: 'a GtkCalendar -> word -> word -> int
        = fn OBJ calendar => fn month => fn year => calendar_select_month_ calendar month year

    val calendar_select_day_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_calendar_select_day")
    val calendar_select_day: 'a GtkCalendar -> word -> unit
        = fn OBJ calendar => fn day => calendar_select_day_ calendar day

    val calendar_mark_day_: gtkobj -> word -> int
        = app2(symb"mgtk_gtk_calendar_mark_day")
    val calendar_mark_day: 'a GtkCalendar -> word -> int
        = fn OBJ calendar => fn day => calendar_mark_day_ calendar day

    val calendar_unmark_day_: gtkobj -> word -> int
        = app2(symb"mgtk_gtk_calendar_unmark_day")
    val calendar_unmark_day: 'a GtkCalendar -> word -> int
        = fn OBJ calendar => fn day => calendar_unmark_day_ calendar day

    val calendar_clear_marks_: gtkobj -> unit
        = app1(symb"mgtk_gtk_calendar_clear_marks")
    val calendar_clear_marks: 'a GtkCalendar -> unit
        = fn OBJ calendar => calendar_clear_marks_ calendar

    val calendar_display_options_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_calendar_display_options")
    val calendar_display_options: 'a GtkCalendar -> gtk_calendar_display_options list -> unit
        = fn OBJ calendar => fn flags => calendar_display_options_ calendar (setFlags flags)

    val calendar_get_date_: gtkobj -> word * word * word
        = app1(symb"mgtk_gtk_calendar_get_date")
    val calendar_get_date: 'a GtkCalendar -> word * word * word
        = fn OBJ cal => calendar_get_date_ cal

    val calendar_freeze_: gtkobj -> unit
        = app1(symb"mgtk_gtk_calendar_freeze")
    val calendar_freeze: 'a GtkCalendar -> unit
        = fn OBJ calendar => calendar_freeze_ calendar

    val calendar_thaw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_calendar_thaw")
    val calendar_thaw: 'a GtkCalendar -> unit
        = fn OBJ calendar => calendar_thaw_ calendar

    (* *** Tree *** *)

    type 'a tree_t = base
    type 'a GtkTree = 'a tree_t GtkContainer


    (* *** TreeItem *** *)

    type 'a treeitem_t = base
    type 'a GtkTreeItem = 'a treeitem_t GtkItem

    val tree_item_get_subtree_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_tree_item_get_subtree")
    val tree_item_get_subtree: 'a GtkTreeItem -> base GtkTree
        = fn OBJ wid => OBJ(tree_item_get_subtree_ wid)


    val tree_item_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_tree_item_new")
    val tree_item_new: unit -> base GtkTreeItem
        = fn dummy => OBJ(tree_item_new_ dummy)

    val tree_item_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_tree_item_new_with_label")
    val tree_item_new_with_label: string -> base GtkTreeItem
        = fn label => OBJ(tree_item_new_with_label_ label)

    val tree_item_set_subtree_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_item_set_subtree")
    val tree_item_set_subtree: 'a GtkTreeItem -> 'b GtkWidget -> unit
        = fn OBJ tree_item => fn OBJ subtree => tree_item_set_subtree_ tree_item subtree

    val tree_item_remove_subtree_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tree_item_remove_subtree")
    val tree_item_remove_subtree: 'a GtkTreeItem -> unit
        = fn OBJ tree_item => tree_item_remove_subtree_ tree_item

    val tree_item_select_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tree_item_select")
    val tree_item_select: 'a GtkTreeItem -> unit
        = fn OBJ tree_item => tree_item_select_ tree_item

    val tree_item_deselect_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tree_item_deselect")
    val tree_item_deselect: 'a GtkTreeItem -> unit
        = fn OBJ tree_item => tree_item_deselect_ tree_item

    val tree_item_expand_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tree_item_expand")
    val tree_item_expand: 'a GtkTreeItem -> unit
        = fn OBJ tree_item => tree_item_expand_ tree_item

    val tree_item_collapse_: gtkobj -> unit
        = app1(symb"mgtk_gtk_tree_item_collapse")
    val tree_item_collapse: 'a GtkTreeItem -> unit
        = fn OBJ tree_item => tree_item_collapse_ tree_item

    val tree_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_tree_new")
    val tree_new: unit -> base GtkTree
        = fn dummy => OBJ(tree_new_ dummy)

    val tree_append_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_append")
    val tree_append: 'a GtkTree -> 'b GtkWidget -> unit
        = fn OBJ tree => fn OBJ child => tree_append_ tree child

    val tree_prepend_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_prepend")
    val tree_prepend: 'a GtkTree -> 'b GtkWidget -> unit
        = fn OBJ tree => fn OBJ child => tree_prepend_ tree child

    val tree_insert_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_tree_insert")
    val tree_insert: 'a GtkTree -> 'b GtkWidget -> int -> unit
        = fn OBJ tree => fn OBJ child => fn position => tree_insert_ tree child position

    val tree_remove_item_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_remove_item")
    val tree_remove_item: 'a GtkTree -> 'b GtkWidget -> unit
        = fn OBJ tree => fn OBJ child => tree_remove_item_ tree child

    val tree_clear_items_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_tree_clear_items")
    val tree_clear_items: 'a GtkTree -> int -> int -> unit
        = fn OBJ tree => fn start_item => fn end_item => tree_clear_items_ tree start_item end_item

    val tree_select_item_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_tree_select_item")
    val tree_select_item: 'a GtkTree -> int -> unit
        = fn OBJ tree => fn item => tree_select_item_ tree item

    val tree_unselect_item_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_tree_unselect_item")
    val tree_unselect_item: 'a GtkTree -> int -> unit
        = fn OBJ tree => fn item => tree_unselect_item_ tree item

    val tree_select_child_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_select_child")
    val tree_select_child: 'a GtkTree -> 'b GtkWidget -> unit
        = fn OBJ tree => fn OBJ child => tree_select_child_ tree child

    val tree_unselect_child_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_tree_unselect_child")
    val tree_unselect_child: 'a GtkTree -> 'b GtkWidget -> unit
        = fn OBJ tree => fn OBJ child => tree_unselect_child_ tree child

    val tree_child_position_: gtkobj -> gtkobj -> int
        = app2(symb"mgtk_gtk_tree_child_position")
    val tree_child_position: 'a GtkTree -> 'b GtkWidget -> int
        = fn OBJ tree => fn OBJ child => tree_child_position_ tree child

    val tree_set_selection_mode_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_tree_set_selection_mode")
    val tree_set_selection_mode: 'a GtkTree -> gtk_selection_mode -> unit
        = fn OBJ tree => fn mode => tree_set_selection_mode_ tree mode

    val tree_set_view_mode_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_tree_set_view_mode")
    val tree_set_view_mode: 'a GtkTree -> gtk_tree_view_mode -> unit
        = fn OBJ tree => fn mode => tree_set_view_mode_ tree mode

    val tree_set_view_lines_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_tree_set_view_lines")
    val tree_set_view_lines: 'a GtkTree -> bool -> unit
        = fn OBJ tree => fn flag => tree_set_view_lines_ tree flag

    (* *** CList *** *)

    type 'a clist_t = base
    type 'a GtkCList = 'a clist_t GtkContainer

    val clist_get_focus_row_: gtkobj -> int
        = app1(symb"mgtk_gtk_clist_get_focus_row")
    val clist_get_focus_row: 'a GtkCList -> int
        = fn OBJ wid => clist_get_focus_row_ wid

    val clist_get_rows_: gtkobj -> int
        = app1(symb"mgtk_gtk_clist_get_rows")
    val clist_get_rows: 'a GtkCList -> int
        = fn OBJ wid => clist_get_rows_ wid


    val clist_new_: int -> gtkobj
        = app1(symb"mgtk_gtk_clist_new")
    val clist_new: int -> base GtkCList
        = fn columns => OBJ(clist_new_ columns)

    val clist_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_set_shadow_type")
    val clist_set_shadow_type: 'a GtkCList -> gtk_shadow_type -> unit
        = fn OBJ clist => fn border => clist_set_shadow_type_ clist border

    val clist_set_selection_mode_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_set_selection_mode")
    val clist_set_selection_mode: 'a GtkCList -> gtk_selection_mode -> unit
        = fn OBJ clist => fn mode => clist_set_selection_mode_ clist mode

    val clist_set_reorderable_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_clist_set_reorderable")
    val clist_set_reorderable: 'a GtkCList -> bool -> unit
        = fn OBJ clist => fn reorderable => clist_set_reorderable_ clist reorderable

    val clist_set_use_drag_icons_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_clist_set_use_drag_icons")
    val clist_set_use_drag_icons: 'a GtkCList -> bool -> unit
        = fn OBJ clist => fn use_icons => clist_set_use_drag_icons_ clist use_icons

    val clist_set_button_actions_: gtkobj -> word -> word -> unit
        = app3(symb"mgtk_gtk_clist_set_button_actions")
    val clist_set_button_actions: 'a GtkCList -> word -> word -> unit
        = fn OBJ clist => fn button => fn button_actions => clist_set_button_actions_ clist button button_actions

    val clist_set_hadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_clist_set_hadjustment")
    val clist_set_hadjustment: 'a GtkCList -> 'b GtkAdjustment -> unit
        = fn OBJ clist => fn OBJ adjustment => clist_set_hadjustment_ clist adjustment

    val clist_set_vadjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_clist_set_vadjustment")
    val clist_set_vadjustment: 'a GtkCList -> 'b GtkAdjustment -> unit
        = fn OBJ clist => fn OBJ adjustment => clist_set_vadjustment_ clist adjustment

    val clist_get_hadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_clist_get_hadjustment")
    val clist_get_hadjustment: 'a GtkCList -> base GtkAdjustment
        = fn OBJ clist => OBJ(clist_get_hadjustment_ clist)

    val clist_get_vadjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_clist_get_vadjustment")
    val clist_get_vadjustment: 'a GtkCList -> base GtkAdjustment
        = fn OBJ clist => OBJ(clist_get_vadjustment_ clist)

    val clist_freeze_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_freeze")
    val clist_freeze: 'a GtkCList -> unit
        = fn OBJ clist => clist_freeze_ clist

    val clist_thaw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_thaw")
    val clist_thaw: 'a GtkCList -> unit
        = fn OBJ clist => clist_thaw_ clist

    val clist_column_titles_show_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_column_titles_show")
    val clist_column_titles_show: 'a GtkCList -> unit
        = fn OBJ clist => clist_column_titles_show_ clist

    val clist_column_titles_hide_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_column_titles_hide")
    val clist_column_titles_hide: 'a GtkCList -> unit
        = fn OBJ clist => clist_column_titles_hide_ clist

    val clist_column_title_active_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_column_title_active")
    val clist_column_title_active: 'a GtkCList -> int -> unit
        = fn OBJ clist => fn column => clist_column_title_active_ clist column

    val clist_column_title_passive_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_column_title_passive")
    val clist_column_title_passive: 'a GtkCList -> int -> unit
        = fn OBJ clist => fn column => clist_column_title_passive_ clist column

    val clist_column_titles_active_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_column_titles_active")
    val clist_column_titles_active: 'a GtkCList -> unit
        = fn OBJ clist => clist_column_titles_active_ clist

    val clist_column_titles_passive_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_column_titles_passive")
    val clist_column_titles_passive: 'a GtkCList -> unit
        = fn OBJ clist => clist_column_titles_passive_ clist

    val clist_set_column_title_: gtkobj -> int -> string -> unit
        = app3(symb"mgtk_gtk_clist_set_column_title")
    val clist_set_column_title: 'a GtkCList -> int -> string -> unit
        = fn OBJ clist => fn column => fn title => clist_set_column_title_ clist column title

    val clist_get_column_title_: gtkobj -> int -> string
        = app2(symb"mgtk_gtk_clist_get_column_title")
    val clist_get_column_title: 'a GtkCList -> int -> string
        = fn OBJ clist => fn column => clist_get_column_title_ clist column

    val clist_set_column_widget_: gtkobj -> int -> gtkobj -> unit
        = app3(symb"mgtk_gtk_clist_set_column_widget")
    val clist_set_column_widget: 'a GtkCList -> int -> 'b GtkWidget -> unit
        = fn OBJ clist => fn column => fn OBJ widget => clist_set_column_widget_ clist column widget

    val clist_get_column_widget_: gtkobj -> int -> gtkobj
        = app2(symb"mgtk_gtk_clist_get_column_widget")
    val clist_get_column_widget: 'a GtkCList -> int -> base GtkWidget
        = fn OBJ clist => fn column => OBJ(clist_get_column_widget_ clist column)

    val clist_set_column_justification_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_set_column_justification")
    val clist_set_column_justification: 'a GtkCList -> int -> gtk_justification -> unit
        = fn OBJ clist => fn column => fn justification => clist_set_column_justification_ clist column justification

    val clist_set_column_visibility_: gtkobj -> int -> bool -> unit
        = app3(symb"mgtk_gtk_clist_set_column_visibility")
    val clist_set_column_visibility: 'a GtkCList -> int -> bool -> unit
        = fn OBJ clist => fn column => fn visible => clist_set_column_visibility_ clist column visible

    val clist_set_column_resizeable_: gtkobj -> int -> bool -> unit
        = app3(symb"mgtk_gtk_clist_set_column_resizeable")
    val clist_set_column_resizeable: 'a GtkCList -> int -> bool -> unit
        = fn OBJ clist => fn column => fn resizeable => clist_set_column_resizeable_ clist column resizeable

    val clist_set_column_auto_resize_: gtkobj -> int -> bool -> unit
        = app3(symb"mgtk_gtk_clist_set_column_auto_resize")
    val clist_set_column_auto_resize: 'a GtkCList -> int -> bool -> unit
        = fn OBJ clist => fn column => fn auto_resize => clist_set_column_auto_resize_ clist column auto_resize

    val clist_columns_autosize_: gtkobj -> int
        = app1(symb"mgtk_gtk_clist_columns_autosize")
    val clist_columns_autosize: 'a GtkCList -> int
        = fn OBJ clist => clist_columns_autosize_ clist

    val clist_optimal_column_width_: gtkobj -> int -> int
        = app2(symb"mgtk_gtk_clist_optimal_column_width")
    val clist_optimal_column_width: 'a GtkCList -> int -> int
        = fn OBJ clist => fn column => clist_optimal_column_width_ clist column

    val clist_set_column_width_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_set_column_width")
    val clist_set_column_width: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn column => fn width => clist_set_column_width_ clist column width

    val clist_set_column_min_width_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_set_column_min_width")
    val clist_set_column_min_width: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn column => fn min_width => clist_set_column_min_width_ clist column min_width

    val clist_set_column_max_width_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_set_column_max_width")
    val clist_set_column_max_width: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn column => fn max_width => clist_set_column_max_width_ clist column max_width

    val clist_set_row_height_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_clist_set_row_height")
    val clist_set_row_height: 'a GtkCList -> word -> unit
        = fn OBJ clist => fn height => clist_set_row_height_ clist height

    val clist_moveto_: gtkobj -> int -> int -> real -> real -> unit
        = app5(symb"mgtk_gtk_clist_moveto")
    val clist_moveto: 'a GtkCList -> int -> int -> real -> real -> unit
        = fn OBJ clist => fn row => fn column => fn row_align => fn column_align => clist_moveto_ clist row column row_align column_align

    val clist_row_is_visible_: gtkobj -> int -> bool
        = app2(symb"mgtk_gtk_clist_row_is_visible")
    val clist_row_is_visible: 'a GtkCList -> int -> bool
        = fn OBJ clist => fn row => clist_row_is_visible_ clist row

    val clist_get_cell_type_: gtkobj -> int -> int -> int
        = app3(symb"mgtk_gtk_clist_get_cell_type")
    val clist_get_cell_type: 'a GtkCList -> int -> int -> gtk_cell_type
        = fn OBJ clist => fn row => fn column => clist_get_cell_type_ clist row column

    val clist_set_text_: gtkobj -> int -> int -> string -> unit
        = app4(symb"mgtk_gtk_clist_set_text")
    val clist_set_text: 'a GtkCList -> int -> int -> string -> unit
        = fn OBJ clist => fn row => fn column => fn text => clist_set_text_ clist row column text

    val clist_get_text_: gtkobj -> int -> int -> int * string
        = app3(symb"mgtk_gtk_clist_get_text")
    val clist_get_text: 'a GtkCList -> int -> int -> int * string
        = fn OBJ clist => fn row => fn column => clist_get_text_ clist row column

    val clist_set_pixmap_: gtkobj -> int -> int -> gdk_pixmap -> gdk_bitmap -> unit
        = app5(symb"mgtk_gtk_clist_set_pixmap")
    val clist_set_pixmap: 'a GtkCList -> int -> int -> gdk_pixmap -> gdk_bitmap -> unit
        = fn OBJ clist => fn row => fn col => fn pixmap => fn mask => clist_set_pixmap_ clist row col pixmap mask

    val clist_set_pixtext_: gtkobj * int * int * string * word * gdk_pixmap * gdk_bitmap option -> unit
        = app1(symb"mgtk_gtk_clist_set_pixtext")
    val clist_set_pixtext: 'a GtkCList -> int -> int -> string -> word -> gdk_pixmap -> gdk_bitmap option -> unit
        = fn OBJ clist => fn row => fn col => fn text => fn spacing => fn pixmap => fn mask => clist_set_pixtext_ (clist, row, col, text, spacing, pixmap, mask)

    val clist_set_pixtext'_: gtkobj * int * int * string * word * gdk_pixmap -> unit
        = app1(symb"mgtk_gtk_clist_set_pixtext_short")
    val clist_set_pixtext': 'a GtkCList -> int -> int -> string -> word -> gdk_pixmap -> unit
        = fn OBJ clist => fn row => fn col => fn text => fn spacing => fn pixmap => clist_set_pixtext'_ (clist, row, col, text, spacing, pixmap)

    val clist_set_foreground_: gtkobj -> int -> gdk_color -> unit
        = app3(symb"mgtk_gtk_clist_set_foreground")
    val clist_set_foreground: 'a GtkCList -> int -> gdk_color -> unit
        = fn OBJ clist => fn row => fn color => clist_set_foreground_ clist row color

    val clist_set_background_: gtkobj -> int -> gdk_color -> unit
        = app3(symb"mgtk_gtk_clist_set_background")
    val clist_set_background: 'a GtkCList -> int -> gdk_color -> unit
        = fn OBJ clist => fn row => fn color => clist_set_background_ clist row color

    val clist_set_cell_style_: gtkobj -> int -> int -> gtk_style -> unit
        = app4(symb"mgtk_gtk_clist_set_cell_style")
    val clist_set_cell_style: 'a GtkCList -> int -> int -> gtk_style -> unit
        = fn OBJ clist => fn row => fn column => fn style => clist_set_cell_style_ clist row column style

    val clist_get_cell_style_: gtkobj -> int -> int -> gtk_style
        = app3(symb"mgtk_gtk_clist_get_cell_style")
    val clist_get_cell_style: 'a GtkCList -> int -> int -> gtk_style
        = fn OBJ clist => fn row => fn column => clist_get_cell_style_ clist row column

    val clist_set_row_style_: gtkobj -> int -> gtk_style -> unit
        = app3(symb"mgtk_gtk_clist_set_row_style")
    val clist_set_row_style: 'a GtkCList -> int -> gtk_style -> unit
        = fn OBJ clist => fn row => fn style => clist_set_row_style_ clist row style

    val clist_get_row_style_: gtkobj -> int -> gtk_style
        = app2(symb"mgtk_gtk_clist_get_row_style")
    val clist_get_row_style: 'a GtkCList -> int -> gtk_style
        = fn OBJ clist => fn row => clist_get_row_style_ clist row

    val clist_set_shift_: gtkobj -> int -> int -> int -> int -> unit
        = app5(symb"mgtk_gtk_clist_set_shift")
    val clist_set_shift: 'a GtkCList -> int -> int -> int -> int -> unit
        = fn OBJ clist => fn row => fn column => fn vertical => fn horizontal => clist_set_shift_ clist row column vertical horizontal

    val clist_set_selectable_: gtkobj -> int -> bool -> unit
        = app3(symb"mgtk_gtk_clist_set_selectable")
    val clist_set_selectable: 'a GtkCList -> int -> bool -> unit
        = fn OBJ clist => fn row => fn selectable => clist_set_selectable_ clist row selectable

    val clist_get_selectable_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_get_selectable")
    val clist_get_selectable: 'a GtkCList -> int -> unit
        = fn OBJ clist => fn row => clist_get_selectable_ clist row

    val clist_remove_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_remove")
    val clist_remove: 'a GtkCList -> int -> unit
        = fn OBJ clist => fn row => clist_remove_ clist row

    val clist_select_row_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_select_row")
    val clist_select_row: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn row => fn column => clist_select_row_ clist row column

    val clist_unselect_row_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_unselect_row")
    val clist_unselect_row: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn row => fn column => clist_unselect_row_ clist row column

    val clist_undo_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_undo_selection")
    val clist_undo_selection: 'a GtkCList -> unit
        = fn OBJ clist => clist_undo_selection_ clist

    val clist_clear_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_clear")
    val clist_clear: 'a GtkCList -> unit
        = fn OBJ clist => clist_clear_ clist

    val clist_get_selection_info_: gtkobj -> int -> int -> int * int * int
        = app3(symb"mgtk_gtk_clist_get_selection_info")
    val clist_get_selection_info: 'a GtkCList -> int -> int -> int * int * int
        = fn OBJ clist => fn x => fn y => clist_get_selection_info_ clist x y

    val clist_select_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_select_all")
    val clist_select_all: 'a GtkCList -> unit
        = fn OBJ clist => clist_select_all_ clist

    val clist_unselect_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_unselect_all")
    val clist_unselect_all: 'a GtkCList -> unit
        = fn OBJ clist => clist_unselect_all_ clist

    val clist_swap_rows_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_swap_rows")
    val clist_swap_rows: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn row1 => fn row2 => clist_swap_rows_ clist row1 row2

    val clist_row_move_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_clist_row_move")
    val clist_row_move: 'a GtkCList -> int -> int -> unit
        = fn OBJ clist => fn source_row => fn dest_row => clist_row_move_ clist source_row dest_row

    val clist_set_sort_column_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_set_sort_column")
    val clist_set_sort_column: 'a GtkCList -> int -> unit
        = fn OBJ clist => fn column => clist_set_sort_column_ clist column

    val clist_set_sort_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_clist_set_sort_type")
    val clist_set_sort_type: 'a GtkCList -> gtk_sort_type -> unit
        = fn OBJ clist => fn sort_type => clist_set_sort_type_ clist sort_type

    val clist_sort_: gtkobj -> unit
        = app1(symb"mgtk_gtk_clist_sort")
    val clist_sort: 'a GtkCList -> unit
        = fn OBJ clist => clist_sort_ clist

    val clist_set_auto_sort_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_clist_set_auto_sort")
    val clist_set_auto_sort: 'a GtkCList -> bool -> unit
        = fn OBJ clist => fn auto_sort => clist_set_auto_sort_ clist auto_sort

    (* *** ListItem *** *)

    type 'a listitem_t = base
    type 'a GtkListItem = 'a listitem_t GtkItem


    val list_item_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_list_item_new")
    val list_item_new: unit -> base GtkListItem
        = fn dummy => OBJ(list_item_new_ dummy)

    val list_item_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_list_item_new_with_label")
    val list_item_new_with_label: string -> base GtkListItem
        = fn label => OBJ(list_item_new_with_label_ label)

    val list_item_select_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_item_select")
    val list_item_select: 'a GtkListItem -> unit
        = fn OBJ list_item => list_item_select_ list_item

    val list_item_deselect_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_item_deselect")
    val list_item_deselect: 'a GtkListItem -> unit
        = fn OBJ list_item => list_item_deselect_ list_item

    (* *** List *** *)

    type 'a list_t = base
    type 'a GtkList = 'a list_t GtkContainer


    val list_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_list_new")
    val list_new: unit -> base GtkList
        = fn dummy => OBJ(list_new_ dummy)

    val list_clear_items_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_list_clear_items")
    val list_clear_items: 'a GtkList -> int -> int -> unit
        = fn OBJ list => fn start_item => fn end_item => list_clear_items_ list start_item end_item

    val list_select_item_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_list_select_item")
    val list_select_item: 'a GtkList -> int -> unit
        = fn OBJ list => fn item => list_select_item_ list item

    val list_unselect_item_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_list_unselect_item")
    val list_unselect_item: 'a GtkList -> int -> unit
        = fn OBJ list => fn item => list_unselect_item_ list item

    val list_select_child_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_list_select_child")
    val list_select_child: 'a GtkList -> 'b GtkWidget -> unit
        = fn OBJ list => fn OBJ child => list_select_child_ list child

    val list_unselect_child_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_list_unselect_child")
    val list_unselect_child: 'a GtkList -> 'b GtkWidget -> unit
        = fn OBJ list => fn OBJ child => list_unselect_child_ list child

    val list_child_position_: gtkobj -> gtkobj -> int
        = app2(symb"mgtk_gtk_list_child_position")
    val list_child_position: 'a GtkList -> 'b GtkWidget -> int
        = fn OBJ list => fn OBJ child => list_child_position_ list child

    val list_set_selection_mode_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_list_set_selection_mode")
    val list_set_selection_mode: 'a GtkList -> gtk_selection_mode -> unit
        = fn OBJ list => fn mode => list_set_selection_mode_ list mode

    val list_extend_selection_: gtkobj -> int -> real -> bool -> unit
        = app4(symb"mgtk_gtk_list_extend_selection")
    val list_extend_selection: 'a GtkList -> gtk_scroll_type -> real -> bool -> unit
        = fn OBJ list => fn scroll_type => fn position => fn auto_start => list_extend_selection_ list scroll_type position auto_start

    val list_start_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_start_selection")
    val list_start_selection: 'a GtkList -> unit
        = fn OBJ list => list_start_selection_ list

    val list_end_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_end_selection")
    val list_end_selection: 'a GtkList -> unit
        = fn OBJ list => list_end_selection_ list

    val list_select_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_select_all")
    val list_select_all: 'a GtkList -> unit
        = fn OBJ list => list_select_all_ list

    val list_unselect_all_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_unselect_all")
    val list_unselect_all: 'a GtkList -> unit
        = fn OBJ list => list_unselect_all_ list

    val list_scroll_horizontal_: gtkobj -> int -> real -> unit
        = app3(symb"mgtk_gtk_list_scroll_horizontal")
    val list_scroll_horizontal: 'a GtkList -> gtk_scroll_type -> real -> unit
        = fn OBJ list => fn scroll_type => fn pos => list_scroll_horizontal_ list scroll_type pos

    val list_scroll_vertical_: gtkobj -> int -> real -> unit
        = app3(symb"mgtk_gtk_list_scroll_vertical")
    val list_scroll_vertical: 'a GtkList -> gtk_scroll_type -> real -> unit
        = fn OBJ list => fn scroll_type => fn pos => list_scroll_vertical_ list scroll_type pos

    val list_toggle_add_mode_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_toggle_add_mode")
    val list_toggle_add_mode: 'a GtkList -> unit
        = fn OBJ list => list_toggle_add_mode_ list

    val list_toggle_focus_row_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_toggle_focus_row")
    val list_toggle_focus_row: 'a GtkList -> unit
        = fn OBJ list => list_toggle_focus_row_ list

    val list_toggle_row_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_list_toggle_row")
    val list_toggle_row: 'a GtkList -> 'b GtkWidget -> unit
        = fn OBJ list => fn OBJ item => list_toggle_row_ list item

    val list_undo_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_undo_selection")
    val list_undo_selection: 'a GtkList -> unit
        = fn OBJ list => list_undo_selection_ list

    val list_end_drag_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_list_end_drag_selection")
    val list_end_drag_selection: 'a GtkList -> unit
        = fn OBJ list => list_end_drag_selection_ list

    (* *** MenuShell *** *)

    type 'a menushell_t = base
    type 'a GtkMenuShell = 'a menushell_t GtkContainer


    val menu_shell_append_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_shell_append")
    val menu_shell_append: 'a GtkMenuShell -> 'b GtkWidget -> unit
        = fn OBJ menu_shell => fn OBJ child => menu_shell_append_ menu_shell child

    val menu_shell_prepend_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_shell_prepend")
    val menu_shell_prepend: 'a GtkMenuShell -> 'b GtkWidget -> unit
        = fn OBJ menu_shell => fn OBJ child => menu_shell_prepend_ menu_shell child

    val menu_shell_insert_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_menu_shell_insert")
    val menu_shell_insert: 'a GtkMenuShell -> 'b GtkWidget -> int -> unit
        = fn OBJ menu_shell => fn OBJ child => fn position => menu_shell_insert_ menu_shell child position

    val menu_shell_deactivate_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_shell_deactivate")
    val menu_shell_deactivate: 'a GtkMenuShell -> unit
        = fn OBJ menu_shell => menu_shell_deactivate_ menu_shell

    val menu_shell_select_item_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_shell_select_item")
    val menu_shell_select_item: 'a GtkMenuShell -> 'b GtkWidget -> unit
        = fn OBJ menu_shell => fn OBJ menu_item => menu_shell_select_item_ menu_shell menu_item

    val menu_shell_deselect_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_shell_deselect")
    val menu_shell_deselect: 'a GtkMenuShell -> unit
        = fn OBJ menu_shell => menu_shell_deselect_ menu_shell

    val menu_shell_activate_item_: gtkobj -> gtkobj -> bool -> unit
        = app3(symb"mgtk_gtk_menu_shell_activate_item")
    val menu_shell_activate_item: 'a GtkMenuShell -> 'b GtkWidget -> bool -> unit
        = fn OBJ menu_shell => fn OBJ menu_item => fn force_deactivate => menu_shell_activate_item_ menu_shell menu_item force_deactivate

    (* *** MenuBar *** *)

    type 'a menubar_t = base
    type 'a GtkMenuBar = 'a menubar_t GtkMenuShell


    val menu_bar_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_menu_bar_new")
    val menu_bar_new: unit -> base GtkMenuBar
        = fn dummy => OBJ(menu_bar_new_ dummy)

    val menu_bar_append_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_bar_append")
    val menu_bar_append: 'a GtkMenuBar -> 'b GtkWidget -> unit
        = fn OBJ menu_bar => fn OBJ child => menu_bar_append_ menu_bar child

    val menu_bar_prepend_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_bar_prepend")
    val menu_bar_prepend: 'a GtkMenuBar -> 'b GtkWidget -> unit
        = fn OBJ menu_bar => fn OBJ child => menu_bar_prepend_ menu_bar child

    val menu_bar_insert_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_menu_bar_insert")
    val menu_bar_insert: 'a GtkMenuBar -> 'b GtkWidget -> int -> unit
        = fn OBJ menu_bar => fn OBJ child => fn position => menu_bar_insert_ menu_bar child position

    val menu_bar_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_menu_bar_set_shadow_type")
    val menu_bar_set_shadow_type: 'a GtkMenuBar -> gtk_shadow_type -> unit
        = fn OBJ menu_bar => fn typ => menu_bar_set_shadow_type_ menu_bar typ

    (* *** Menu *** *)

    type 'a menu_t = base
    type 'a GtkMenu = 'a menu_t GtkMenuShell


    val menu_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_menu_new")
    val menu_new: unit -> base GtkMenu
        = fn dummy => OBJ(menu_new_ dummy)

    val menu_append_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_append")
    val menu_append: 'a GtkMenu -> 'b GtkWidget -> unit
        = fn OBJ menu => fn OBJ child => menu_append_ menu child

    val menu_prepend_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_prepend")
    val menu_prepend: 'a GtkMenu -> 'b GtkWidget -> unit
        = fn OBJ menu => fn OBJ child => menu_prepend_ menu child

    val menu_insert_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_menu_insert")
    val menu_insert: 'a GtkMenu -> 'b GtkWidget -> int -> unit
        = fn OBJ menu => fn OBJ child => fn position => menu_insert_ menu child position

    val menu_reposition_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_reposition")
    val menu_reposition: 'a GtkMenu -> unit
        = fn OBJ menu => menu_reposition_ menu

    val menu_popdown_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_popdown")
    val menu_popdown: 'a GtkMenu -> unit
        = fn OBJ menu => menu_popdown_ menu

    val menu_get_active_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_menu_get_active")
    val menu_get_active: 'a GtkMenu -> base GtkWidget
        = fn OBJ menu => OBJ(menu_get_active_ menu)

    val menu_set_active_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_menu_set_active")
    val menu_set_active: 'a GtkMenu -> int -> unit
        = fn OBJ menu => fn index => menu_set_active_ menu index

    val menu_set_accel_group_: gtkobj -> gtk_accel_group -> unit
        = app2(symb"mgtk_gtk_menu_set_accel_group")
    val menu_set_accel_group: 'a GtkMenu -> gtk_accel_group -> unit
        = fn OBJ menu => fn group => menu_set_accel_group_ menu group

    val menu_get_accel_group_: gtkobj -> gtk_accel_group
        = app1(symb"mgtk_gtk_menu_get_accel_group")
    val menu_get_accel_group: 'a GtkMenu -> gtk_accel_group
        = fn OBJ menu => menu_get_accel_group_ menu

    val menu_get_attach_widget_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_menu_get_attach_widget")
    val menu_get_attach_widget: 'a GtkMenu -> base GtkWidget
        = fn OBJ menu => OBJ(menu_get_attach_widget_ menu)

    val menu_detach_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_detach")
    val menu_detach: 'a GtkMenu -> unit
        = fn OBJ menu => menu_detach_ menu

    val menu_set_tearoff_state_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_menu_set_tearoff_state")
    val menu_set_tearoff_state: 'a GtkMenu -> bool -> unit
        = fn OBJ menu => fn torn_off => menu_set_tearoff_state_ menu torn_off

    val menu_set_title_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_menu_set_title")
    val menu_set_title: 'a GtkMenu -> string -> unit
        = fn OBJ menu => fn title => menu_set_title_ menu title

    val menu_reorder_child_: gtkobj -> gtkobj -> int -> unit
        = app3(symb"mgtk_gtk_menu_reorder_child")
    val menu_reorder_child: 'a GtkMenu -> 'b GtkWidget -> int -> unit
        = fn OBJ menu => fn OBJ child => fn position => menu_reorder_child_ menu child position

    (* *** MenuItem *** *)

    type 'a menuitem_t = base
    type 'a GtkMenuItem = 'a menuitem_t GtkItem


    val menu_item_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_menu_item_new")
    val menu_item_new: unit -> base GtkMenuItem
        = fn dummy => OBJ(menu_item_new_ dummy)

    val menu_item_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_menu_item_new_with_label")
    val menu_item_new_with_label: string -> base GtkMenuItem
        = fn label => OBJ(menu_item_new_with_label_ label)

    val menu_item_set_submenu_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_menu_item_set_submenu")
    val menu_item_set_submenu: 'a GtkMenuItem -> 'b GtkWidget -> unit
        = fn OBJ menu_item => fn OBJ submenu => menu_item_set_submenu_ menu_item submenu

    val menu_item_remove_submenu_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_item_remove_submenu")
    val menu_item_remove_submenu: 'a GtkMenuItem -> unit
        = fn OBJ menu_item => menu_item_remove_submenu_ menu_item

    val menu_item_set_placement_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_menu_item_set_placement")
    val menu_item_set_placement: 'a GtkMenuItem -> gtk_submenu_placement -> unit
        = fn OBJ menu_item => fn placement => menu_item_set_placement_ menu_item placement

    val menu_item_configure_: gtkobj -> bool -> bool -> unit
        = app3(symb"mgtk_gtk_menu_item_configure")
    val menu_item_configure: 'a GtkMenuItem -> bool -> bool -> unit
        = fn OBJ menu_item => fn show_toggle_indicator => fn show_submenu_indicator => menu_item_configure_ menu_item show_toggle_indicator show_submenu_indicator

    val menu_item_select_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_item_select")
    val menu_item_select: 'a GtkMenuItem -> unit
        = fn OBJ menu_item => menu_item_select_ menu_item

    val menu_item_deselect_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_item_deselect")
    val menu_item_deselect: 'a GtkMenuItem -> unit
        = fn OBJ menu_item => menu_item_deselect_ menu_item

    val menu_item_activate_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_item_activate")
    val menu_item_activate: 'a GtkMenuItem -> unit
        = fn OBJ menu_item => menu_item_activate_ menu_item

    val menu_item_right_justify_: gtkobj -> unit
        = app1(symb"mgtk_gtk_menu_item_right_justify")
    val menu_item_right_justify: 'a GtkMenuItem -> unit
        = fn OBJ menu_item => menu_item_right_justify_ menu_item

    (* *** CheckMenuItem *** *)

    type 'a checkmenuitem_t = base
    type 'a GtkCheckMenuItem = 'a checkmenuitem_t GtkMenuItem

    val check_menu_item_get_active_: gtkobj -> word
        = app1(symb"mgtk_gtk_check_menu_item_get_active")
    val check_menu_item_get_active: 'a GtkCheckMenuItem -> word
        = fn OBJ wid => check_menu_item_get_active_ wid


    val check_menu_item_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_check_menu_item_new")
    val check_menu_item_new: unit -> base GtkCheckMenuItem
        = fn dummy => OBJ(check_menu_item_new_ dummy)

    val check_menu_item_new_with_label_: string -> gtkobj
        = app1(symb"mgtk_gtk_check_menu_item_new_with_label")
    val check_menu_item_new_with_label: string -> base GtkCheckMenuItem
        = fn label => OBJ(check_menu_item_new_with_label_ label)

    val check_menu_item_set_active_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_check_menu_item_set_active")
    val check_menu_item_set_active: 'a GtkCheckMenuItem -> bool -> unit
        = fn OBJ check_menu_item => fn state => check_menu_item_set_active_ check_menu_item state

    val check_menu_item_set_show_toggle_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_check_menu_item_set_show_toggle")
    val check_menu_item_set_show_toggle: 'a GtkCheckMenuItem -> bool -> unit
        = fn OBJ menu_item => fn always => check_menu_item_set_show_toggle_ menu_item always

    val check_menu_item_toggled_: gtkobj -> unit
        = app1(symb"mgtk_gtk_check_menu_item_toggled")
    val check_menu_item_toggled: 'a GtkCheckMenuItem -> unit
        = fn OBJ check_menu_item => check_menu_item_toggled_ check_menu_item

    (* *** RadioMenuItem *** *)

    type 'a radiomenuitem_t = base
    type 'a GtkRadioMenuItem = 'a radiomenuitem_t GtkCheckMenuItem


    (* *** OptionMenu *** *)

    type 'a optionmenu_t = base
    type 'a GtkOptionMenu = 'a optionmenu_t GtkButton


    val option_menu_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_option_menu_new")
    val option_menu_new: unit -> base GtkOptionMenu
        = fn dummy => OBJ(option_menu_new_ dummy)

    val option_menu_get_menu_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_option_menu_get_menu")
    val option_menu_get_menu: 'a GtkOptionMenu -> base GtkWidget
        = fn OBJ option_menu => OBJ(option_menu_get_menu_ option_menu)

    val option_menu_set_menu_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_option_menu_set_menu")
    val option_menu_set_menu: 'a GtkOptionMenu -> 'b GtkWidget -> unit
        = fn OBJ option_menu => fn OBJ menu => option_menu_set_menu_ option_menu menu

    val option_menu_remove_menu_: gtkobj -> unit
        = app1(symb"mgtk_gtk_option_menu_remove_menu")
    val option_menu_remove_menu: 'a GtkOptionMenu -> unit
        = fn OBJ option_menu => option_menu_remove_menu_ option_menu

    val option_menu_set_history_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_option_menu_set_history")
    val option_menu_set_history: 'a GtkOptionMenu -> int -> unit
        = fn OBJ option_menu => fn index => option_menu_set_history_ option_menu index

    (* *** TearoffMenuItem *** *)

    type 'a tearoffmenuitem_t = base
    type 'a GtkTearoffMenuItem = 'a tearoffmenuitem_t GtkMenuItem


    val tearoff_menu_item_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_tearoff_menu_item_new")
    val tearoff_menu_item_new: unit -> base GtkTearoffMenuItem
        = fn dummy => OBJ(tearoff_menu_item_new_ dummy)

    (* *** ItemFactory *** *)

    type 'a itemfactory_t = base
    type 'a GtkItemFactory = 'a itemfactory_t GtkObject


    val item_factory_new_: word -> string -> gtk_accel_group -> gtkobj
        = app3(symb"mgtk_gtk_item_factory_new")
    val item_factory_new: word -> string -> gtk_accel_group -> base GtkItemFactory
        = fn container_type => fn path => fn group => OBJ(item_factory_new_ container_type path group)

    val item_factory_parse_rc_: string -> unit
        = app1(symb"mgtk_gtk_item_factory_parse_rc")
    val item_factory_parse_rc: string -> unit
        = fn file_name => item_factory_parse_rc_ file_name

    val item_factory_parse_rc_string_: string -> unit
        = app1(symb"mgtk_gtk_item_factory_parse_rc_string")
    val item_factory_parse_rc_string: string -> unit
        = fn rc_string => item_factory_parse_rc_string_ rc_string

    val item_factory_add_foreign_: gtkobj -> string -> gtk_accel_group -> word -> int -> unit
        = app5(symb"mgtk_gtk_item_factory_add_foreign")
    val item_factory_add_foreign: 'a GtkWidget -> string -> gtk_accel_group -> word -> gdk_modifier_type list -> unit
        = fn OBJ accel_widget => fn full_path => fn accel_group => fn keyval => fn modifiers => item_factory_add_foreign_ accel_widget full_path accel_group keyval (setFlags modifiers)

    val item_factory_from_widget_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_item_factory_from_widget")
    val item_factory_from_widget: 'a GtkWidget -> base GtkItemFactory
        = fn OBJ widget => OBJ(item_factory_from_widget_ widget)

    val item_factory_path_from_widget_: gtkobj -> string
        = app1(symb"mgtk_gtk_item_factory_path_from_widget")
    val item_factory_path_from_widget: 'a GtkWidget -> string
        = fn OBJ widget => item_factory_path_from_widget_ widget

    val item_factory_get_widget_: gtkobj -> string -> gtkobj
        = app2(symb"mgtk_gtk_item_factory_get_widget")
    val item_factory_get_widget: 'a GtkItemFactory -> string -> base GtkWidget
        = fn OBJ ifactory => fn path => OBJ(item_factory_get_widget_ ifactory path)

    val item_factory_get_widget_by_action_: gtkobj -> word -> gtkobj
        = app2(symb"mgtk_gtk_item_factory_get_widget_by_action")
    val item_factory_get_widget_by_action: 'a GtkItemFactory -> word -> base GtkWidget
        = fn OBJ ifactory => fn action => OBJ(item_factory_get_widget_by_action_ ifactory action)

    val item_factory_delete_item_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_item_factory_delete_item")
    val item_factory_delete_item: 'a GtkItemFactory -> string -> unit
        = fn OBJ ifactory => fn path => item_factory_delete_item_ ifactory path

    val item_factory_popup_: gtkobj -> word -> word -> word -> word -> unit
        = app5(symb"mgtk_gtk_item_factory_popup")
    val item_factory_popup: 'a GtkItemFactory -> word -> word -> word -> word -> unit
        = fn OBJ ifactory => fn x => fn y => fn mouse_button => fn time => item_factory_popup_ ifactory x y mouse_button time

    (* *** Range *** *)

    type 'a range_t = base
    type 'a GtkRange = 'a range_t GtkWidget


    val range_get_adjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_range_get_adjustment")
    val range_get_adjustment: 'a GtkRange -> base GtkAdjustment
        = fn OBJ range => OBJ(range_get_adjustment_ range)

    val range_set_update_policy_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_range_set_update_policy")
    val range_set_update_policy: 'a GtkRange -> gtk_update_type -> unit
        = fn OBJ range => fn policy => range_set_update_policy_ range policy

    val range_set_adjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_range_set_adjustment")
    val range_set_adjustment: 'a GtkRange -> 'b GtkAdjustment -> unit
        = fn OBJ range => fn OBJ adjustment => range_set_adjustment_ range adjustment

    val range_draw_background_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_draw_background")
    val range_draw_background: 'a GtkRange -> unit
        = fn OBJ range => range_draw_background_ range

    val range_clear_background_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_clear_background")
    val range_clear_background: 'a GtkRange -> unit
        = fn OBJ range => range_clear_background_ range

    val range_draw_trough_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_draw_trough")
    val range_draw_trough: 'a GtkRange -> unit
        = fn OBJ range => range_draw_trough_ range

    val range_draw_slider_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_draw_slider")
    val range_draw_slider: 'a GtkRange -> unit
        = fn OBJ range => range_draw_slider_ range

    val range_draw_step_forw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_draw_step_forw")
    val range_draw_step_forw: 'a GtkRange -> unit
        = fn OBJ range => range_draw_step_forw_ range

    val range_draw_step_back_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_draw_step_back")
    val range_draw_step_back: 'a GtkRange -> unit
        = fn OBJ range => range_draw_step_back_ range

    val range_slider_update_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_slider_update")
    val range_slider_update: 'a GtkRange -> unit
        = fn OBJ range => range_slider_update_ range

    val range_default_hmotion_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_range_default_hmotion")
    val range_default_hmotion: 'a GtkRange -> int -> int -> unit
        = fn OBJ range => fn xdelta => fn ydelta => range_default_hmotion_ range xdelta ydelta

    val range_default_hslider_update_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_default_hslider_update")
    val range_default_hslider_update: 'a GtkRange -> unit
        = fn OBJ range => range_default_hslider_update_ range

    val range_default_vmotion_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_range_default_vmotion")
    val range_default_vmotion: 'a GtkRange -> int -> int -> unit
        = fn OBJ range => fn xdelta => fn ydelta => range_default_vmotion_ range xdelta ydelta

    val range_default_vslider_update_: gtkobj -> unit
        = app1(symb"mgtk_gtk_range_default_vslider_update")
    val range_default_vslider_update: 'a GtkRange -> unit
        = fn OBJ range => range_default_vslider_update_ range

    (* *** Scale *** *)

    type 'a scale_t = base
    type 'a GtkScale = 'a scale_t GtkRange


    val scale_set_digits_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_scale_set_digits")
    val scale_set_digits: 'a GtkScale -> word -> unit
        = fn OBJ scale => fn digits => scale_set_digits_ scale digits

    val scale_set_draw_value_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_scale_set_draw_value")
    val scale_set_draw_value: 'a GtkScale -> bool -> unit
        = fn OBJ scale => fn draw_value => scale_set_draw_value_ scale draw_value

    val scale_set_value_pos_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_scale_set_value_pos")
    val scale_set_value_pos: 'a GtkScale -> gtk_position_type -> unit
        = fn OBJ scale => fn pos => scale_set_value_pos_ scale pos

    val scale_get_value_width_: gtkobj -> int
        = app1(symb"mgtk_gtk_scale_get_value_width")
    val scale_get_value_width: 'a GtkScale -> int
        = fn OBJ scale => scale_get_value_width_ scale

    val scale_draw_value_: gtkobj -> unit
        = app1(symb"mgtk_gtk_scale_draw_value")
    val scale_draw_value: 'a GtkScale -> unit
        = fn OBJ scale => scale_draw_value_ scale

    (* *** HScale *** *)

    type 'a hscale_t = base
    type 'a GtkHScale = 'a hscale_t GtkScale


    val hscale_new_: gtkobj option -> gtkobj
        = app1(symb"mgtk_gtk_hscale_new")
    val hscale_new: 'a GtkAdjustment option -> base GtkHScale
        = fn adjustment => OBJ(hscale_new_ (unwrapObjOpt adjustment))

    val hscale_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hscale_new_short")
    val hscale_new': unit -> base GtkHScale
        = fn dummy => OBJ(hscale_new'_ dummy)

    (* *** VScale *** *)

    type 'a vscale_t = base
    type 'a GtkVScale = 'a vscale_t GtkScale


    val vscale_new_: gtkobj option -> gtkobj
        = app1(symb"mgtk_gtk_vscale_new")
    val vscale_new: 'a GtkAdjustment option -> base GtkVScale
        = fn adjustment => OBJ(vscale_new_ (unwrapObjOpt adjustment))

    val vscale_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vscale_new_short")
    val vscale_new': unit -> base GtkVScale
        = fn dummy => OBJ(vscale_new'_ dummy)

    (* *** Scrollbar *** *)

    type 'a scrollbar_t = base
    type 'a GtkScrollbar = 'a scrollbar_t GtkRange


    (* *** HScrollbar *** *)

    type 'a hscrollbar_t = base
    type 'a GtkHScrollbar = 'a hscrollbar_t GtkScrollbar


    val hscrollbar_new_: gtkobj option -> gtkobj
        = app1(symb"mgtk_gtk_hscrollbar_new")
    val hscrollbar_new: 'a GtkAdjustment option -> base GtkHScrollbar
        = fn adjustment => OBJ(hscrollbar_new_ (unwrapObjOpt adjustment))

    val hscrollbar_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hscrollbar_new_short")
    val hscrollbar_new': unit -> base GtkHScrollbar
        = fn dummy => OBJ(hscrollbar_new'_ dummy)

    (* *** VScrollbar *** *)

    type 'a vscrollbar_t = base
    type 'a GtkVScrollbar = 'a vscrollbar_t GtkScrollbar


    val vscrollbar_new_: gtkobj option -> gtkobj
        = app1(symb"mgtk_gtk_vscrollbar_new")
    val vscrollbar_new: 'a GtkAdjustment option -> base GtkVScrollbar
        = fn adjustment => OBJ(vscrollbar_new_ (unwrapObjOpt adjustment))

    val vscrollbar_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vscrollbar_new_short")
    val vscrollbar_new': unit -> base GtkVScrollbar
        = fn dummy => OBJ(vscrollbar_new'_ dummy)

    (* *** Ruler *** *)

    type 'a ruler_t = base
    type 'a GtkRuler = 'a ruler_t GtkWidget


    val ruler_set_metric_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_ruler_set_metric")
    val ruler_set_metric: 'a GtkRuler -> gtk_metric_type -> unit
        = fn OBJ ruler => fn metric => ruler_set_metric_ ruler metric

    val ruler_set_range_: gtkobj -> real -> real -> real -> real -> unit
        = app5(symb"mgtk_gtk_ruler_set_range")
    val ruler_set_range: 'a GtkRuler -> real -> real -> real -> real -> unit
        = fn OBJ ruler => fn lower => fn upper => fn position => fn max_size => ruler_set_range_ ruler lower upper position max_size

    val ruler_draw_ticks_: gtkobj -> unit
        = app1(symb"mgtk_gtk_ruler_draw_ticks")
    val ruler_draw_ticks: 'a GtkRuler -> unit
        = fn OBJ ruler => ruler_draw_ticks_ ruler

    val ruler_draw_pos_: gtkobj -> unit
        = app1(symb"mgtk_gtk_ruler_draw_pos")
    val ruler_draw_pos: 'a GtkRuler -> unit
        = fn OBJ ruler => ruler_draw_pos_ ruler

    (* *** HRuler *** *)

    type 'a hruler_t = base
    type 'a GtkHRuler = 'a hruler_t GtkRuler


    val hruler_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_hruler_new")
    val hruler_new: unit -> base GtkHRuler
        = fn dummy => OBJ(hruler_new_ dummy)

    (* *** VRuler *** *)

    type 'a vruler_t = base
    type 'a GtkVRuler = 'a vruler_t GtkRuler


    val vruler_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_vruler_new")
    val vruler_new: unit -> base GtkVRuler
        = fn dummy => OBJ(vruler_new_ dummy)

    (* *** Editable *** *)

    type 'a editable_t = base
    type 'a GtkEditable = 'a editable_t GtkWidget

    val editable_get_selection_start_pos_: gtkobj -> word
        = app1(symb"mgtk_gtk_editable_get_selection_start_pos")
    val editable_get_selection_start_pos: 'a GtkEditable -> word
        = fn OBJ wid => editable_get_selection_start_pos_ wid

    val editable_get_selection_end_pos_: gtkobj -> word
        = app1(symb"mgtk_gtk_editable_get_selection_end_pos")
    val editable_get_selection_end_pos: 'a GtkEditable -> word
        = fn OBJ wid => editable_get_selection_end_pos_ wid


    val editable_select_region_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_editable_select_region")
    val editable_select_region: 'a GtkEditable -> int -> int -> unit
        = fn OBJ editable => fn start_pos => fn end_pos => editable_select_region_ editable start_pos end_pos

    val editable_delete_text_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_editable_delete_text")
    val editable_delete_text: 'a GtkEditable -> int -> int -> unit
        = fn OBJ editable => fn start_pos => fn end_pos => editable_delete_text_ editable start_pos end_pos

    val editable_get_chars_: gtkobj -> int -> int -> string
        = app3(symb"mgtk_gtk_editable_get_chars")
    val editable_get_chars: 'a GtkEditable -> int -> int -> string
        = fn OBJ editable => fn start_pos => fn end_pos => editable_get_chars_ editable start_pos end_pos

    val editable_cut_clipboard_: gtkobj -> unit
        = app1(symb"mgtk_gtk_editable_cut_clipboard")
    val editable_cut_clipboard: 'a GtkEditable -> unit
        = fn OBJ edtiable => editable_cut_clipboard_ edtiable

    val editable_copy_clipboard_: gtkobj -> unit
        = app1(symb"mgtk_gtk_editable_copy_clipboard")
    val editable_copy_clipboard: 'a GtkEditable -> unit
        = fn OBJ editable => editable_copy_clipboard_ editable

    val editable_paste_clipboard_: gtkobj -> unit
        = app1(symb"mgtk_gtk_editable_paste_clipboard")
    val editable_paste_clipboard: 'a GtkEditable -> unit
        = fn OBJ editable => editable_paste_clipboard_ editable

    val editable_claim_selection_: gtkobj -> bool -> word -> unit
        = app3(symb"mgtk_gtk_editable_claim_selection")
    val editable_claim_selection: 'a GtkEditable -> bool -> word -> unit
        = fn OBJ editable => fn claim => fn time => editable_claim_selection_ editable claim time

    val editable_delete_selection_: gtkobj -> unit
        = app1(symb"mgtk_gtk_editable_delete_selection")
    val editable_delete_selection: 'a GtkEditable -> unit
        = fn OBJ editable => editable_delete_selection_ editable

    val editable_changed_: gtkobj -> unit
        = app1(symb"mgtk_gtk_editable_changed")
    val editable_changed: 'a GtkEditable -> unit
        = fn OBJ editable => editable_changed_ editable

    val editable_set_position_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_editable_set_position")
    val editable_set_position: 'a GtkEditable -> int -> unit
        = fn OBJ editable => fn position => editable_set_position_ editable position

    val editable_get_position_: gtkobj -> int
        = app1(symb"mgtk_gtk_editable_get_position")
    val editable_get_position: 'a GtkEditable -> int
        = fn OBJ editable => editable_get_position_ editable

    val editable_set_editable_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_editable_set_editable")
    val editable_set_editable: 'a GtkEditable -> bool -> unit
        = fn OBJ editable => fn is_editable => editable_set_editable_ editable is_editable

    (* *** Entry *** *)

    type 'a entry_t = base
    type 'a GtkEntry = 'a entry_t GtkEditable


    val entry_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_entry_new")
    val entry_new: unit -> base GtkEntry
        = fn dummy => OBJ(entry_new_ dummy)

    val entry_new_with_max_length_: int -> gtkobj
        = app1(symb"mgtk_gtk_entry_new_with_max_length")
    val entry_new_with_max_length: int -> base GtkEntry
        = fn max => OBJ(entry_new_with_max_length_ max)

    val entry_set_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_entry_set_text")
    val entry_set_text: 'a GtkEntry -> string -> unit
        = fn OBJ entry => fn text => entry_set_text_ entry text

    val entry_append_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_entry_append_text")
    val entry_append_text: 'a GtkEntry -> string -> unit
        = fn OBJ entry => fn text => entry_append_text_ entry text

    val entry_prepend_text_: gtkobj -> string -> unit
        = app2(symb"mgtk_gtk_entry_prepend_text")
    val entry_prepend_text: 'a GtkEntry -> string -> unit
        = fn OBJ entry => fn text => entry_prepend_text_ entry text

    val entry_set_position_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_entry_set_position")
    val entry_set_position: 'a GtkEntry -> int -> unit
        = fn OBJ entry => fn position => entry_set_position_ entry position

    val entry_get_text_: gtkobj -> string
        = app1(symb"mgtk_gtk_entry_get_text")
    val entry_get_text: 'a GtkEntry -> string
        = fn OBJ entry => entry_get_text_ entry

    val entry_select_region_: gtkobj -> int -> int -> unit
        = app3(symb"mgtk_gtk_entry_select_region")
    val entry_select_region: 'a GtkEntry -> int -> int -> unit
        = fn OBJ entry => fn start_pos => fn end_pos => entry_select_region_ entry start_pos end_pos

    val entry_set_visibility_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_entry_set_visibility")
    val entry_set_visibility: 'a GtkEntry -> bool -> unit
        = fn OBJ entry => fn visible => entry_set_visibility_ entry visible

    val entry_set_editable_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_entry_set_editable")
    val entry_set_editable: 'a GtkEntry -> bool -> unit
        = fn OBJ entry => fn editable => entry_set_editable_ entry editable

    val entry_set_max_length_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_entry_set_max_length")
    val entry_set_max_length: 'a GtkEntry -> word -> unit
        = fn OBJ entry => fn max => entry_set_max_length_ entry max

    (* *** SpinButton *** *)

    type 'a spinbutton_t = base
    type 'a GtkSpinButton = 'a spinbutton_t GtkEntry


    val spin_button_new_: gtkobj option -> real -> word -> gtkobj
        = app3(symb"mgtk_gtk_spin_button_new")
    val spin_button_new: 'a GtkAdjustment option -> real -> word -> base GtkSpinButton
        = fn adjustment => fn climb_rate => fn digits => OBJ(spin_button_new_ (unwrapObjOpt adjustment) climb_rate digits)

    val spin_button_new'_: real -> word -> gtkobj
        = app2(symb"mgtk_gtk_spin_button_new_short")
    val spin_button_new': real -> word -> base GtkSpinButton
        = fn climb_rate => fn digits => OBJ(spin_button_new'_ climb_rate digits)

    val spin_button_set_adjustment_: gtkobj -> gtkobj -> unit
        = app2(symb"mgtk_gtk_spin_button_set_adjustment")
    val spin_button_set_adjustment: 'a GtkSpinButton -> 'b GtkAdjustment -> unit
        = fn OBJ spin_button => fn OBJ adjustment => spin_button_set_adjustment_ spin_button adjustment

    val spin_button_get_adjustment_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_spin_button_get_adjustment")
    val spin_button_get_adjustment: 'a GtkSpinButton -> base GtkAdjustment
        = fn OBJ spin_button => OBJ(spin_button_get_adjustment_ spin_button)

    val spin_button_set_digits_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_spin_button_set_digits")
    val spin_button_set_digits: 'a GtkSpinButton -> word -> unit
        = fn OBJ spin_button => fn digits => spin_button_set_digits_ spin_button digits

    val spin_button_get_value_as_float_: gtkobj -> real
        = app1(symb"mgtk_gtk_spin_button_get_value_as_float")
    val spin_button_get_value_as_float: 'a GtkSpinButton -> real
        = fn OBJ spin_button => spin_button_get_value_as_float_ spin_button

    val spin_button_get_value_as_int_: gtkobj -> int
        = app1(symb"mgtk_gtk_spin_button_get_value_as_int")
    val spin_button_get_value_as_int: 'a GtkSpinButton -> int
        = fn OBJ spin_button => spin_button_get_value_as_int_ spin_button

    val spin_button_set_value_: gtkobj -> real -> unit
        = app2(symb"mgtk_gtk_spin_button_set_value")
    val spin_button_set_value: 'a GtkSpinButton -> real -> unit
        = fn OBJ spin_button => fn valu => spin_button_set_value_ spin_button valu

    val spin_button_set_update_policy_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_spin_button_set_update_policy")
    val spin_button_set_update_policy: 'a GtkSpinButton -> gtk_spin_button_update_policy -> unit
        = fn OBJ spin_button => fn policy => spin_button_set_update_policy_ spin_button policy

    val spin_button_set_numeric_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_spin_button_set_numeric")
    val spin_button_set_numeric: 'a GtkSpinButton -> bool -> unit
        = fn OBJ spin_button => fn numeric => spin_button_set_numeric_ spin_button numeric

    val spin_button_spin_: gtkobj -> int -> real -> unit
        = app3(symb"mgtk_gtk_spin_button_spin")
    val spin_button_spin: 'a GtkSpinButton -> gtk_spin_type -> real -> unit
        = fn OBJ spin_button => fn direction => fn increment => spin_button_spin_ spin_button direction increment

    val spin_button_set_wrap_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_spin_button_set_wrap")
    val spin_button_set_wrap: 'a GtkSpinButton -> bool -> unit
        = fn OBJ spin_button => fn wrap => spin_button_set_wrap_ spin_button wrap

    val spin_button_set_shadow_type_: gtkobj -> int -> unit
        = app2(symb"mgtk_gtk_spin_button_set_shadow_type")
    val spin_button_set_shadow_type: 'a GtkSpinButton -> gtk_shadow_type -> unit
        = fn OBJ spin_button => fn shadow_type => spin_button_set_shadow_type_ spin_button shadow_type

    val spin_button_set_snap_to_ticks_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_spin_button_set_snap_to_ticks")
    val spin_button_set_snap_to_ticks: 'a GtkSpinButton -> bool -> unit
        = fn OBJ spin_button => fn snap_to_ticks => spin_button_set_snap_to_ticks_ spin_button snap_to_ticks

    val spin_button_update_: gtkobj -> unit
        = app1(symb"mgtk_gtk_spin_button_update")
    val spin_button_update: 'a GtkSpinButton -> unit
        = fn OBJ spin_button => spin_button_update_ spin_button

    val spin_button_configure_: gtkobj -> gtkobj -> real -> word -> unit
        = app4(symb"mgtk_gtk_spin_button_configure")
    val spin_button_configure: 'a GtkSpinButton -> 'b GtkAdjustment -> real -> word -> unit
        = fn OBJ spin_button => fn OBJ adjustment => fn climb_rate => fn digits => spin_button_configure_ spin_button adjustment climb_rate digits

    (* *** Combo *** *)

    type 'a combo_t = base
    type 'a GtkCombo = 'a combo_t GtkHBox

    val combo_get_entry_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_combo_get_entry")
    val combo_get_entry: 'a GtkCombo -> base GtkEntry
        = fn OBJ wid => OBJ(combo_get_entry_ wid)

    val combo_get_list_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_combo_get_list")
    val combo_get_list: 'a GtkCombo -> base GtkList
        = fn OBJ wid => OBJ(combo_get_list_ wid)


    val combo_new_: unit -> gtkobj
        = app1(symb"mgtk_gtk_combo_new")
    val combo_new: unit -> base GtkCombo
        = fn dummy => OBJ(combo_new_ dummy)

    val combo_set_value_in_list_: gtkobj -> bool -> bool -> unit
        = app3(symb"mgtk_gtk_combo_set_value_in_list")
    val combo_set_value_in_list: 'a GtkCombo -> bool -> bool -> unit
        = fn OBJ combo => fn valu => fn ok_if_empty => combo_set_value_in_list_ combo valu ok_if_empty

    val combo_set_use_arrows_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_combo_set_use_arrows")
    val combo_set_use_arrows: 'a GtkCombo -> bool -> unit
        = fn OBJ combo => fn valu => combo_set_use_arrows_ combo valu

    val combo_set_use_arrows_always_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_combo_set_use_arrows_always")
    val combo_set_use_arrows_always: 'a GtkCombo -> bool -> unit
        = fn OBJ combo => fn valu => combo_set_use_arrows_always_ combo valu

    val combo_set_case_sensitive_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_combo_set_case_sensitive")
    val combo_set_case_sensitive: 'a GtkCombo -> bool -> unit
        = fn OBJ combo => fn valu => combo_set_case_sensitive_ combo valu

    val combo_set_item_string_: gtkobj -> gtkobj -> string -> unit
        = app3(symb"mgtk_gtk_combo_set_item_string")
    val combo_set_item_string: 'a GtkCombo -> 'b GtkItem -> string -> unit
        = fn OBJ combo => fn OBJ item => fn item_value => combo_set_item_string_ combo item item_value

    val combo_disable_activate_: gtkobj -> unit
        = app1(symb"mgtk_gtk_combo_disable_activate")
    val combo_disable_activate: 'a GtkCombo -> unit
        = fn OBJ combo => combo_disable_activate_ combo

    (* *** Text *** *)

    type 'a text_t = base
    type 'a GtkText = 'a text_t GtkEditable

    val text_get_hadj_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_text_get_hadj")
    val text_get_hadj: 'a GtkText -> base GtkAdjustment
        = fn OBJ wid => OBJ(text_get_hadj_ wid)

    val text_get_vadj_: gtkobj -> gtkobj
        = app1(symb"mgtk_gtk_text_get_vadj")
    val text_get_vadj: 'a GtkText -> base GtkAdjustment
        = fn OBJ wid => OBJ(text_get_vadj_ wid)


    val text_new_: gtkobj option -> gtkobj option -> gtkobj
        = app2(symb"mgtk_gtk_text_new")
    val text_new: 'a GtkAdjustment option -> 'b GtkAdjustment option -> base GtkText
        = fn hadj => fn vadj => OBJ(text_new_ (unwrapObjOpt hadj) (unwrapObjOpt vadj))

    val text_new'_: unit -> gtkobj
        = app1(symb"mgtk_gtk_text_new_short")
    val text_new': unit -> base GtkText
        = fn dummy => OBJ(text_new'_ dummy)

    val text_set_editable_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_text_set_editable")
    val text_set_editable: 'a GtkText -> bool -> unit
        = fn OBJ text => fn editable => text_set_editable_ text editable

    val text_set_word_wrap_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_text_set_word_wrap")
    val text_set_word_wrap: 'a GtkText -> bool -> unit
        = fn OBJ text => fn word_wrap => text_set_word_wrap_ text word_wrap

    val text_set_line_wrap_: gtkobj -> bool -> unit
        = app2(symb"mgtk_gtk_text_set_line_wrap")
    val text_set_line_wrap: 'a GtkText -> bool -> unit
        = fn OBJ text => fn line_wrap => text_set_line_wrap_ text line_wrap

    val text_set_adjustments_: gtkobj -> gtkobj option -> gtkobj option -> unit
        = app3(symb"mgtk_gtk_text_set_adjustments")
    val text_set_adjustments: 'a GtkText -> 'b GtkAdjustment option -> 'c GtkAdjustment option -> unit
        = fn OBJ text => fn hadj => fn vadj => text_set_adjustments_ text (unwrapObjOpt hadj) (unwrapObjOpt vadj)

    val text_set_adjustments'_: gtkobj -> unit
        = app1(symb"mgtk_gtk_text_set_adjustments_short")
    val text_set_adjustments': 'a GtkText -> unit
        = fn OBJ text => text_set_adjustments'_ text

    val text_set_point_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_text_set_point")
    val text_set_point: 'a GtkText -> word -> unit
        = fn OBJ text => fn index => text_set_point_ text index

    val text_get_point_: gtkobj -> word
        = app1(symb"mgtk_gtk_text_get_point")
    val text_get_point: 'a GtkText -> word
        = fn OBJ text => text_get_point_ text

    val text_get_length_: gtkobj -> word
        = app1(symb"mgtk_gtk_text_get_length")
    val text_get_length: 'a GtkText -> word
        = fn OBJ text => text_get_length_ text

    val text_freeze_: gtkobj -> unit
        = app1(symb"mgtk_gtk_text_freeze")
    val text_freeze: 'a GtkText -> unit
        = fn OBJ text => text_freeze_ text

    val text_thaw_: gtkobj -> unit
        = app1(symb"mgtk_gtk_text_thaw")
    val text_thaw: 'a GtkText -> unit
        = fn OBJ text => text_thaw_ text

    val text_insert_: gtkobj * gdk_font option * gdk_color option * gdk_color option * string * int -> unit
        = app1(symb"mgtk_gtk_text_insert")
    val text_insert: 'a GtkText -> gdk_font option -> gdk_color option -> gdk_color option -> string -> int -> unit
        = fn OBJ text => fn font => fn fore => fn back => fn chars => fn length => text_insert_ (text, font, fore, back, chars, length)

    val text_insert'_: gtkobj -> string -> int -> unit
        = app3(symb"mgtk_gtk_text_insert_short")
    val text_insert': 'a GtkText -> string -> int -> unit
        = fn OBJ text => fn chars => fn length => text_insert'_ text chars length

    val text_backward_delete_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_text_backward_delete")
    val text_backward_delete: 'a GtkText -> word -> unit
        = fn OBJ text => fn nchars => text_backward_delete_ text nchars

    val text_forward_delete_: gtkobj -> word -> unit
        = app2(symb"mgtk_gtk_text_forward_delete")
    val text_forward_delete: 'a GtkText -> word -> unit
        = fn OBJ text => fn nchars => text_forward_delete_ text nchars

    val connect_value_changed: 'a GtkAdjustment -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "value_changed" cb
    val connect_pressed: 'a GtkButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "pressed" cb
    val connect_released: 'a GtkButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "released" cb
    val connect_clicked: 'a GtkButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "clicked" cb
    val connect_enter: 'a GtkButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "enter" cb
    val connect_leave: 'a GtkButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "leave" cb
    val connect_month_changed: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "month_changed" cb
    val connect_day_selected: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "day_selected" cb
    val connect_day_selected_double_click: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "day_selected_double_click" cb
    val connect_prev_month: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "prev_month" cb
    val connect_next_month: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "next_month" cb
    val connect_prev_year: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "prev_year" cb
    val connect_next_year: 'a GtkCalendar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "next_year" cb
    val connect_select_row: 'a GtkCList -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "select_row" cb
    val connect_unselect_row: 'a GtkCList -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unselect_row" cb
    val connect_row_move: 'a GtkCList -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "row_move" cb
    val connect_click_column: 'a GtkCList -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "click_column" cb
    val connect_resize_column: 'a GtkCList -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "resize_column" cb
    val connect_add: 'a GtkContainer -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "add" cb
    val connect_remove: 'a GtkContainer -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "remove" cb
    val connect_check_resize: 'a GtkContainer -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "check_resize" cb
    val connect_focus: 'a GtkContainer -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "focus" cb
    val connect_set_focus_child: 'a GtkContainer -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "set-focus-child" cb
    val connect_disconnect: 'a GtkData -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "disconnect" cb
    val connect_changed: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "changed" cb
    val connect_insert_text: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "insert_text" cb
    val connect_delete_text: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "delete_text" cb
    val connect_activate: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "activate" cb
    val connect_set_editable: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "set-editable" cb
    val connect_move_cursor: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "move_cursor" cb
    val connect_move_word: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "move_word" cb
    val connect_move_page: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "move_page" cb
    val connect_move_to_row: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "move_to_row" cb
    val connect_move_to_column: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "move_to_column" cb
    val connect_kill_char: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "kill_char" cb
    val connect_kill_word: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "kill_word" cb
    val connect_kill_line: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "kill_line" cb
    val connect_cut_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "cut_clipboard" cb
    val connect_copy_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "copy_clipboard" cb
    val connect_paste_clipboard: 'a GtkEditable -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "paste_clipboard" cb
    val connect_child_attached: 'a GtkHandleBox -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "child_attached" cb
    val connect_child_detached: 'a GtkHandleBox -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "child_detached" cb
    val connect_enable_device: 'a GtkInputDialog -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "enable_device" cb
    val connect_disable_device: 'a GtkInputDialog -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "disable_device" cb
    val connect_select: 'a GtkItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "select" cb
    val connect_deselect: 'a GtkItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "deselect" cb
    val connect_toggle: 'a GtkItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "toggle" cb
    val connect_toggle_focus_row: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "toggle_focus_row" cb
    val connect_select_all: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "select_all" cb
    val connect_unselect_all: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unselect_all" cb
    val connect_undo_selection: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "undo_selection" cb
    val connect_start_selection: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "start_selection" cb
    val connect_end_selection: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "end_selection" cb
    val connect_toggle_add_mode: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "toggle_add_mode" cb
    val connect_extend_selection: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "extend_selection" cb
    val connect_scroll_vertical: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "scroll_vertical" cb
    val connect_scroll_horizontal: 'a GtkListItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "scroll_horizontal" cb
    val connect_switch_page: 'a GtkNotebook -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "switch_page" cb
    val connect_destroy: 'a GtkObject -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "destroy" cb
    val connect_text_pushed: 'a GtkStatusbar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "text_pushed" cb
    val connect_text_popped: 'a GtkStatusbar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "text_popped" cb
    val connect_set_scroll_adjustments: 'a GtkText -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "set_scroll_adjustments" cb
    val connect_start_query: 'a GtkTipsQuery -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "start_query" cb
    val connect_stop_query: 'a GtkTipsQuery -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "stop_query" cb
    val connect_widget_entered: 'a GtkTipsQuery -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "widget_entered" cb
    val connect_widget_selected: 'a GtkTipsQuery -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "widget_selected" cb
    val connect_toggled: 'a GtkToggleButton -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "toggled" cb
    val connect_orientation_changed: 'a GtkToolbar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "orientation_changed" cb
    val connect_style_changed: 'a GtkToolbar -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "style_changed" cb
    val connect_selection_changed: 'a GtkTree -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_changed" cb
    val connect_select_child: 'a GtkTree -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "select_child" cb
    val connect_unselect_child: 'a GtkTree -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unselect_child" cb
    val connect_expand: 'a GtkTreeItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "expand" cb
    val connect_collapse: 'a GtkTreeItem -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "collapse" cb
    val connect_show: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "show" cb
    val connect_hide: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "hide" cb
    val connect_map: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "map" cb
    val connect_unmap: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unmap" cb
    val connect_realize: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "realize" cb
    val connect_unrealize: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unrealize" cb
    val connect_draw: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "draw" cb
    val connect_draw_focus: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "draw_focus" cb
    val connect_draw_default: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "draw_default" cb
    val connect_size_request: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "size_request" cb
    val connect_size_allocate: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "size_allocate" cb
    val connect_state_changed: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "state_changed" cb
    val connect_parent_set: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "parent_set" cb
    val connect_style_set: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "style_set" cb
    val connect_grab_focus: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "grab_focus" cb
    val connect_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "event" cb
    val connect_button_press_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "button_press_event" cb
    val connect_button_release_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "button_release_event" cb
    val connect_motion_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "motion_notify_event" cb
    val connect_delete_event: 'a GtkWidget -> (unit -> bool) -> unit
        = fn wid => fn cb => (fn wid => fn sign => fn cb => ignore(signalConnect wid (signal sign false (unit --> return_bool) cb))) wid "delete_event" cb
    val connect_destroy_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "destroy_event" cb
    val connect_expose_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "expose_event" cb
    val connect_key_press_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "key_press_event" cb
    val connect_key_release_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "key_release_event" cb
    val connect_enter_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "enter_notify_event" cb
    val connect_leave_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "leave_notify_event" cb
    val connect_configure_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "configure_event" cb
    val connect_focus_in_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "focus_in_event" cb
    val connect_focus_out_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "focus_out_event" cb
    val connect_map_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "map_event" cb
    val connect_unmap_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "unmap_event" cb
    val connect_property_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "property_notify_event" cb
    val connect_selection_clear_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_clear_event" cb
    val connect_selection_request_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_request_event" cb
    val connect_selection_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_notify_event" cb
    val connect_selection_received: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_received" cb
    val connect_selection_get: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "selection_get" cb
    val connect_proximity_in_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "proximity_in_event" cb
    val connect_proximity_out_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "proximity_out_event" cb
    val connect_drag_leave: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_leave" cb
    val connect_drag_begin: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_begin" cb
    val connect_drag_end: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_end" cb
    val connect_drag_data_delete: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_data_delete" cb
    val connect_drag_motion: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_motion" cb
    val connect_drag_drop: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_drop" cb
    val connect_drag_data_get: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_data_get" cb
    val connect_drag_data_received: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "drag_data_received" cb
    val connect_visibility_notify_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "visibility_notify_event" cb
    val connect_client_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "client_event" cb
    val connect_no_expose_event: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "no_expose_event" cb
    val connect_debug_msg: 'a GtkWidget -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "debug_msg" cb
    val connect_set_focus: 'a GtkWindow -> (unit -> unit) -> unit
        = fn wid => fn cb => unit_connect wid "set_focus" cb
end

------------------------------------------------------------
/* mgtk --- an SML binding for GTK.                                          */
/* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         */
/*                                                                           */
/* This file is generated automatically. Search for AUTOMATICALLY to find    */
/* the beginning of the autogenerated code.                                  */
/*                                                                           */
/* Command used to generate the file:                                        */
/*   ../mgtkgen -c --no-header -o gtk-split-words.c gtk-split-words.defs     */




/*                                                                           */
/* Start of AUTOMATICALLY generated code.                                    */
/*                                                                           */


#define GdkFont_val(x) ((void*) Field(x, 1))

static void ml_finalize_gdk_font (value val) {
  gdk_font_unref (GdkFont_val(val)); 
}

value Val_GdkFont (void* obj) {
  value res;
  gdk_font_ref(obj);
  res = alloc_final (2, ml_finalize_gdk_font, 0, 1);
  GdkFont_val(res) = (value) obj ;
  return res;
}

/* ML type: unit -> int * int * int */
value mgtk_get_gdk_im_style (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_IM_PREEDIT_AREA);
  Field(res,1) = Val_int(GDK_IM_PREEDIT_CALLBACKS);
  Field(res,2) = Val_int(GDK_IM_PREEDIT_POSITION);
  return res;
}

/* ML type: unit -> int * int * int */
value mgtk_get_gdk_ic_attributes_type (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_IC_STYLE);
  Field(res,1) = Val_int(GDK_IC_CLIENT_WINDOW);
  Field(res,2) = Val_int(GDK_IC_FOCUS_WINDOW);
  return res;
}

/* ML type: unit -> int * int * int */
value mgtk_get_gdk_im (value dummy) { /* ML */
  value res = alloc_tuple(3);
  Field(res,0) = Val_int(GDK_PREEDIT_AREA);
  Field(res,1) = Val_int(GDK_PREEDIT_CALLBACKS);
  Field(res,2) = Val_int(GDK_PREEDIT_POSITION);
  return res;
}

/* ML type: unit -> int * int * int * int */
value mgtk_get_clist_drag_pos (value dummy) { /* ML */
  value res = alloc_tuple(4);
  Field(res,0) = Val_int(GTK_CLIST_DRAG_NONE);
  Field(res,1) = Val_int(GTK_CLIST_DRAG_BEFORE);
  Field(res,2) = Val_int(GTK_CLIST_DRAG_INTO);
  Field(res,3) = Val_int(GTK_CLIST_DRAG_AFTER);
  return res;
}

------------------------------------------------------------
(* mgtk --- an SML binding for GTK.                                          *)
(* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         *)
(*                                                                           *)
(* This file is generated automatically. Search for AUTOMATICALLY to find    *)
(* the beginning of the autogenerated code.                                  *)
(*                                                                           *)
(* Command used to generate the file:                                        *)
(*   ../mgtkgen -sig --no-header -o gtk-split-words.sig gtk-split-words.defs *)




(*                                                                           *)
(* Start of AUTOMATICALLY generated code.                                    *)
(*                                                                           *)


    type gdk_font

    type gdk_im_style
    val GDK_IM_PREEDIT_AREA: gdk_im_style
    val GDK_IM_PREEDIT_CALLBACKS: gdk_im_style
    val GDK_IM_PREEDIT_POSITION: gdk_im_style

    type gdk_ic_attributes_type
    val GDK_IC_STYLE: gdk_ic_attributes_type
    val GDK_IC_CLIENT_WINDOW: gdk_ic_attributes_type
    val GDK_IC_FOCUS_WINDOW: gdk_ic_attributes_type

    type gdk_im
    val GDK_PREEDIT_AREA: gdk_im
    val GDK_PREEDIT_CALLBACKS: gdk_im
    val GDK_PREEDIT_POSITION: gdk_im

    type clist_drag_pos
    val CLIST_DRAG_NONE: clist_drag_pos
    val CLIST_DRAG_BEFORE: clist_drag_pos
    val CLIST_DRAG_INTO: clist_drag_pos
    val CLIST_DRAG_AFTER: clist_drag_pos

end
------------------------------------------------------------
(* mgtk --- an SML binding for GTK.                                          *)
(* (c) Ken Friis Larsen and Henning Niss 1999, 2000.                         *)
(*                                                                           *)
(* This file is generated automatically. Search for AUTOMATICALLY to find    *)
(* the beginning of the autogenerated code.                                  *)
(*                                                                           *)
(* Command used to generate the file:                                        *)
(*   ../mgtkgen -sml --no-header -o gtk-split-words.sml gtk-split-words.defs *)




(*                                                                           *)
(* Start of AUTOMATICALLY generated code.                                    *)
(*                                                                           *)


    type gdk_font = gpointer

    type gdk_im_style = int
    val get_gdk_im_style_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_im_style")
    val (GDK_IM_PREEDIT_AREA,GDK_IM_PREEDIT_CALLBACKS,GDK_IM_PREEDIT_POSITION)
        = get_gdk_im_style_ ()

    type gdk_ic_attributes_type = int
    val get_gdk_ic_attributes_type_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_ic_attributes_type")
    val (GDK_IC_STYLE,GDK_IC_CLIENT_WINDOW,GDK_IC_FOCUS_WINDOW)
        = get_gdk_ic_attributes_type_ ()

    type gdk_im = int
    val get_gdk_im_: unit -> int * int * int
        = app1(symb"mgtk_get_gdk_im")
    val (GDK_PREEDIT_AREA,GDK_PREEDIT_CALLBACKS,GDK_PREEDIT_POSITION)
        = get_gdk_im_ ()

    type clist_drag_pos = int
    val get_clist_drag_pos_: unit -> int * int * int * int
        = app1(symb"mgtk_get_clist_drag_pos")
    val (CLIST_DRAG_NONE,CLIST_DRAG_BEFORE,CLIST_DRAG_INTO,CLIST_DRAG_AFTER)
        = get_clist_drag_pos_ ()

end

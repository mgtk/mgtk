structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit witness con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit witness con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
    end
    structure ItemFactory :>
      sig
	type base
	type 'a itemfactory_t
	type 'a t = 'a itemfactory_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toItemFactory : 'a t -> base t
	val get_item : 'a t -> string -> base Widget.t
	val get_widget : 'a t -> string -> base Widget.t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a itemfactory_t = unit
	type 'a t = 'a itemfactory_t Object.t
	fun inherit w con = Object.inherit witness con
	fun make ptr = inherit () (fn () => ptr)
	fun toItemFactory obj = inherit () (fn () => repr obj)
	val get_item_ : cptr -> string -> cptr
	    = app2 (symb"mgtk_gtk_item_factory_get_item")
	val get_item : 'a t -> string -> base Widget.t
	    = fn self => fn path =>
		 Widget.inherit () (fn () => get_item_ (repr self) path)
	val get_widget_ : cptr -> string -> cptr
	    = app2 (symb"mgtk_gtk_item_factory_get_widget")
	val get_widget : 'a t -> string -> base Widget.t
	    = fn self => fn path =>
		 Widget.inherit () (fn () => get_widget_ (repr self) path)
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** ItemFactory *** */
/* ML type: cptr -> string -> cptr */
EXTERNML value mgtk_gtk_item_factory_get_item(value self, value path) { /* ML */
    return Val_GtkObj(gtk_item_factory_get_item(GtkObj_val(self), String_val(path)));
}

/* ML type: cptr -> string -> cptr */
EXTERNML value mgtk_gtk_item_factory_get_widget(value self, value path) { /* ML */
    return Val_GtkObj(gtk_item_factory_get_widget(GtkObj_val(self), String_val(path)));
}


structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Demoted :>
      sig
	type icon_size
	val ICON_SIZE_INVALID : icon_size
	val ICON_SIZE_MENU : icon_size
	val ICON_SIZE_SMALL_TOOLBAR : icon_size
	val ICON_SIZE_LARGE_TOOLBAR : icon_size
	val ICON_SIZE_BUTTON : icon_size
	val ICON_SIZE_DND : icon_size
	val ICON_SIZE_DIALOG : icon_size
	val icon_size_lookup : icon_size -> bool * int * int
      end = struct
	type cptr = GObject.cptr
	type icon_size = int
	val get_icon_size_ : int ref * int ref * int ref * int ref * int ref 
			   * int ref * int ref
			     -> unit
	    = _import "mgtk_get_gtk_icon_size" : int ref * int ref * int ref 
					       * int ref * int ref * int ref 
					       * int ref
						 -> unit;
	val (ICON_SIZE_INVALID, ICON_SIZE_MENU, ICON_SIZE_SMALL_TOOLBAR, 
	     ICON_SIZE_LARGE_TOOLBAR, ICON_SIZE_BUTTON, ICON_SIZE_DND, 
	     ICON_SIZE_DIALOG)
	    = let val (x0, x1, x2, x3, x4, x5, x6)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0)
	      in get_icon_size_ (x0, x1, x2, x3, x4, x5, x6)
	       ; (!x0, !x1, !x2, !x3, !x4, !x5, !x6)
	      end
	val icon_size_lookup_ : int * int ref * int ref -> bool
	    = _import "gtk_icon_size_lookup" : int * int ref * int ref -> bool;
	val icon_size_lookup : icon_size -> bool * int * int
	    = fn size => let val (width, height) = (ref 0, ref 0)
			     val ret = icon_size_lookup_ (size, width, height)
			 in (ret, !width, !height) end
    end
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val translate_coordinates
	  : 'a t -> 'b t -> int -> int -> bool * int * int
	val path : 'a t -> int * string * string
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val translate_coordinates_
	  : cptr * cptr * int * int * int ref * int ref -> bool
	    = _import "gtk_widget_translate_coordinates"
		      : cptr * cptr * int * int * int ref * int ref -> bool;
	val translate_coordinates
	  : 'a t -> 'b t -> int -> int -> bool * int * int
	    = fn self => fn dest_widget => fn src_x => fn src_y =>
		 let val (dest_x, dest_y) = (ref 0, ref 0)
		     val ret
			 = GObject.withPtr
			     (self, 
			      fn self => GObject.withPtr
					   (dest_widget, 
					    fn dest_widget =>
					       translate_coordinates_
						 (self, dest_widget, src_x, 
						  src_y, dest_x, dest_y)))
		 in (ret, !dest_x, !dest_y) end
	val path_ : cptr * int ref * CString.t ref * CString.t ref -> unit
	    = _import "gtk_widget_path"
		      : cptr * int ref * CString.t ref * CString.t ref -> unit;
	val path : 'a t -> int * string * string
	    = fn self =>
		 let val (path_length, path, path_reversed)
			 = (ref 0, ref CString.null, ref CString.null)
		     val ret = GObject.withPtr
				 (self, 
				  fn self => path_ (self, path_length, path, 
						    path_reversed))
		 in (!path_length, CString.toString (!path), 
		     CString.toString (!path_reversed))
		 end
    end
    structure Editable :>
      sig
	type base
	type 'a editable_t
	type 'a t = 'a editable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEditable : 'a t -> base t
	val insert_text : 'a t -> string -> int -> int option -> int
	val insert_text' : 'a t -> string -> int -> int
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a editable_t = unit
	type 'a t = 'a editable_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toEditable obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val insert_text_ : cptr * CString.cstring * int * int ref -> unit
	    = _import "gtk_editable_insert_text"
		      : cptr * CString.cstring * int * int ref -> unit;
	val insert_text : 'a t -> string -> int -> int option -> int
	    = fn self => fn new_text => fn new_text_length => fn position =>
		 let val position = ref position
		     val ret = GObject.withPtr
				 (self, 
				  fn self =>
				     insert_text_
				       (self, CString.fromString new_text, 
					new_text_length, position))
		 in !position end
	val insert_text' : 'a t -> string -> int -> int
	    = fn self => fn new_text => fn new_text_length =>
		 let val position = ref 0
		     val ret = GObject.withPtr
				 (self, 
				  fn self =>
				     insert_text_
				       (self, CString.fromString new_text, 
					new_text_length, position))
		 in !position end
    end
    structure CellEditable :>
      sig
	type base
	type 'a celleditable_t
	type 'a t = 'a celleditable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellEditable : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a celleditable_t = unit
	type 'a t = 'a celleditable_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCellEditable obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure TextIter :>
      sig
	type t
	val alloc_GtkTextIter : unit -> t
      end = struct
	type cptr = GObject.cptr
	type t = GObject.cptr
	val alloc_GtkTextIter = _import "alloc_GtkTextIter" : unit -> t;
    end
    structure TextBuffer :>
      sig
	type base
	type 'a textbuffer_t
	type 'a t = 'a textbuffer_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTextBuffer : 'a t -> base t
	val getiter_at_line_offset : 'a t -> int -> int -> TextIter.t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a textbuffer_t = unit
	type 'a t = 'a textbuffer_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTextBuffer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val getiter_at_line_offset_ : cptr * cptr * int * int -> unit
	    = _import "gtk_text_buffer_get_iter_at_line_offset"
		      : cptr * cptr * int * int -> unit;
	val getiter_at_line_offset : 'a t -> int -> int -> TextIter.t
	    = fn self => fn line_number => fn char_offset =>
		 let val iter = alloc_GtkTextIter ()
		     val ret = GObject.withPtr
				 (self, 
				  fn self => getiter_at_line_offset_
					       (self, iter, line_number, 
						char_offset))
		 in iter end
    end
    structure TreePath :>
      sig
	type t
	val alloc_GtkTreePath : unit -> t
      end = struct
	type cptr = GObject.cptr
	type t = GObject.cptr
	val alloc_GtkTreePath = _import "alloc_GtkTreePath" : unit -> t;
    end
    structure TreeIter :>
      sig
	type t
	val alloc_GtkTreeIter : unit -> t
      end = struct
	type cptr = GObject.cptr
	type t = GObject.cptr
	val alloc_GtkTreeIter = _import "alloc_GtkTreeIter" : unit -> t;
    end
    structure TreeModel :>
      sig
	type base
	type 'a treemodel_t
	type 'a t = 'a treemodel_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeModel : 'a t -> base t
	val iter_next : 'a t -> TreeIter.t -> bool * TreeIter.t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treemodel_t = unit
	type 'a t = 'a treemodel_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeModel obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val iter_next_ : cptr * cptr -> bool
	    = _import "gtk_tree_model_iter_next" : cptr * cptr -> bool;
	val iter_next : 'a t -> TreeIter.t -> bool * TreeIter.t
	    = fn self => fn iter =>
		 let val iter = iter
		     val ret = GObject.withPtr
				 (self, fn self => iter_next_ (self, iter))
		 in (ret, iter) end
    end
    structure TreeSelection :>
      sig
	type base
	type 'a treeselection_t
	type 'a t = 'a treeselection_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeSelection : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treeselection_t = unit
	type 'a t = 'a treeselection_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeSelection obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Container :>
      sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure TreeViewColumn :>
      sig
	type base
	type 'a treeviewcolumn_t
	type 'a t = 'a treeviewcolumn_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeViewColumn : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treeviewcolumn_t = unit
	type 'a t = 'a treeviewcolumn_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeViewColumn obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure TreeView :>
      sig
	type base
	type 'a treeview_t
	type 'a t = 'a treeview_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeView : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treeview_t = unit
	type 'a t = 'a treeview_t Container.t
	fun inherit w con = Container.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeView obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure TreeStore :>
      sig
	type base
	type 'a treestore_t
	type 'a t = 'a treestore_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeStore : 'a t -> base t
	val asTreeModel : 'a t -> base TreeModel.t
	val append : 'a t -> TreeIter.t option -> TreeIter.t
	val append' : 'a t -> TreeIter.t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treestore_t = unit
	type 'a t = 'a treestore_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeStore obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	fun asTreeModel obj
	  = TreeModel.inherit
	      () (fn () => GObject.withPtr (obj, fn obj => obj))
	val append_ : cptr * cptr * cptr -> unit
	    = _import "gtk_tree_store_append" : cptr * cptr * cptr -> unit;
	val append : 'a t -> TreeIter.t option -> TreeIter.t
	    = fn self => fn parent =>
		 let val iter = alloc_GtkTreeIter ()
		     val ret = GObject.withPtr
				 (self, 
				  fn self =>
				     append_ (self, iter, 
					      getOpt (parent, GObject.null)))
		 in iter end
	val append' : 'a t -> TreeIter.t
	    = fn self => let val iter = alloc_GtkTreeIter ()
			     val ret = GObject.withPtr
					 (self, 
					  fn self => append_ (self, iter, 
							      GObject.null))
			 in iter end
    end
end


/* *** Gtk *** */


/* *** Demoted *** */
/* ML type: int ref * int ref * int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_icon_size(int* x0, int* x1, int* x2, int* x3, int* x4, int* x5, int* x6) {
    *x6 = GTK_ICON_SIZE_DIALOG;
    *x5 = GTK_ICON_SIZE_DND;
    *x4 = GTK_ICON_SIZE_BUTTON;
    *x3 = GTK_ICON_SIZE_LARGE_TOOLBAR;
    *x2 = GTK_ICON_SIZE_SMALL_TOOLBAR;
    *x1 = GTK_ICON_SIZE_MENU;
    *x0 = GTK_ICON_SIZE_INVALID;
}



/* *** Object *** */


/* *** Widget *** */


/* *** Editable *** */


/* *** CellEditable *** */


/* *** TextIter *** */
EXTERNML GtkTextIter* alloc_GtkTextIter() {
    GtkTextIter res;
    return gtk_text_iter_copy(&res);
}



/* *** TextBuffer *** */


/* *** TreePath *** */


/* *** TreeIter *** */
EXTERNML GtkTreeIter* alloc_GtkTreeIter() {
    GtkTreeIter res;
    return gtk_tree_iter_copy(&res);
}



/* *** TreeModel *** */


/* *** TreeSelection *** */


/* *** Container *** */


/* *** TreeViewColumn *** */


/* *** TreeView *** */


/* *** TreeStore *** */

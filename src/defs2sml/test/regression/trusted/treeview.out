structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
    end
    structure Container :>
      sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj = inherit () (fn () => repr obj)
    end
    structure TreeModel :>
      sig
	type base
	type 'a treemodel_t
	type 'a t = 'a treemodel_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeModel : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treemodel_t = unit
	type 'a t = 'a treemodel_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeModel obj = inherit () (fn () => repr obj)
    end
    structure TreeView :>
      sig
	type base
	type 'a treeview_t
	type 'a t = 'a treeview_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeView : 'a t -> base t
	val get_model : 'a t -> base TreeModel.t
	val set_model : 'a t -> 'b TreeModel.t option -> unit
	val set_model' : 'a t -> unit
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treeview_t = unit
	type 'a t = 'a treeview_t Container.t
	fun inherit w con = Container.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeView obj = inherit () (fn () => repr obj)
	val get_model_ : cptr -> cptr
	    = app1 (symb"mgtk_gtk_tree_view_get_model")
	val get_model : 'a t -> base TreeModel.t
	    = fn self => TreeModel.inherit () (fn () => get_model_ (repr self))
	val set_model_ : cptr -> cptr -> unit
	    = app2 (symb"mgtk_gtk_tree_view_set_model")
	val set_model : 'a t -> 'b TreeModel.t option -> unit
	    = fn self => fn model =>
		 set_model_ (repr self)
			    (getOpt (Option.map repr model, GObject.null))
	val set_model' : 'a t -> unit
	    = fn self => set_model_ (repr self) GObject.null
    end
    structure TreePath :>
      sig
	type base
	type 'a treepath_t
	type 'a t = 'a treepath_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreePath : 'a t -> base t
	val compare : 'a t -> 'b t -> int
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treepath_t = unit
	type 'a t = 'a treepath_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreePath obj = inherit () (fn () => repr obj)
	val compare_ : cptr -> cptr -> int
	    = app2 (symb"mgtk_gtk_tree_path_compare")
	val compare : 'a t -> 'b t -> int
	    = fn self => fn b => compare_ (repr self) (repr b)
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** TreeModel *** */


/* *** TreeView *** */
/* ML type: cptr -> cptr */
EXTERNML value mgtk_gtk_tree_view_get_model(value self) { /* ML */
    return Val_GtkObj(gtk_tree_view_get_model(GtkObj_val(self)));
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_tree_view_set_model(value self, value model) { /* ML */
    gtk_tree_view_set_model(GtkObj_val(self), GtkObj_val(model));
    return Val_unit;
}



/* *** TreePath *** */
/* ML type: cptr -> cptr -> int */
EXTERNML value mgtk_gtk_tree_path_compare(value self, value b) { /* ML */
    return Val_int(gtk_tree_path_compare(GtkObj_val(self), GtkObj_val(b)));
}


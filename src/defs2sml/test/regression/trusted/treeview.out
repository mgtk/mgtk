structure Gtk = struct
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
 
    signature Object = sig
        type base
        type 'a object_t
        type 'a t = 'a object_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Object :> Object = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a object_t = unit
        type 'a t = 'a object_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature Widget = sig
        type base
        type 'a widget_t
        type 'a t = 'a widget_t Object.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Widget :> Widget = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a widget_t = unit
        type 'a t = 'a widget_t Object.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Object.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature Container = sig
        type base
        type 'a container_t
        type 'a t = 'a container_t Widget.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Container :> Container = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a container_t = unit
        type 'a t = 'a container_t Widget.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Widget.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature TreeModel = sig
        type base
        type 'a treemodel_t
        type 'a t = 'a treemodel_t Widget.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure TreeModel :> TreeModel = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a treemodel_t = unit
        type 'a t = 'a treemodel_t Widget.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Widget.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature TreeView = sig
        type base
        type 'a treeview_t
        type 'a t = 'a treeview_t Container.t
        val inherit : 'a -> GObject.constructor -> 'a t
        val get_model : 'a t -> base TreeModel.t
        val set_model : 'a t -> 'b TreeModel.t option -> unit
        val set_model' : 'a t -> unit
    end
    structure TreeView :> TreeView = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a treeview_t = unit
        type 'a t = 'a treeview_t Container.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Container.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
        val get_model_ : cptr -> cptr
            = app1 (symb"mgtk_gtk_treeview_get_model")
        val get_model : 'a t -> base TreeModel.t
            = fn self => TreeModel.inherit () (fn () => get_model_ (repr self))
        val set_model_ : cptr -> cptr -> unit
            = app2 (symb"mgtk_gtk_treeview_set_model")
        val set_model : 'a t -> 'b TreeModel.t option -> unit
            = fn self => fn model => set_model_ (repr self) (getOpt (Option.map repr model,GObject.null))
        val set_model' : 'a t -> unit
            = fn self => set_model_ (repr self) GObject.null
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** TreeModel *** */


/* *** TreeView *** */
/* ML type: cptr -> cptr */
EXTERNML value mgtk_gtk_treeview_get_model(value self) { /* ML */
    return Val_GtkObj(gtk_tree_view_get_model(GtkObj_val(self)));
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_treeview_set_model(value self, value model) { /* ML */
    gtk_tree_view_set_model(GtkObj_val(self), GtkObj_val(model));
    return Val_unit;
}


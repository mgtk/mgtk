structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure CellRenderer :>
      sig
	type base
	type 'a cellrenderer_t
	type 'a t = 'a cellrenderer_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellRenderer : 'a t -> base t
	val get_type : unit -> GType.t
	val set_fixed_size : 'a t -> int -> int -> unit
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a cellrenderer_t = unit
	type 'a t = 'a cellrenderer_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCellRenderer obj = inherit () (fn () => repr obj)
	val get_type_ : unit -> GType.t
	    = app1 (symb"mgtk_gtk_cell_renderer_get_type")
	val get_type : unit -> GType.t = fn dummy => get_type_ dummy
	val set_fixed_size_ : cptr -> int -> int -> unit
	    = app3 (symb"mgtk_gtk_cell_renderer_set_fixed_size")
	val set_fixed_size : 'a t -> int -> int -> unit
	    = fn self => fn width => fn height =>
		 set_fixed_size_ (repr self) width height
    end
    structure CellRendererText :>
      sig
	type base
	type 'a cellrenderertext_t
	type 'a t = 'a cellrenderertext_t CellRenderer.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellRendererText : 'a t -> base t
	val new : unit -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a cellrenderertext_t = unit
	type 'a t = 'a cellrenderertext_t CellRenderer.t
	fun inherit w con = CellRenderer.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCellRendererText obj = inherit () (fn () => repr obj)
	val new_ : unit -> cptr = app1 (symb"mgtk_gtk_cell_renderer_text_new")
	val new : unit -> base t = fn dummy => make (new_ dummy)
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** CellRenderer *** */
/* ML type: unit -> GType.t */
EXTERNML value mgtk_gtk_cell_renderer_get_type(value dummy) { /* ML */
    return Val_int(gtk_cell_renderer_get_type());
}

/* ML type: cptr -> int -> int -> unit */
EXTERNML value mgtk_gtk_cell_renderer_set_fixed_size(value self, value width, value height) { /* ML */
    gtk_cell_renderer_set_fixed_size(GtkObj_val(self), Int_val(width), Int_val(height));
    return Val_unit;
}



/* *** CellRendererText *** */
/* ML type: unit -> cptr */
EXTERNML value mgtk_gtk_cell_renderer_text_new(value dummy) { /* ML */
    return Val_GtkObj(gtk_cell_renderer_text_new());
}


structure Gtk  = struct
    
    type cptr = GObject.cptr
    signature Object = sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
    end
    structure Object :> Object = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Widget = sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
    end
    structure Widget :> Widget = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Container = sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
    end
    structure Container :> Container = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Bin = sig
	type base
	type 'a bin_t
	type 'a t = 'a bin_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toBin : 'a t -> base t
    end
    structure Bin :> Bin = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a bin_t = unit
	type 'a t = 'a bin_t Container.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Container.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toBin obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Window = sig
	type base
	type 'a window_t
	type 'a t = 'a window_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWindow : 'a t -> base t
    end
    structure Window :> Window = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a window_t = unit
	type 'a t = 'a window_t Bin.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Bin.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWindow obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Dialog = sig
	type base
	type 'a dialog_t
	type 'a t = 'a dialog_t Window.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toDialog : 'a t -> base t
	type flags
	val MODAL : flags
	val DESTROY_WITH_PARENT : flags
	val NO_SEPARATOR : flags
	val new_with_buttons : string option -> 'a Window.t option 
			    -> flags list option -> string option
			       -> base t
	val new_with_buttons' : unit -> base t
    end
    structure Dialog :> Dialog = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a dialog_t = unit
	type 'a t = 'a dialog_t Window.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Window.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toDialog obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	type flags = int
	val get_flags_ : int ref * int ref * int ref -> unit
	    = _import "mgtk_get_gtk_dialog_flags"
		      : int ref * int ref * int ref -> unit;
	val (MODAL, DESTROY_WITH_PARENT, NO_SEPARATOR)
	    = let val (x0, x1, x2) = (ref 0, ref 0, ref 0)
	      in get_flags_ (x0, x1, x2); (! x0, ! x1, ! x2)  end
	val new_with_buttons_
	  : CString.cstring * cptr * int * CString.cstring -> cptr
	    = _import "gtk_dialog_new_with_buttons"
		      : CString.cstring * cptr * int * CString.cstring -> cptr;
	val new_with_buttons : string option -> 'a Window.t option 
			    -> flags list option -> string option
			       -> base t
	    = fn title => fn parent => fn flags => fn first_button_text =>
		 make (GObject.withOpt
			 (parent, 
			  fn parent =>
			     new_with_buttons_
			       (CString.fromString (getOpt (title, "")), 
				parent, 
				getOpt (Option.map Flags.set flags, 0), 
				CString.fromString
				  (getOpt (first_button_text, "")))))
	val new_with_buttons' : unit -> base t
	    = fn dummy => make (new_with_buttons_ (CString.fromString "", 
						   GObject.null, 0, 
						   CString.fromString ""))
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** Bin *** */


/* *** Window *** */


/* *** Dialog *** */
/* ML type: unit */
EXTERNML void mgtk_get_gtk_dialog_flags(int* x0, int* x1, int* x2) {
    *x2 = GTK_DIALOG_NO_SEPARATOR;
    *x1 = GTK_DIALOG_DESTROY_WITH_PARENT;
    *x0 = GTK_DIALOG_MODAL;
}


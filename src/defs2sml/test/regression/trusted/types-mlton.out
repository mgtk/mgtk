structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Settings :>
      sig
	type base
	type 'a settings_t
	type 'a t = 'a settings_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toSettings : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a settings_t = unit
	type 'a t = 'a settings_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toSettings obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Style :>
      sig
	type base
	type 'a style_t
	type 'a t = 'a style_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toStyle : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a style_t = unit
	type 'a t = 'a style_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toStyle obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Demoted :>
      sig
	type icon_size
	val ICON_SIZE_INVALID : icon_size
	val ICON_SIZE_MENU : icon_size
	val ICON_SIZE_SMALL_TOOLBAR : icon_size
	val ICON_SIZE_LARGE_TOOLBAR : icon_size
	val ICON_SIZE_BUTTON : icon_size
	val ICON_SIZE_DND : icon_size
	val ICON_SIZE_DIALOG : icon_size
	val icon_size_register : string -> int -> int -> icon_size
	val rc_get_style_by_paths
	  : 'a Settings.t -> string -> string -> GType.t -> base Style.t
	val accel_groups_activate : 'a GObject.t -> int -> int -> bool
      end = struct
	type cptr = GObject.cptr
	type icon_size = int
	val get_icon_size_ : int ref * int ref * int ref * int ref * int ref 
			   * int ref * int ref
			     -> unit
	    = _import "mgtk_get_gtk_icon_size" : int ref * int ref * int ref 
					       * int ref * int ref * int ref 
					       * int ref
						 -> unit;
	val (ICON_SIZE_INVALID, ICON_SIZE_MENU, ICON_SIZE_SMALL_TOOLBAR, 
	     ICON_SIZE_LARGE_TOOLBAR, ICON_SIZE_BUTTON, ICON_SIZE_DND, 
	     ICON_SIZE_DIALOG)
	    = let val (x0, x1, x2, x3, x4, x5, x6)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0)
	      in get_icon_size_ (x0, x1, x2, x3, x4, x5, x6)
	       ; (!x0, !x1, !x2, !x3, !x4, !x5, !x6)
	      end
	val icon_size_register_ : CString.cstring * int * int -> int
	    = _import "gtk_icon_size_register"
		      : CString.cstring * int * int -> int;
	val icon_size_register : string -> int -> int -> icon_size
	    = fn name => fn width => fn height =>
		 icon_size_register_ (CString.fromString name, width, height)
	val rc_get_style_by_paths_
	  : cptr * CString.cstring * CString.cstring * GType.t -> cptr
	    = _import "gtk_rc_get_style_by_paths"
		      : cptr * CString.cstring * CString.cstring * GType.t
			-> cptr;
	val rc_get_style_by_paths
	  : 'a Settings.t -> string -> string -> GType.t -> base Style.t
	    = fn settings => fn widget_path => fn class_path => fn typ =>
		 Style.inherit
		   ()
		   (fn () =>
		       GObject.withPtr
			 (settings, 
			  fn settings =>
			     rc_get_style_by_paths_
			       (settings, CString.fromString widget_path, 
				CString.fromString class_path, typ)))
	val accel_groups_activate_ : cptr * int * int -> bool
	    = _import "gtk_accel_groups_activate" : cptr * int * int -> bool;
	val accel_groups_activate : 'a GObject.t -> int -> int -> bool
	    = fn object => fn accel_key => fn accel_mods =>
		 GObject.withPtr
		   (object, 
		    fn object => accel_groups_activate_
				   (object, accel_key, accel_mods))
    end
    structure IconSet :>
      sig
	type t
	val alloc_GtkIconSet : unit -> t
      end = struct
	type cptr = GObject.cptr
	type t = GObject.cptr
	val alloc_GtkIconSet = _import "alloc_GtkIconSet" : unit -> t;
    end
    structure RcStyle :>
      sig
	type base
	type 'a rcstyle_t
	type 'a t = 'a rcstyle_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toRcStyle : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a rcstyle_t = unit
	type 'a t = 'a rcstyle_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toRcStyle obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val modify_style : 'a t -> 'b Rc.Style.t -> unit
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val modify_style_ : cptr * cptr -> unit
	    = _import "gtk_widget_modify_style" : cptr * cptr -> unit;
	val modify_style : 'a t -> 'b Rc.Style.t -> unit
	    = fn self => fn style =>
		 GObject.withPtr
		   (self, 
		    fn self =>
		       GObject.withPtr
			 (style, fn style => modify_style_ (self, style)))
    end
    structure Calendar :>
      sig
	type base
	type 'a calendar_t
	type 'a t = 'a calendar_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCalendar : 'a t -> base t
	type display_options
	val SHOW_HEADING : display_options
	val SHOW_DAY_NAMES : display_options
	val NO_MONTH_CHANGE : display_options
	val SHOW_WEEK_NUMBERS : display_options
	val WEEK_START_MONDAY : display_options
	val display_options : 'a t -> display_options list -> unit
	val get_display_options : 'a t -> display_options list
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a calendar_t = unit
	type 'a t = 'a calendar_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCalendar obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	type display_options = int
	val get_display_options_
	  : int ref * int ref * int ref * int ref * int ref -> unit
	    = _import "mgtk_get_gtk_calendar_display_options"
		      : int ref * int ref * int ref * int ref * int ref
			-> unit;
	val (SHOW_HEADING, SHOW_DAY_NAMES, NO_MONTH_CHANGE, SHOW_WEEK_NUMBERS, 
	     WEEK_START_MONDAY)
	    = let val (x0, x1, x2, x3, x4)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0)
	      in get_display_options_ (x0, x1, x2, x3, x4)
	       ; (!x0, !x1, !x2, !x3, !x4)
	      end
	val display_options_ : cptr * int -> unit
	    = _import "gtk_calendar_display_options" : cptr * int -> unit;
	val display_options : 'a t -> display_options list -> unit
	    = fn self => fn flags =>
		 GObject.withPtr
		   (self, fn self => display_options_ (self, Flags.set flags))
	val get_display_options_ : cptr -> int
	    = _import "gtk_calendar_get_display_options" : cptr -> int;
	val get_display_options : 'a t -> display_options list
	    = fn self =>
		 Flags.get (GObject.withPtr
			      (self, fn self => get_display_options_ self))
    end
    structure Entry :>
      sig
	type base
	type 'a entry_t
	type 'a t = 'a entry_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEntry : 'a t -> base t
	val new_with_max_length : int option -> base t
	val new_with_max_length' : unit -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a entry_t = unit
	type 'a t = 'a entry_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toEntry obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val new_with_max_length_ : int -> cptr
	    = _import "gtk_entry_new_with_max_length" : int -> cptr;
	val new_with_max_length : int option -> base t
	    = fn max => make (new_with_max_length_ (getOpt (max, 0)))
	val new_with_max_length' : unit -> base t
	    = fn dummy => make (new_with_max_length_ 0)
    end
end


/* *** Gtk *** */


/* *** Settings *** */


/* *** Style *** */


/* *** Demoted *** */
/* ML type: int ref * int ref * int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_icon_size(int* x0, int* x1, int* x2, int* x3, int* x4, int* x5, int* x6) {
    *x6 = GTK_ICON_SIZE_DIALOG;
    *x5 = GTK_ICON_SIZE_DND;
    *x4 = GTK_ICON_SIZE_BUTTON;
    *x3 = GTK_ICON_SIZE_LARGE_TOOLBAR;
    *x2 = GTK_ICON_SIZE_SMALL_TOOLBAR;
    *x1 = GTK_ICON_SIZE_MENU;
    *x0 = GTK_ICON_SIZE_INVALID;
}



/* *** IconSet *** */


/* *** RcStyle *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Calendar *** */
/* ML type: int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_calendar_display_options(int* x0, int* x1, int* x2, int* x3, int* x4) {
    *x4 = GTK_CALENDAR_WEEK_START_MONDAY;
    *x3 = GTK_CALENDAR_SHOW_WEEK_NUMBERS;
    *x2 = GTK_CALENDAR_NO_MONTH_CHANGE;
    *x1 = GTK_CALENDAR_SHOW_DAY_NAMES;
    *x0 = GTK_CALENDAR_SHOW_HEADING;
}



/* *** Entry *** */

structure Gtk  = struct
    
    type cptr = GObject.cptr
    signature Object = sig type base
			   type 'a object_t
			   type 'a t = 'a object_t GObject.t
			   val inherit : 'a -> GObject.constructor -> 'a t
			   val toObject : 'a t -> base t
    end
    structure Object :> Object = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Widget = sig type base
			   type 'a widget_t
			   type 'a t = 'a widget_t Object.t
			   val inherit : 'a -> GObject.constructor -> 'a t
			   val toWidget : 'a t -> base t
    end
    structure Widget :> Widget = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature Container = sig type base
			      type 'a container_t
			      type 'a t = 'a container_t Widget.t
			      val inherit : 'a -> GObject.constructor -> 'a t
			      val toContainer : 'a t -> base t
    end
    structure Container :> Container = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature TreeModel = sig type base
			      type 'a treemodel_t
			      type 'a t = 'a treemodel_t Widget.t
			      val inherit : 'a -> GObject.constructor -> 'a t
			      val toTreeModel : 'a t -> base t
    end
    structure TreeModel :> TreeModel = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treemodel_t = unit
	type 'a t = 'a treemodel_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeModel obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    signature TreeView = sig
	type base
	type 'a treeview_t
	type 'a t = 'a treeview_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeView : 'a t -> base t
	val get_model : 'a t -> base TreeModel.t
	val set_model : 'a t -> 'b TreeModel.t option -> unit
	val set_model' : 'a t -> unit
    end
    structure TreeView :> TreeView = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a treeview_t = unit
	type 'a t = 'a treeview_t Container.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Container.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeView obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val get_model_ : cptr -> cptr
	    = _import "gtk_tree_view_get_model" : cptr -> cptr;
	val get_model : 'a t -> base TreeModel.t
	    = fn self => TreeModel.inherit
			   ()
			   (fn () => GObject.withPtr
				       (self, fn self => get_model_ self))
	val set_model_ : cptr * cptr -> unit
	    = _import "gtk_tree_view_set_model" : cptr * cptr -> unit;
	val set_model : 'a t -> 'b TreeModel.t option -> unit
	    = fn self => fn model =>
		 GObject.withPtr
		   (self, 
		    fn self => GObject.withOpt
				 (model, fn model => set_model_ (self, model)))
	val set_model' : 'a t -> unit
	    = fn self => GObject.withPtr
			   (self, fn self => set_model_ (self, GObject.null))
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** TreeModel *** */


/* *** TreeView *** */

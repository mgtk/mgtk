structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val destroy : 'a t -> unit
	val show : 'a t -> unit
	val show_now : 'a t -> unit
	val hide : 'a t -> unit
	val show_all : 'a t -> unit
	val hide_all : 'a t -> unit
	val delete_event_sig : (unit -> bool) -> 'a t Signal.signal
	val destroy_event_sig : (unit -> bool) -> 'a t Signal.signal
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val destroy_ : cptr -> unit
	    = _import "gtk_widget_destroy" : cptr -> unit;
	val destroy : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => destroy_ self)
	val show_ : cptr -> unit = _import "gtk_widget_show" : cptr -> unit;
	val show : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => show_ self)
	val show_now_ : cptr -> unit
	    = _import "gtk_widget_show_now" : cptr -> unit;
	val show_now : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => show_now_ self)
	val hide_ : cptr -> unit = _import "gtk_widget_hide" : cptr -> unit;
	val hide : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => hide_ self)
	val show_all_ : cptr -> unit
	    = _import "gtk_widget_show_all" : cptr -> unit;
	val show_all : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => show_all_ self)
	val hide_all_ : cptr -> unit
	    = _import "gtk_widget_hide_all" : cptr -> unit;
	val hide_all : 'a t -> unit
	    = fn self => GObject.withPtr (self, fn self => hide_all_ self)
	local open Signal
	      infixr -->
	in val delete_event_sig : (unit -> bool) -> 'a t Signal.signal
	       = fn f => signal "delete-event" false (unit --> return_bool) f
	   val destroy_event_sig : (unit -> bool) -> 'a t Signal.signal
	       = fn f => signal "destroy-event" false (unit --> return_bool) f
	end
    end
    structure Container :>
      sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
	val set_border_width : 'a t -> int -> unit
	val get_border_width : 'a t -> int
	val add : 'a t -> 'b Widget.t -> unit
	val remove : 'a t -> 'b Widget.t -> unit
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val set_border_width_ : cptr * int -> unit
	    = _import "gtk_container_set_border_width" : cptr * int -> unit;
	val set_border_width : 'a t -> int -> unit
	    = fn self => fn border_width =>
		 GObject.withPtr
		   (self, fn self => set_border_width_ (self, border_width))
	val get_border_width_ : cptr -> int
	    = _import "gtk_container_get_border_width" : cptr -> int;
	val get_border_width : 'a t -> int
	    = fn self => GObject.withPtr
			   (self, fn self => get_border_width_ self)
	val add_ : cptr * cptr -> unit
	    = _import "gtk_container_add" : cptr * cptr -> unit;
	val add : 'a t -> 'b Widget.t -> unit
	    = fn self => fn widget =>
		 GObject.withPtr
		   (self, 
		    fn self => GObject.withPtr
				 (widget, fn widget => add_ (self, widget)))
	val remove_ : cptr * cptr -> unit
	    = _import "gtk_container_remove" : cptr * cptr -> unit;
	val remove : 'a t -> 'b Widget.t -> unit
	    = fn self => fn widget =>
		 GObject.withPtr
		   (self, 
		    fn self => GObject.withPtr
				 (widget, fn widget => remove_ (self, widget)))
    end
    structure Bin :>
      sig
	type base
	type 'a bin_t
	type 'a t = 'a bin_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toBin : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a bin_t = unit
	type 'a t = 'a bin_t Container.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Container.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toBin obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Window :>
      sig
	type base
	type 'a window_t
	type 'a t = 'a window_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWindow : 'a t -> base t
	type type_t
	val TOPLEVEL : type_t
	val POPUP : type_t
	val new : type_t option -> base t
	val new' : unit -> base t
	val get_size : 'a t -> int -> int -> unit
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a window_t = unit
	type 'a t = 'a window_t Bin.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Bin.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWindow obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	type type_t = int
	val get_type_t_ : int ref * int ref -> unit
	    = _import "mgtk_get_gtk_window_type" : int ref * int ref -> unit;
	val (TOPLEVEL, POPUP) = let val (x0, x1) = (ref 0, ref 0)
				in get_type_t_ (x0, x1)
				 ; (!x0, !x1)
				end
	val new_ : int -> cptr = _import "gtk_window_new" : int -> cptr;
	val new : type_t option -> base t
	    = fn typ => make (new_ (getOpt (typ, TOPLEVEL)))
	val new' : unit -> base t = fn dummy => make (new_ TOPLEVEL)
	val get_size_ : cptr * int * int -> unit
	    = _import "gtk_window_get_size" : cptr * int * int -> unit;
	val get_size : 'a t -> int -> int -> unit
	    = fn self => fn width => fn height =>
		 GObject.withPtr
		   (self, fn self => get_size_ (self, width, height))
    end
    structure Button :>
      sig
	type base
	type 'a button_t
	type 'a t = 'a button_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toButton : 'a t -> base t
	val get_type : unit -> GType.t
	val new : unit -> base t
	val new_with_label : string -> base t
	val set_label : 'a t -> string -> unit
	val get_label : 'a t -> string
	val clicked_sig : (unit -> unit) -> 'a t Signal.signal
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a button_t = unit
	type 'a t = 'a button_t Bin.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Bin.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toButton obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val get_type_ : unit -> GType.t
	    = _import "gtk_button_get_type" : unit -> GType.t;
	val get_type : unit -> GType.t = fn dummy => get_type_ dummy
	val new_ : unit -> cptr = _import "gtk_button_new" : unit -> cptr;
	val new : unit -> base t = fn dummy => make (new_ dummy)
	val new_with_label_ : CString.cstring -> cptr
	    = _import "gtk_button_new_with_label" : CString.cstring -> cptr;
	val new_with_label : string -> base t
	    = fn label => make (new_with_label_ (CString.fromString label))
	val set_label_ : cptr * CString.cstring -> unit
	    = _import "gtk_button_set_label" : cptr * CString.cstring -> unit;
	val set_label : 'a t -> string -> unit
	    = fn self => fn label =>
		 GObject.withPtr
		   (self, 
		    fn self => set_label_ (self, CString.fromString label))
	val get_label_ : cptr -> CString.t
	    = _import "gtk_button_get_label" : cptr -> CString.t;
	val get_label : 'a t -> string
	    = fn self => GObject.withPtr
			   (self, 
			    fn self => let val t = get_label_ self
				       in CString.toString t end)
	local open Signal
	      infixr -->
	in val clicked_sig : (unit -> unit) -> 'a t Signal.signal
	       = fn f => signal "clicked" false (void --> return_void) f
	end
    end
    structure Editable :>
      sig
	type base
	type 'a editable_t
	type 'a t = 'a editable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEditable : 'a t -> base t
	val get_chars : 'a t -> int -> int -> string
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a editable_t = unit
	type 'a t = 'a editable_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toEditable obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val get_chars_ : cptr * int * int -> CString.t
	    = _import "gtk_editable_get_chars" : cptr * int * int -> CString.t;
	val get_chars : 'a t -> int -> int -> string
	    = fn self => fn start_pos => fn end_pos =>
		 GObject.withPtr
		   (self, 
		    fn self => let val t = get_chars_
					     (self, start_pos, end_pos)
			       in CString.toString t end)
    end
    structure CellEditable :>
      sig
	type base
	type 'a celleditable_t
	type 'a t = 'a celleditable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellEditable : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a celleditable_t = unit
	type 'a t = 'a celleditable_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toCellEditable obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Entry :>
      sig
	type base
	type 'a entry_t
	type 'a t = 'a entry_t Editable.t CellEditable.t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEntry : 'a t -> base t
	val get_text : 'a t -> string
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a entry_t = unit
	type 'a t = 'a entry_t Editable.t CellEditable.t Widget.t
	fun inherit w con
	  = let val con = let val ptr = con () in fn () => ptr end
		val witness = ()
		val witness = Editable.inherit witness con
		val witness = CellEditable.inherit witness con
	    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toEntry obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val get_text_ : cptr -> CString.t
	    = _import "gtk_entry_get_text" : cptr -> CString.t;
	val get_text : 'a t -> string
	    = fn self => GObject.withPtr (self, 
					  fn self => let val t = get_text_ self
						     in CString.toString t end)
    end
    structure Misc :>
      sig
	type base
	type 'a misc_t
	type 'a t = 'a misc_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toMisc : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a misc_t = unit
	type 'a t = 'a misc_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toMisc obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Label :>
      sig
	type base
	type 'a label_t
	type 'a t = 'a label_t Misc.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toLabel : 'a t -> base t
	val new : string option -> base t
	val new' : unit -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a label_t = unit
	type 'a t = 'a label_t Misc.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Misc.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toLabel obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val new_ : CString.cstring -> cptr
	    = _import "gtk_label_new" : CString.cstring -> cptr;
	val new : string option -> base t
	    = fn str => make (new_ (CString.fromString (getOpt (str, ""))))
	val new' : unit -> base t
	    = fn dummy => make (new_ (CString.fromString ""))
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** Bin *** */


/* *** Window *** */
/* ML type: unit */
EXTERNML void mgtk_get_gtk_window_type(int* x0, int* x1) {
    *x1 = GTK_WINDOW_POPUP;
    *x0 = GTK_WINDOW_TOPLEVEL;
}



/* *** Button *** */


/* *** Editable *** */


/* *** CellEditable *** */


/* *** Entry *** */


/* *** Misc *** */


/* *** Label *** */

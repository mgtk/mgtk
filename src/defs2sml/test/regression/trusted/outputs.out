structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    type icon_size = int
    val get_icon_size_ : unit -> int * int * int * int * int * int * int
	= app1 (symb"mgtk_get_gtk_icon_size")
    val (ICON_SIZE_INVALID, ICON_SIZE_MENU, ICON_SIZE_SMALL_TOOLBAR, 
	 ICON_SIZE_LARGE_TOOLBAR, ICON_SIZE_BUTTON, ICON_SIZE_DND, 
	 ICON_SIZE_DIALOG)
	= get_icon_size_ ()
    val icon_size_lookup_ : int -> bool * int * int
	= app1 (symb"mgtk_gtk_icon_size_lookup")
    val icon_size_lookup : icon_size -> bool * int * int
	= fn size => let val (res0, res1, res2) = icon_size_lookup_ size
		     in (res0, res1, res2) end
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val translate_coordinates
	  : 'a t -> 'b t -> int -> int -> bool * int * int
	val path : 'a t -> int * string * string
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
	val translate_coordinates_
	  : cptr -> cptr -> int -> int -> bool * int * int
	    = app4 (symb"mgtk_gtk_widget_translate_coordinates")
	val translate_coordinates
	  : 'a t -> 'b t -> int -> int -> bool * int * int
	    = fn self => fn dest_widget => fn src_x => fn src_y =>
		 let val (res0, res1, res2)
			 = translate_coordinates_
			     (repr self) (repr dest_widget) src_x src_y
		 in (res0, res1, res2) end
	val path_ : cptr -> int * string * string
	    = app1 (symb"mgtk_gtk_widget_path")
	val path : 'a t -> int * string * string
	    = fn self => let val (res0, res1, res2) = path_ (repr self)
			 in (res0, res1, res2) end
    end
    structure Editable :>
      sig
	type base
	type 'a editable_t
	type 'a t = 'a editable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEditable : 'a t -> base t
	val insert_text : 'a t -> string -> int -> int option -> int
	val insert_text' : 'a t -> string -> int -> int
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a editable_t = unit
	type 'a t = 'a editable_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toEditable obj = inherit () (fn () => repr obj)
	val insert_text_ : cptr -> string -> int -> int -> int
	    = app4 (symb"mgtk_gtk_editable_insert_text")
	val insert_text : 'a t -> string -> int -> int option -> int
	    = fn self => fn new_text => fn new_text_length => fn position =>
		 let val res0 = insert_text_ (repr self) new_text
					     new_text_length
					     (getOpt (position, 0))
		 in res0 end
	val insert_text' : 'a t -> string -> int -> int
	    = fn self => fn new_text => fn new_text_length =>
		 let val res0 = insert_text_
				  (repr self) new_text new_text_length 0
		 in res0 end
    end
    structure CellEditable :>
      sig
	type base
	type 'a celleditable_t
	type 'a t = 'a celleditable_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellEditable : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a celleditable_t = unit
	type 'a t = 'a celleditable_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCellEditable obj = inherit () (fn () => repr obj)
    end
    structure TextIter :>
      sig
	type t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type t = GObject.cptr
    end
    structure TextBuffer :>
      sig
	type base
	type 'a textbuffer_t
	type 'a t = 'a textbuffer_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTextBuffer : 'a t -> base t
	val getiter_at_line_offset : 'a t -> int -> int -> TextIter.t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a textbuffer_t = unit
	type 'a t = 'a textbuffer_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTextBuffer obj = inherit () (fn () => repr obj)
	val getiter_at_line_offset_ : cptr -> int -> int -> cptr
	    = app3 (symb"mgtk_gtk_text_buffer_get_iter_at_line_offset")
	val getiter_at_line_offset : 'a t -> int -> int -> TextIter.t
	    = fn self => fn line_number => fn char_offset =>
		 let val res0 = getiter_at_line_offset_
				  (repr self) line_number char_offset
		 in res0 end
    end
    structure TreePath :>
      sig
	type t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type t = GObject.cptr
    end
    structure TreeIter :>
      sig
	type t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type t = GObject.cptr
    end
    structure TreeModel :>
      sig
	type base
	type 'a treemodel_t
	type 'a t = 'a treemodel_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeModel : 'a t -> base t
	val iter_next : 'a t -> TreeIter.t -> bool * TreeIter.t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treemodel_t = unit
	type 'a t = 'a treemodel_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeModel obj = inherit () (fn () => repr obj)
	val iter_next_ : cptr -> cptr -> bool * cptr
	    = app2 (symb"mgtk_gtk_tree_model_iter_next")
	val iter_next : 'a t -> TreeIter.t -> bool * TreeIter.t
	    = fn self => fn iter =>
		 let val (res0, res1) = iter_next_ (repr self) iter
		 in (res0, res1) end
    end
    structure TreeSelection :>
      sig
	type base
	type 'a treeselection_t
	type 'a t = 'a treeselection_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeSelection : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treeselection_t = unit
	type 'a t = 'a treeselection_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeSelection obj = inherit () (fn () => repr obj)
    end
    structure Container :>
      sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj = inherit () (fn () => repr obj)
    end
    structure TreeViewColumn :>
      sig
	type base
	type 'a treeviewcolumn_t
	type 'a t = 'a treeviewcolumn_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeViewColumn : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treeviewcolumn_t = unit
	type 'a t = 'a treeviewcolumn_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeViewColumn obj = inherit () (fn () => repr obj)
    end
    structure TreeView :>
      sig
	type base
	type 'a treeview_t
	type 'a t = 'a treeview_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeView : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treeview_t = unit
	type 'a t = 'a treeview_t Container.t
	fun inherit w con = Container.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeView obj = inherit () (fn () => repr obj)
    end
    structure TreeStore :>
      sig
	type base
	type 'a treestore_t
	type 'a t = 'a treestore_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTreeStore : 'a t -> base t
	val asTreeModel : 'a t -> base TreeModel.t
	val append : 'a t -> TreeIter.t option -> TreeIter.t
	val append' : 'a t -> TreeIter.t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a treestore_t = unit
	type 'a t = 'a treestore_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTreeStore obj = inherit () (fn () => repr obj)
	fun asTreeModel obj = TreeModel.inherit () (fn () => repr obj)
	val append_ : cptr -> cptr -> cptr
	    = app2 (symb"mgtk_gtk_tree_store_append")
	val append : 'a t -> TreeIter.t option -> TreeIter.t
	    = fn self => fn parent =>
		 let val res0 = append_ (repr self)
				        (getOpt (parent, GObject.null))
		 in res0 end
	val append' : 'a t -> TreeIter.t
	    = fn self => let val res0 = append_ (repr self) GObject.null
			 in res0 end
    end
end


/* *** Gtk *** */
/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_icon_size(value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res, 0) = Val_int(GTK_ICON_SIZE_INVALID);
  Field(res, 1) = Val_int(GTK_ICON_SIZE_MENU);
  Field(res, 2) = Val_int(GTK_ICON_SIZE_SMALL_TOOLBAR);
  Field(res, 3) = Val_int(GTK_ICON_SIZE_LARGE_TOOLBAR);
  Field(res, 4) = Val_int(GTK_ICON_SIZE_BUTTON);
  Field(res, 5) = Val_int(GTK_ICON_SIZE_DND);
  Field(res, 6) = Val_int(GTK_ICON_SIZE_DIALOG);
  return res;
}

/* ML type: int -> bool */
EXTERNML value mgtk_gtk_icon_size_lookup(value size) { /* ML */
  value result;
  value res;
  int width;
  int height;
  res = Val_bool(gtk_icon_size_lookup(Int_val(size), &width, &height));
  result = alloc_tuple(3);
  Field(result, 0) = res;
  Field(result, 1) = Val_int(width);
  Field(result, 2) = Val_int(height);
  return result;
}



/* *** Object *** */


/* *** Widget *** */
/* ML type: cptr -> cptr -> int -> int -> bool */
EXTERNML value mgtk_gtk_widget_translate_coordinates(value self, value dest_widget, value src_x, value src_y) { /* ML */
    value result;
    value res;
    int dest_x;
    int dest_y;
    res = Val_bool(gtk_widget_translate_coordinates(GtkObj_val(self), GtkObj_val(dest_widget), Int_val(src_x), Int_val(src_y), &dest_x, &dest_y));
    result = alloc_tuple(3);
    Field(result, 0) = res;
    Field(result, 1) = Val_int(dest_x);
    Field(result, 2) = Val_int(dest_y);
    return result;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_path(value self) { /* ML */
    value result;
    int path_length;
    char* path;
    char* path_reversed;
    gtk_widget_path(GtkObj_val(self), &path_length, &path, &path_reversed);
    result = alloc_tuple(3);
    Field(result, 0) = Val_int(path_length);
    Field(result, 1) = my_copy_string(path);
    Field(result, 2) = my_copy_string(path_reversed);
    return result;
}



/* *** Editable *** */
/* ML type: cptr -> string -> int -> int -> int */
EXTERNML value mgtk_gtk_editable_insert_text(value self, value new_text, value new_text_length, value position_in) { /* ML */
    int position = Int_val(position_in);
    gtk_editable_insert_text(GtkObj_val(self), String_val(new_text), Int_val(new_text_length), &position);
    return Val_int(position);
}



/* *** CellEditable *** */


/* *** TextIter *** */
#define GtkTextIter_val(x) (((void*) Field(x, 1)))

#define GtkTextIter_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkTextIter(value val) {
    gtk_text_iter_free(GtkTextIter_val(val));
}

value Val_GtkTextIter(void* obj) {
    value res;
    res = alloc_final(2, ml_finalize_GtkTextIter, 0, 1);
    GtkTextIter_val_nocast(res) = (value) gtk_text_iter_copy(obj);
    return res;
}



/* *** TextBuffer *** */
/* ML type: cptr -> int -> int -> unit */
EXTERNML value mgtk_gtk_text_buffer_get_iter_at_line_offset(value self, value line_number, value char_offset) { /* ML */
    GtkTextIter iter;
    gtk_text_buffer_get_iter_at_line_offset(GtkObj_val(self), &iter, Int_val(line_number), Int_val(char_offset));
    return Val_GtkTextIter(&iter);
}



/* *** TreePath *** */
#define GtkTreePath_val(x) (((void*) Field(x, 1)))

#define GtkTreePath_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkTreePath(value val) { /* Empty */
}

value Val_GtkTreePath(void* obj) {
    value res;
    res = alloc_final(2, ml_finalize_GtkTreePath, 0, 1);
    GtkTreePath_val_nocast(res) = (value) obj;
    return res;
}



/* *** TreeIter *** */
#define GtkTreeIter_val(x) (((void*) Field(x, 1)))

#define GtkTreeIter_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkTreeIter(value val) {
    gtk_tree_iter_free(GtkTreeIter_val(val));
}

value Val_GtkTreeIter(void* obj) {
    value res;
    res = alloc_final(2, ml_finalize_GtkTreeIter, 0, 1);
    GtkTreeIter_val_nocast(res) = (value) gtk_tree_iter_copy(obj);
    return res;
}



/* *** TreeModel *** */
/* ML type: cptr -> cptr -> bool * cptr */
EXTERNML value mgtk_gtk_tree_model_iter_next(value self, value iter_in) { /* ML */
    value result;
    value res;
    GtkTreeIter iter = *((GtkTreeIter*) GtkTreeIter_val(iter_in));
    res = Val_bool(gtk_tree_model_iter_next(GtkObj_val(self), &iter));
    result = alloc_tuple(2);
    Field(result, 0) = res;
    Field(result, 1) = Val_GtkTreeIter(&iter);
    return result;
}



/* *** TreeSelection *** */


/* *** Container *** */


/* *** TreeViewColumn *** */


/* *** TreeView *** */


/* *** TreeStore *** */
/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_tree_store_append(value self, value parent) { /* ML */
    GtkTreeIter iter;
    gtk_tree_store_append(GtkObj_val(self), &iter, GtkTreeIter_val(parent));
    return Val_GtkTreeIter(&iter);
}


structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit witness con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure CellRenderer :>
      sig
	type base
	type 'a cellrenderer_t
	type 'a t = 'a cellrenderer_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellRenderer : 'a t -> base t
	val get_type : unit -> GType.t
	val set_fixed_size : 'a t -> int -> int -> unit
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a cellrenderer_t = unit
	type 'a t = 'a cellrenderer_t Object.t
	fun inherit w con = Object.inherit witness con
	fun make ptr = inherit () (fn () => ptr)
	fun toCellRenderer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val get_type_ : unit -> GType.t
	    = _import "gtk_cell_renderer_get_type" : unit -> GType.t;
	val get_type : unit -> GType.t = fn dummy => get_type_ dummy
	val set_fixed_size_ : cptr * int * int -> unit
	    = _import "gtk_cell_renderer_set_fixed_size"
		      : cptr * int * int -> unit;
	val set_fixed_size : 'a t -> int -> int -> unit
	    = fn self => fn width => fn height =>
		 GObject.withPtr
		   (self, fn self => set_fixed_size_ (self, width, height))
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** CellRenderer *** */

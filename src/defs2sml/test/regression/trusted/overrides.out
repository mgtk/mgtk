structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
    end
    structure Window :>
      sig
	type base
	type 'a window_t
	type 'a t = 'a window_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWindow : 'a t -> base t
	val get_position : 'a t -> int * int
	val get_size : 'a t -> int * int
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a window_t = unit
	type 'a t = 'a window_t Bin.t
	fun inherit w con = Bin.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWindow obj = inherit () (fn () => repr obj)
	val get_position_ : cptr -> int * int
	    = app1 (symb"mgtk_gtk_window_get_position")
	val get_position : 'a t -> int * int
	    = fn self => let val (res0, res1) = get_position_ (repr self)
			 in (res0, res1) end
	val get_size_ : cptr -> int * int
	    = app1 (symb"mgtk_gtk_window_get_size")
	val get_size : 'a t -> int * int
	    = fn self => let val (res0, res1) = get_size_ (repr self)
			 in (res0, res1) end
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Window *** */
/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_window_get_position(value self) { /* ML */
    value result;
    int root_x;
    int root_y;
    gtk_window_get_position(GtkObj_val(self), &root_x, &root_y);
    result = alloc_tuple(2);
    Field(result, 0) = Val_int(root_x);
    Field(result, 1) = Val_int(root_y);
    return result;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_window_get_size(value self) { /* ML */
    value result;
    int width;
    int height;
    gtk_window_get_size(GtkObj_val(self), &width, &height);
    result = alloc_tuple(2);
    Field(result, 0) = Val_int(width);
    Field(result, 1) = Val_int(height);
    return result;
}


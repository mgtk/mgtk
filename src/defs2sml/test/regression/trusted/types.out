structure Gtk = struct
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
 
    type icon_set = GObject.cptr
    type icon_size = int
    val get_icon_size_ : unit -> int * int * int * int * int * int * int
        = app1 (symb"mgtk_get_gtk_icon_size")
    val (ICON_SIZE_INVALID,ICON_SIZE_MENU,ICON_SIZE_SMALL_TOOLBAR,ICON_SIZE_LARGE_TOOLBAR,ICON_SIZE_BUTTON,ICON_SIZE_DND,ICON_SIZE_DIALOG) = get_icon_size_ ()
    val icon_size_register_ : string -> int -> int -> int
        = app3 (symb"mgtk_gtk_icon_size_register")
    val icon_size_register : string -> int -> int -> icon_size
        = fn name => fn width => fn height => icon_size_register_ name width height
    signature Settings = sig
        type base
        type 'a settings_t
        type 'a t = 'a settings_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Settings :> Settings = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a settings_t = unit
        type 'a t = 'a settings_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature Style = sig
        type base
        type 'a style_t
        type 'a t = 'a style_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Style :> Style = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a style_t = unit
        type 'a t = 'a style_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature RcStyle = sig
        type base
        type 'a rcstyle_t
        type 'a t = 'a rcstyle_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
        val rc_get_style_by_paths : 'a Settings.t -> string -> string -> int -> base Style.t
    end
    structure RcStyle :> RcStyle = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a rcstyle_t = unit
        type 'a t = 'a rcstyle_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
        val rc_get_style_by_paths_ : cptr -> string -> string -> int -> cptr
            = app4 (symb"mgtk_gtk_rc_get_style_by_paths")
        val rc_get_style_by_paths : 'a Settings.t -> string -> string -> int -> base Style.t
            = fn settings => fn widget_path => fn class_path => fn typ => Style.inherit () (fn () => rc_get_style_by_paths_ (repr settings) widget_path class_path typ)
    end
    signature Object = sig
        type base
        type 'a object_t
        type 'a t = 'a object_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Object :> Object = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a object_t = unit
        type 'a t = 'a object_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature Widget = sig
        type base
        type 'a widget_t
        type 'a t = 'a widget_t Object.t
        val inherit : 'a -> GObject.constructor -> 'a t
        val modify_style : 'a t -> 'b RcStyle.t -> unit
    end
    structure Widget :> Widget = struct
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb
 
        type base = unit
        type 'a widget_t = unit
        type 'a t = 'a widget_t Object.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Object.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
        val modify_style_ : cptr -> cptr -> unit
            = app2 (symb"mgtk_gtk_widget_modify_style")
        val modify_style : 'a t -> 'b RcStyle.t -> unit
            = fn self => fn style => modify_style_ (repr self) (repr style)
    end
end


/* *** Gtk *** */
#define GtkIconSet_val(x) (((void*) Field(x, 1)))

#define GtkIconSet_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkIconSet(value val) { /* Empty */
}

value Val_GtkIconSet(void* obj) {
  value res;
  res = alloc_final(2, ml_finalize_GtkIconSet, 0, 1);
  GtkIconSet_val_nocast(res) = (value) obj;
  return res;
}

/* ML type: unit */
EXTERNML value mgtk_get_gtk_icon_size(value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res, 0) = Val_int(GTK_ICON_SIZE_INVALID);
  Field(res, 1) = Val_int(GTK_ICON_SIZE_MENU);
  Field(res, 2) = Val_int(GTK_ICON_SIZE_SMALL_TOOLBAR);
  Field(res, 3) = Val_int(GTK_ICON_SIZE_LARGE_TOOLBAR);
  Field(res, 4) = Val_int(GTK_ICON_SIZE_BUTTON);
  Field(res, 5) = Val_int(GTK_ICON_SIZE_DND);
  Field(res, 6) = Val_int(GTK_ICON_SIZE_DIALOG);
  return res;
}

/* ML type: string -> int -> int -> int */
EXTERNML value mgtk_gtk_icon_size_register(value name, value width, value height) { /* ML */
  return Val_int(gtk_icon_size_register(String_val(name), Int_val(width), Int_val(height)));
}



/* *** Settings *** */


/* *** Style *** */


/* *** RcStyle *** */
/* ML type: cptr -> string -> string -> int -> cptr */
EXTERNML value mgtk_gtk_rc_get_style_by_paths(value settings, value widget_path, value class_path, value type) { /* ML */
    return Val_GtkObj(gtk_rc_get_style_by_paths(GtkObj_val(settings), String_val(widget_path), String_val(class_path), Int_val(type)));
}



/* *** Object *** */


/* *** Widget *** */
/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_widget_modify_style(value self, value style) { /* ML */
    gtk_widget_modify_style(GtkObj_val(self), GtkObj_val(style));
    return Val_unit;
}


structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    type icon_size = int
    val get_icon_size_ : unit -> int * int * int * int * int * int * int
	= app1 (symb"mgtk_get_gtk_icon_size")
    val (ICON_SIZE_INVALID, ICON_SIZE_MENU, ICON_SIZE_SMALL_TOOLBAR, 
	 ICON_SIZE_LARGE_TOOLBAR, ICON_SIZE_BUTTON, ICON_SIZE_DND, 
	 ICON_SIZE_DIALOG)
	= get_icon_size_ ()
    structure Settings :>
      sig
	type base
	type 'a settings_t
	type 'a t = 'a settings_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toSettings : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a settings_t = unit
	type 'a t = 'a settings_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toSettings obj = inherit () (fn () => repr obj)
    end
    structure Style :>
      sig
	type base
	type 'a style_t
	type 'a t = 'a style_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toStyle : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a style_t = unit
	type 'a t = 'a style_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toStyle obj = inherit () (fn () => repr obj)
    end
    structure Demoted :>
      sig
	type base
	val icon_size_register : string -> int -> int -> icon_size
	val rc_get_style_by_paths
	  : 'a Settings.t -> string -> string -> GType.t -> base Style.t
	val accel_groups_activate : 'a GObject.t -> int -> int -> bool
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	val icon_size_register_ : string -> int -> int -> int
	    = app3 (symb"mgtk_gtk_icon_size_register")
	val icon_size_register : string -> int -> int -> icon_size
	    = fn name => fn width => fn height =>
		 icon_size_register_ name width height
	val rc_get_style_by_paths_
	  : cptr -> string -> string -> GType.t -> cptr
	    = app4 (symb"mgtk_gtk_rc_get_style_by_paths")
	val rc_get_style_by_paths
	  : 'a Settings.t -> string -> string -> GType.t -> base Style.t
	    = fn settings => fn widget_path => fn class_path => fn typ =>
		 Style.inherit
		   ()
		   (fn () => rc_get_style_by_paths_
			       (repr settings) widget_path class_path typ)
	val accel_groups_activate_ : cptr -> int -> int -> bool
	    = app3 (symb"mgtk_gtk_accel_groups_activate")
	val accel_groups_activate : 'a GObject.t -> int -> int -> bool
	    = fn object => fn accel_key => fn accel_mods =>
		 accel_groups_activate_ (repr object) accel_key accel_mods
    end
    structure IconSet :>
      sig
	type t = GObject.cptr
	type base
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type t = GObject.cptr
	type base = unit
    end
    structure RcStyle :>
      sig
	type base
	type 'a rcstyle_t
	type 'a t = 'a rcstyle_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toRcStyle : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a rcstyle_t = unit
	type 'a t = 'a rcstyle_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toRcStyle obj = inherit () (fn () => repr obj)
    end
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val modify_style : 'a t -> 'b RcStyle.t -> unit
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
	val modify_style_ : cptr -> cptr -> unit
	    = app2 (symb"mgtk_gtk_widget_modify_style")
	val modify_style : 'a t -> 'b RcStyle.t -> unit
	    = fn self => fn style => modify_style_ (repr self) (repr style)
    end
    structure Calendar :>
      sig
	type base
	type 'a calendar_t
	type 'a t = 'a calendar_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCalendar : 'a t -> base t
	type display_options
	val SHOW_HEADING : display_options
	val SHOW_DAY_NAMES : display_options
	val NO_MONTH_CHANGE : display_options
	val SHOW_WEEK_NUMBERS : display_options
	val WEEK_START_MONDAY : display_options
	val display_options : 'a t -> display_options list -> unit
	val get_display_options : 'a t -> display_options list
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a calendar_t = unit
	type 'a t = 'a calendar_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toCalendar obj = inherit () (fn () => repr obj)
	type display_options = int
	val get_display_options_ : unit -> int * int * int * int * int
	    = app1 (symb"mgtk_get_gtk_calendar_display_options")
	val (SHOW_HEADING, SHOW_DAY_NAMES, NO_MONTH_CHANGE, SHOW_WEEK_NUMBERS, 
	     WEEK_START_MONDAY)
	    = get_display_options_ ()
	val display_options_ : cptr -> int -> unit
	    = app2 (symb"mgtk_gtk_calendar_display_options")
	val display_options : 'a t -> display_options list -> unit
	    = fn self => fn flags =>
		 display_options_ (repr self) (Flags.set flags)
	val get_display_options_ : cptr -> int
	    = app1 (symb"mgtk_gtk_calendar_get_display_options")
	val get_display_options : 'a t -> display_options list
	    = fn self => Flags.get (get_display_options_ (repr self))
    end
    structure Entry :>
      sig
	type base
	type 'a entry_t
	type 'a t = 'a entry_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEntry : 'a t -> base t
	val new_with_max_length : int option -> base t
	val new_with_max_length' : unit -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a entry_t = unit
	type 'a t = 'a entry_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toEntry obj = inherit () (fn () => repr obj)
	val new_with_max_length_ : int -> cptr
	    = app1 (symb"mgtk_gtk_entry_new_with_max_length")
	val new_with_max_length : int option -> base t
	    = fn max => make (new_with_max_length_ (getOpt (max, 0)))
	val new_with_max_length' : unit -> base t
	    = fn dummy => make (new_with_max_length_ 0)
    end
end


/* *** Gtk *** */
/* ML type: unit -> int * int * int * int * int * int * int */
EXTERNML value mgtk_get_gtk_icon_size(value dummy) { /* ML */
  value res = alloc_tuple(7);
  Field(res, 0) = Val_int(GTK_ICON_SIZE_INVALID);
  Field(res, 1) = Val_int(GTK_ICON_SIZE_MENU);
  Field(res, 2) = Val_int(GTK_ICON_SIZE_SMALL_TOOLBAR);
  Field(res, 3) = Val_int(GTK_ICON_SIZE_LARGE_TOOLBAR);
  Field(res, 4) = Val_int(GTK_ICON_SIZE_BUTTON);
  Field(res, 5) = Val_int(GTK_ICON_SIZE_DND);
  Field(res, 6) = Val_int(GTK_ICON_SIZE_DIALOG);
  return res;
}



/* *** Settings *** */


/* *** Style *** */


/* *** Demoted *** */
/* ML type: string -> int -> int -> int */
EXTERNML value mgtk_gtk_icon_size_register(value name, value width, value height) { /* ML */
    return Val_int(gtk_icon_size_register(String_val(name), Int_val(width), Int_val(height)));
}

/* ML type: cptr -> string -> string -> GType.t -> cptr */
EXTERNML value mgtk_gtk_rc_get_style_by_paths(value settings, value widget_path, value class_path, value type) { /* ML */
    return Val_GtkObj(gtk_rc_get_style_by_paths(GtkObj_val(settings), String_val(widget_path), String_val(class_path), Int_val(type)));
}

/* ML type: cptr -> int -> int -> bool */
EXTERNML value mgtk_gtk_accel_groups_activate(value object, value accel_key, value accel_mods) { /* ML */
    return Val_bool(gtk_accel_groups_activate(GtkObj_val(object), Int_val(accel_key), Int_val(accel_mods)));
}



/* *** IconSet *** */
#define GtkIconSet_val(x) (((void*) Field(x, 1)))

#define GtkIconSet_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkIconSet(value val) { /* Empty */
}

value Val_GtkIconSet(void* obj) {
    value res;
    res = alloc_final(2, ml_finalize_GtkIconSet, 0, 1);
    GtkIconSet_val_nocast(res) = (value) obj;
    return res;
}



/* *** RcStyle *** */


/* *** Object *** */


/* *** Widget *** */
/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_widget_modify_style(value self, value style) { /* ML */
    gtk_widget_modify_style(GtkObj_val(self), GtkObj_val(style));
    return Val_unit;
}



/* *** Calendar *** */
/* ML type: unit -> int * int * int * int * int */
EXTERNML value mgtk_get_gtk_calendar_display_options(value dummy) { /* ML */
    value res = alloc_tuple(5);
    Field(res, 0) = Val_int(GTK_CALENDAR_SHOW_HEADING);
    Field(res, 1) = Val_int(GTK_CALENDAR_SHOW_DAY_NAMES);
    Field(res, 2) = Val_int(GTK_CALENDAR_NO_MONTH_CHANGE);
    Field(res, 3) = Val_int(GTK_CALENDAR_SHOW_WEEK_NUMBERS);
    Field(res, 4) = Val_int(GTK_CALENDAR_WEEK_START_MONDAY);
    return res;
}

/* ML type: cptr -> int -> unit */
EXTERNML value mgtk_gtk_calendar_display_options(value self, value flags) { /* ML */
    gtk_calendar_display_options(GtkObj_val(self), Int_val(flags));
    return Val_unit;
}

/* ML type: cptr -> int */
EXTERNML value mgtk_gtk_calendar_get_display_options(value self) { /* ML */
    return Val_int(gtk_calendar_get_display_options(GtkObj_val(self)));
}



/* *** Entry *** */
/* ML type: int -> cptr */
EXTERNML value mgtk_gtk_entry_new_with_max_length(value max) { /* ML */
    return Val_GtkObj(gtk_entry_new_with_max_length(Int_val(max)));
}


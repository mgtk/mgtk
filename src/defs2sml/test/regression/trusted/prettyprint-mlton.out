structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Demoted :>
      sig
	type anchortype
	val ANCHOR_CENTER : anchortype
	val ANCHOR_NORTH : anchortype
	val ANCHOR_NORTH_WEST : anchortype
	val ANCHOR_NORTH_EAST : anchortype
	val ANCHOR_SOUTH : anchortype
	val ANCHOR_SOUTH_WEST : anchortype
	val ANCHOR_SOUTH_EAST : anchortype
	val ANCHOR_WEST : anchortype
	val ANCHOR_EAST : anchortype
	val ANCHOR_N : anchortype
	val ANCHOR_NW : anchortype
	val ANCHOR_NE : anchortype
	val ANCHOR_S : anchortype
	val ANCHOR_SW : anchortype
	val ANCHOR_SE : anchortype
	val ANCHOR_W : anchortype
	val ANCHOR_E : anchortype
	type movement_step
	val MOVEMENT_LOGICAL_POSITIONS : movement_step
	val MOVEMENT_VISUAL_POSITIONS : movement_step
	val MOVEMENT_WORDS : movement_step
	val MOVEMENT_DISPLAY_LINES : movement_step
	val MOVEMENT_DISPLAY_LINE_ENDS : movement_step
	val MOVEMENT_PARAGRAPHS : movement_step
	val MOVEMENT_PARAGRAPH_ENDS : movement_step
	val MOVEMENT_PAGES : movement_step
	val MOVEMENT_BUFFER_ENDS : movement_step
	type rc_tokentype
	val RC_TOKEN_INVALID : rc_tokentype
	val RC_TOKEN_INCLUDE : rc_tokentype
	val RC_TOKEN_NORMAL : rc_tokentype
	val RC_TOKEN_ACTIVE : rc_tokentype
	val RC_TOKEN_PRELIGHT : rc_tokentype
	val RC_TOKEN_SELECTED : rc_tokentype
	val RC_TOKEN_INSENSITIVE : rc_tokentype
	val RC_TOKEN_FG : rc_tokentype
	val RC_TOKEN_BG : rc_tokentype
	val RC_TOKEN_TEXT : rc_tokentype
	val RC_TOKEN_BASE : rc_tokentype
	val RC_TOKEN_XTHICKNESS : rc_tokentype
	val RC_TOKEN_YTHICKNESS : rc_tokentype
	val RC_TOKEN_FONT : rc_tokentype
	val RC_TOKEN_FONTSET : rc_tokentype
	val RC_TOKEN_FONT_NAME : rc_tokentype
	val RC_TOKEN_BG_PIXMAP : rc_tokentype
	val RC_TOKEN_PIXMAP_PATH : rc_tokentype
	val RC_TOKEN_STYLE : rc_tokentype
	val RC_TOKEN_BINDING : rc_tokentype
	val RC_TOKEN_BIND : rc_tokentype
	val RC_TOKEN_WIDGET : rc_tokentype
	val RC_TOKEN_WIDGET_CLASS : rc_tokentype
	val RC_TOKEN_CLASS : rc_tokentype
	val RC_TOKEN_LOWEST : rc_tokentype
	val RC_TOKEN_GTK : rc_tokentype
	val RC_TOKEN_APPLICATION : rc_tokentype
	val RC_TOKEN_THEME : rc_tokentype
	val RC_TOKEN_RC : rc_tokentype
	val RC_TOKEN_HIGHEST : rc_tokentype
	val RC_TOKEN_ENGINE : rc_tokentype
	val RC_TOKEN_MODULE_PATH : rc_tokentype
	val RC_TOKEN_IM_MODULE_PATH : rc_tokentype
	val RC_TOKEN_IM_MODULE_FILE : rc_tokentype
	val RC_TOKEN_STOCK : rc_tokentype
	val RC_TOKEN_LTR : rc_tokentype
	val RC_TOKEN_RTL : rc_tokentype
	val RC_TOKEN_LAST : rc_tokentype
      end = struct
	type cptr = GObject.cptr
	type anchortype = int
	val get_anchortype_
	  : int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref
	    -> unit
	    = _import "mgtk_get_gtk_anchortype"
		      : int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref
			-> unit;
	val (ANCHOR_CENTER, ANCHOR_NORTH, ANCHOR_NORTH_WEST, 
	     ANCHOR_NORTH_EAST, ANCHOR_SOUTH, ANCHOR_SOUTH_WEST, 
	     ANCHOR_SOUTH_EAST, ANCHOR_WEST, ANCHOR_EAST, ANCHOR_N, ANCHOR_NW, 
	     ANCHOR_NE, ANCHOR_S, ANCHOR_SW, ANCHOR_SE, ANCHOR_W, ANCHOR_E)
	    = let val (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, 
		       x13, x14, x15, x16)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0)
	      in get_anchortype_ (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, 
				  x11, x12, x13, x14, x15, x16)
	       ; (!x0, !x1, !x2, !x3, !x4, !x5, !x6, !x7, !x8, !x9, !x10, 
		  !x11, !x12, !x13, !x14, !x15, !x16)
	      end
	type movement_step = int
	val get_movement_step_
	  : int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref
	    -> unit
	    = _import "mgtk_get_gtk_movement_step"
		      : int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref
			-> unit;
	val (MOVEMENT_LOGICAL_POSITIONS, MOVEMENT_VISUAL_POSITIONS, 
	     MOVEMENT_WORDS, MOVEMENT_DISPLAY_LINES, 
	     MOVEMENT_DISPLAY_LINE_ENDS, MOVEMENT_PARAGRAPHS, 
	     MOVEMENT_PARAGRAPH_ENDS, MOVEMENT_PAGES, MOVEMENT_BUFFER_ENDS)
	    = let val (x0, x1, x2, x3, x4, x5, x6, x7, x8)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0)
	      in get_movement_step_ (x0, x1, x2, x3, x4, x5, x6, x7, x8)
	       ; (!x0, !x1, !x2, !x3, !x4, !x5, !x6, !x7, !x8)
	      end
	type rc_tokentype = int
	val get_rc_tokentype_
	  : int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref * int ref * int ref * int ref * int ref 
	  * int ref * int ref
	    -> unit
	    = _import "mgtk_get_gtk_rc_tokentype"
		      : int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref * int ref * int ref 
		      * int ref * int ref * int ref
			-> unit;
	val (RC_TOKEN_INVALID, RC_TOKEN_INCLUDE, RC_TOKEN_NORMAL, 
	     RC_TOKEN_ACTIVE, RC_TOKEN_PRELIGHT, RC_TOKEN_SELECTED, 
	     RC_TOKEN_INSENSITIVE, RC_TOKEN_FG, RC_TOKEN_BG, RC_TOKEN_TEXT, 
	     RC_TOKEN_BASE, RC_TOKEN_XTHICKNESS, RC_TOKEN_YTHICKNESS, 
	     RC_TOKEN_FONT, RC_TOKEN_FONTSET, RC_TOKEN_FONT_NAME, 
	     RC_TOKEN_BG_PIXMAP, RC_TOKEN_PIXMAP_PATH, RC_TOKEN_STYLE, 
	     RC_TOKEN_BINDING, RC_TOKEN_BIND, RC_TOKEN_WIDGET, 
	     RC_TOKEN_WIDGET_CLASS, RC_TOKEN_CLASS, RC_TOKEN_LOWEST, 
	     RC_TOKEN_GTK, RC_TOKEN_APPLICATION, RC_TOKEN_THEME, RC_TOKEN_RC, 
	     RC_TOKEN_HIGHEST, RC_TOKEN_ENGINE, RC_TOKEN_MODULE_PATH, 
	     RC_TOKEN_IM_MODULE_PATH, RC_TOKEN_IM_MODULE_FILE, RC_TOKEN_STOCK, 
	     RC_TOKEN_LTR, RC_TOKEN_RTL, RC_TOKEN_LAST)
	    = let val (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, 
		       x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, 
		       x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, 
		       x35, x36, x37)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, ref 0, 
			 ref 0, ref 0, ref 0)
	      in get_rc_tokentype_
		   (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, 
		    x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, 
		    x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, 
		    x35, x36, x37)
	       ; (!x0, !x1, !x2, !x3, !x4, !x5, !x6, !x7, !x8, !x9, !x10, 
		  !x11, !x12, !x13, !x14, !x15, !x16, !x17, !x18, !x19, !x20, 
		  !x21, !x22, !x23, !x24, !x25, !x26, !x27, !x28, !x29, !x30, 
		  !x31, !x32, !x33, !x34, !x35, !x36, !x37)
	      end
    end
end


/* *** Gtk *** */


/* *** Demoted *** */
/* ML type: int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_anchortype(int* x0, int* x1, int* x2, int* x3, int* x4, int* x5, int* x6, int* x7, int* x8, int* x9, int* x10, int* x11, int* x12, int* x13, int* x14, int* x15, int* x16) {
    *x16 = GTK_ANCHOR_E;
    *x15 = GTK_ANCHOR_W;
    *x14 = GTK_ANCHOR_SE;
    *x13 = GTK_ANCHOR_SW;
    *x12 = GTK_ANCHOR_S;
    *x11 = GTK_ANCHOR_NE;
    *x10 = GTK_ANCHOR_NW;
    *x9 = GTK_ANCHOR_N;
    *x8 = GTK_ANCHOR_EAST;
    *x7 = GTK_ANCHOR_WEST;
    *x6 = GTK_ANCHOR_SOUTH_EAST;
    *x5 = GTK_ANCHOR_SOUTH_WEST;
    *x4 = GTK_ANCHOR_SOUTH;
    *x3 = GTK_ANCHOR_NORTH_EAST;
    *x2 = GTK_ANCHOR_NORTH_WEST;
    *x1 = GTK_ANCHOR_NORTH;
    *x0 = GTK_ANCHOR_CENTER;
}

/* ML type: int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_movement_step(int* x0, int* x1, int* x2, int* x3, int* x4, int* x5, int* x6, int* x7, int* x8) {
    *x8 = GTK_MOVEMENT_BUFFER_ENDS;
    *x7 = GTK_MOVEMENT_PAGES;
    *x6 = GTK_MOVEMENT_PARAGRAPH_ENDS;
    *x5 = GTK_MOVEMENT_PARAGRAPHS;
    *x4 = GTK_MOVEMENT_DISPLAY_LINE_ENDS;
    *x3 = GTK_MOVEMENT_DISPLAY_LINES;
    *x2 = GTK_MOVEMENT_WORDS;
    *x1 = GTK_MOVEMENT_VISUAL_POSITIONS;
    *x0 = GTK_MOVEMENT_LOGICAL_POSITIONS;
}

/* ML type: int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_rc_tokentype(int* x0, int* x1, int* x2, int* x3, int* x4, int* x5, int* x6, int* x7, int* x8, int* x9, int* x10, int* x11, int* x12, int* x13, int* x14, int* x15, int* x16, int* x17, int* x18, int* x19, int* x20, int* x21, int* x22, int* x23, int* x24, int* x25, int* x26, int* x27, int* x28, int* x29, int* x30, int* x31, int* x32, int* x33, int* x34, int* x35, int* x36, int* x37) {
    *x37 = GTK_RC_TOKEN_LAST;
    *x36 = GTK_RC_TOKEN_RTL;
    *x35 = GTK_RC_TOKEN_LTR;
    *x34 = GTK_RC_TOKEN_STOCK;
    *x33 = GTK_RC_TOKEN_IM_MODULE_FILE;
    *x32 = GTK_RC_TOKEN_IM_MODULE_PATH;
    *x31 = GTK_RC_TOKEN_MODULE_PATH;
    *x30 = GTK_RC_TOKEN_ENGINE;
    *x29 = GTK_RC_TOKEN_HIGHEST;
    *x28 = GTK_RC_TOKEN_RC;
    *x27 = GTK_RC_TOKEN_THEME;
    *x26 = GTK_RC_TOKEN_APPLICATION;
    *x25 = GTK_RC_TOKEN_GTK;
    *x24 = GTK_RC_TOKEN_LOWEST;
    *x23 = GTK_RC_TOKEN_CLASS;
    *x22 = GTK_RC_TOKEN_WIDGET_CLASS;
    *x21 = GTK_RC_TOKEN_WIDGET;
    *x20 = GTK_RC_TOKEN_BIND;
    *x19 = GTK_RC_TOKEN_BINDING;
    *x18 = GTK_RC_TOKEN_STYLE;
    *x17 = GTK_RC_TOKEN_PIXMAP_PATH;
    *x16 = GTK_RC_TOKEN_BG_PIXMAP;
    *x15 = GTK_RC_TOKEN_FONT_NAME;
    *x14 = GTK_RC_TOKEN_FONTSET;
    *x13 = GTK_RC_TOKEN_FONT;
    *x12 = GTK_RC_TOKEN_YTHICKNESS;
    *x11 = GTK_RC_TOKEN_XTHICKNESS;
    *x10 = GTK_RC_TOKEN_BASE;
    *x9 = GTK_RC_TOKEN_TEXT;
    *x8 = GTK_RC_TOKEN_BG;
    *x7 = GTK_RC_TOKEN_FG;
    *x6 = GTK_RC_TOKEN_INSENSITIVE;
    *x5 = GTK_RC_TOKEN_SELECTED;
    *x4 = GTK_RC_TOKEN_PRELIGHT;
    *x3 = GTK_RC_TOKEN_ACTIVE;
    *x2 = GTK_RC_TOKEN_NORMAL;
    *x1 = GTK_RC_TOKEN_INCLUDE;
    *x0 = GTK_RC_TOKEN_INVALID;
}


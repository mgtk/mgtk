structure Gtk = struct
    type cptr = GObject.cptr
    signature Object = sig
        type base
        type 'a object_t
        type 'a t = 'a object_t GObject.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Object :> Object = struct
        type cptr = GObject.cptr
        type base = unit
        type 'a object_t = unit
        type 'a t = 'a object_t GObject.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in GObject.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature Widget = sig
        type base
        type 'a widget_t
        type 'a t = 'a widget_t Object.t
        val inherit : 'a -> GObject.constructor -> 'a t
    end
    structure Widget :> Widget = struct
        type cptr = GObject.cptr
        type base = unit
        type 'a widget_t = unit
        type 'a t = 'a widget_t Object.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Object.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
    end
    signature ItemFactory = sig
        type base
        type 'a itemfactory_t
        type 'a t = 'a itemfactory_t Object.t
        val inherit : 'a -> GObject.constructor -> 'a t
        val get_item : 'a t -> string -> base Widget.t
        val get_widget : 'a t -> string -> base Widget.t
    end
    structure ItemFactory :> ItemFactory = struct
        type cptr = GObject.cptr
        type base = unit
        type 'a itemfactory_t = unit
        type 'a t = 'a itemfactory_t Object.t
        fun inherit w con = let         val con = let         val ptr = con () in fn () => ptr end
        val witness = () in Object.inherit witness con end
        fun make ptr = inherit () (fn () => ptr)
 
        val get_item_ : cptr * CString.cstring -> cptr
            = _import "gtk_item_factory_get_item" : cptr * CString.cstring -> cptr;
        val get_item : 'a t -> string -> base Widget.t
            = fn self => fn path => Widget.inherit () (fn () => GObject.withPtr (self,fn self => get_item_ (self,CString.fromString path)))
        val get_widget_ : cptr * CString.cstring -> cptr
            = _import "gtk_item_factory_get_widget" : cptr * CString.cstring -> cptr;
        val get_widget : 'a t -> string -> base Widget.t
            = fn self => fn path => Widget.inherit () (fn () => GObject.withPtr (self,fn self => get_widget_ (self,CString.fromString path)))
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** ItemFactory *** */

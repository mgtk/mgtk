structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = Object.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Container :>
      sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = Widget.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure Box :>
      sig
	type base
	type 'a box_t
	type 'a t = 'a box_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toBox : 'a t -> base t
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a box_t = unit
	type 'a t = 'a box_t Container.t
	fun inherit w con = Container.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toBox obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
    end
    structure ButtonBox :>
      sig
	type base
	type 'a buttonbox_t
	type 'a t = 'a buttonbox_t Box.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toButtonBox : 'a t -> base t
	type style
	val BUTTONBOX_DEFAULT_STYLE : style
	val BUTTONBOX_SPREAD : style
	val BUTTONBOX_EDGE : style
	val BUTTONBOX_START : style
	val BUTTONBOX_END : style
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a buttonbox_t = unit
	type 'a t = 'a buttonbox_t Box.t
	fun inherit w con = Box.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toButtonBox obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	type style = int
	val get_style_
	  : int ref * int ref * int ref * int ref * int ref -> unit
	    = _import "mgtk_get_gtk_button_box_style"
		      : int ref * int ref * int ref * int ref * int ref
			-> unit;
	val (BUTTONBOX_DEFAULT_STYLE, BUTTONBOX_SPREAD, BUTTONBOX_EDGE, 
	     BUTTONBOX_START, BUTTONBOX_END)
	    = let val (x0, x1, x2, x3, x4)
		      = (ref 0, ref 0, ref 0, ref 0, ref 0)
	      in get_style_ (x0, x1, x2, x3, x4)
	       ; (!x0, !x1, !x2, !x3, !x4)
	      end
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */


/* *** Container *** */


/* *** Box *** */


/* *** ButtonBox *** */
/* ML type: int ref * int ref * int ref * int ref * int ref -> unit */
EXTERNML void mgtk_get_gtk_button_box_style(int* x0, int* x1, int* x2, int* x3, int* x4) {
    *x4 = GTK_BUTTONBOX_END;
    *x3 = GTK_BUTTONBOX_START;
    *x2 = GTK_BUTTONBOX_EDGE;
    *x1 = GTK_BUTTONBOX_SPREAD;
    *x0 = GTK_BUTTONBOX_DEFAULT_STYLE;
}


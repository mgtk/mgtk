structure Gtk  = struct
    
    type cptr = GObject.cptr
    structure TextIter :>
      sig
	type t = GObject.cptr
	type base
	val alloc_GtkTextIter : unit -> t
      end = struct
	type cptr = GObject.cptr
	type t = GObject.cptr
	type base = unit
	val alloc_GtkTextIter = _import "alloc_GtkTextIter" : unit -> t;
    end
    structure TextBuffer :>
      sig
	type base
	type 'a textbuffer_t
	type 'a t = 'a textbuffer_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTextBuffer : 'a t -> base t
	val insert : 'a t -> TextIter.t -> string -> int -> unit
	val insert' : 'a t -> TextIter.t -> string -> unit
      end = struct
	type cptr = GObject.cptr
	type base = unit
	type 'a textbuffer_t = unit
	type 'a t = 'a textbuffer_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTextBuffer obj
	  = inherit () (fn () => GObject.withPtr (obj, fn obj => obj))
	val insert_ : cptr * cptr * CString.cstring * int -> unit
	    = _import "gtk_text_buffer_insert"
		      : cptr * cptr * CString.cstring * int -> unit;
	val insert : 'a t -> TextIter.t -> string -> int -> unit
	    = fn self => fn iter => fn text => fn len =>
		 GObject.withPtr
		   (self, 
		    fn self =>
		       insert_ (self, iter, CString.fromString text, len))
	val insert' : 'a t -> TextIter.t -> string -> unit
	    = fn self => fn iter => fn text =>
		 GObject.withPtr
		   (self, 
		    fn self =>
		       insert_ (self, iter, CString.fromString text, ~1))
    end
end


/* *** Gtk *** */


/* *** TextIter *** */
EXTERNML GtkTextIter* alloc_GtkTextIter() {
    GtkTextIter res;
    return gtk_text_iter_copy(&res);
}



/* *** TextBuffer *** */

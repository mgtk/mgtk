structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure Object :>
      sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    structure Adjustment :>
      sig
	type base
	type 'a adjustment_t
	type 'a t = 'a adjustment_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toAdjustment : 'a t -> base t
	val new : real option -> real option -> real option -> real option 
	       -> real option -> real option
		  -> base t
	val new' : unit -> base t
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a adjustment_t = unit
	type 'a t = 'a adjustment_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toAdjustment obj = inherit () (fn () => repr obj)
	val new_ : real * real * real * real * real * real -> cptr
	    = app1 (symb"mgtk_gtk_adjustment_new")
	val new : real option -> real option -> real option -> real option 
	       -> real option -> real option
		  -> base t
	    = fn value => fn lower => fn upper => fn step_incr => 
	      fn page_incr => fn page_size =>
		 make (new_ (getOpt (value, 0.0), getOpt (lower, 0.0), 
			     getOpt (upper, 0.0), getOpt (step_incr, 0.0), 
			     getOpt (page_incr, 0.0), getOpt (page_size, 0.0)))
	val new' : unit -> base t
	    = fn dummy => make (new_ (0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
    end
    structure Widget :>
      sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val set_scroll_adjustments
	  : 'a t -> 'b Adjustment.t option -> 'c Adjustment.t option -> bool
	val set_scroll_adjustments' : 'a t -> bool
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
	val set_scroll_adjustments_ : cptr -> cptr -> cptr -> bool
	    = app3 (symb"mgtk_gtk_widget_set_scroll_adjustments")
	val set_scroll_adjustments
	  : 'a t -> 'b Adjustment.t option -> 'c Adjustment.t option -> bool
	    = fn self => fn hadjustment => fn vadjustment =>
		 set_scroll_adjustments_
		   (repr self)
		   (getOpt (Option.map repr hadjustment, GObject.null))
		   (getOpt (Option.map repr vadjustment, GObject.null))
	val set_scroll_adjustments' : 'a t -> bool
	    = fn self => set_scroll_adjustments_
			   (repr self) GObject.null GObject.null
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Adjustment *** */
/* ML type: real * real * real * real * real * real -> cptr */
EXTERNML value mgtk_gtk_adjustment_new(value mgtk_params) { /* ML */
    value valu = Field(mgtk_params, 0);
    value lower = Field(mgtk_params, 1);
    value upper = Field(mgtk_params, 2);
    value step_incr = Field(mgtk_params, 3);
    value page_incr = Field(mgtk_params, 4);
    value page_size = Field(mgtk_params, 5);
    return Val_GtkObj(gtk_adjustment_new(Double_val(valu), Double_val(lower), Double_val(upper), Double_val(step_incr), Double_val(page_incr), Double_val(page_size)));
}



/* *** Widget *** */
/* ML type: cptr -> cptr -> cptr -> bool */
EXTERNML value mgtk_gtk_widget_set_scroll_adjustments(value self, value hadjustment, value vadjustment) { /* ML */
    return Val_bool(gtk_widget_set_scroll_adjustments(GtkObj_val(self), GtkObj_val(hadjustment), GtkObj_val(vadjustment)));
}


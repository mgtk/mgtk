structure Gtk = struct
    signature Object = sig

        type base
        type 'a object_t
        type 'a t = 'a object_t GObject.t





        val inherit : 'a -> GObject.constructor -> 'a t

    end
    structure Object :> Object = struct

        type base = unit
        type 'a object_t = unit
        type 'a t = 'a object_t GObject.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = GObject.inherit () con
        fun makeObject ptr = GObject.inherit () (fn () => repr ptr)
    end
    signature Widget = sig

        type base
        type 'a widget_t
        type 'a t = 'a widget_t Object.t





        val inherit : 'a -> GObject.constructor -> 'a t

        val destroy : 'a Widget.t -> unit
        val show : 'a Widget.t -> unit
        val show_now : 'a Widget.t -> unit
        val hide : 'a Widget.t -> unit
        val show_all : 'a Widget.t -> unit
        val hide_all : 'a Widget.t -> unit
    end
    structure Widget :> Widget = struct

        type base = unit
        type 'a widget_t = unit
        type 'a t = 'a widget_t Object.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = Object.inherit () con
        fun makeWidget ptr = Object.inherit () (fn () => repr ptr)
        val destroy_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_destroy")
        val destroy : 'a Widget.t -> unit
            = fn self => destroy_ (repr self)
        val show_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_show")
        val show : 'a Widget.t -> unit
            = fn self => show_ (repr self)
        val show_now_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_show_now")
        val show_now : 'a Widget.t -> unit
            = fn self => show_now_ (repr self)
        val hide_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_hide")
        val hide : 'a Widget.t -> unit
            = fn self => hide_ (repr self)
        val show_all_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_show_all")
        val show_all : 'a Widget.t -> unit
            = fn self => show_all_ (repr self)
        val hide_all_ : cptr -> unit
            = app1 (symb"mgtk_gtk_widget_hide_all")
        val hide_all : 'a Widget.t -> unit
            = fn self => hide_all_ (repr self)
    end
    signature Container = sig

        type base
        type 'a container_t
        type 'a t = 'a container_t Widget.t





        val inherit : 'a -> GObject.constructor -> 'a t

        val set_border_width : 'a Container.t -> int -> unit
        val get_border_width : 'a Container.t -> int
        val add : 'a Container.t -> 'b Widget.t -> unit
        val remove : 'a Container.t -> 'b Widget.t -> unit
    end
    structure Container :> Container = struct

        type base = unit
        type 'a container_t = unit
        type 'a t = 'a container_t Widget.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = Widget.inherit () con
        fun makeContainer ptr = Widget.inherit () (fn () => repr ptr)
        val set_border_width_ : cptr -> int -> unit
            = app2 (symb"mgtk_gtk_container_set_border_width")
        val set_border_width : 'a Container.t -> int -> unit
            = fn self => fn border_width => set_border_width_ (repr self) border_width
        val get_border_width_ : cptr -> int
            = app1 (symb"mgtk_gtk_container_get_border_width")
        val get_border_width : 'a Container.t -> int
            = fn self => get_border_width_ (repr self)
        val add_ : cptr -> cptr -> unit
            = app2 (symb"mgtk_gtk_container_add")
        val add : 'a Container.t -> 'b Widget.t -> unit
            = fn self => fn widget => add_ (repr self) widget
        val remove_ : cptr -> cptr -> unit
            = app2 (symb"mgtk_gtk_container_remove")
        val remove : 'a Container.t -> 'b Widget.t -> unit
            = fn self => fn widget => remove_ (repr self) widget
    end
    signature Bin = sig

        type base
        type 'a bin_t
        type 'a t = 'a bin_t Container.t





        val inherit : 'a -> GObject.constructor -> 'a t

    end
    structure Bin :> Bin = struct

        type base = unit
        type 'a bin_t = unit
        type 'a t = 'a bin_t Container.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = Container.inherit () con
        fun makeBin ptr = Container.inherit () (fn () => repr ptr)
    end
    signature Window = sig

        type base
        type 'a window_t
        type 'a t = 'a window_t Bin.t





        val inherit : 'a -> GObject.constructor -> 'a t

        val new : WindowType -> 'a Widget.t
    end
    structure Window :> Window = struct

        type base = unit
        type 'a window_t = unit
        type 'a t = 'a window_t Bin.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = Bin.inherit () con
        fun makeWindow ptr = Bin.inherit () (fn () => repr ptr)
        val new_ : int -> cptr
            = app1 (symb"mgtk_gtk_window_new")
        val new : WindowType -> 'a Widget.t
            = fn wtype => new_ (repr wtype)
    end
    signature Button = sig

        type base
        type 'a button_t
        type 'a t = 'a button_t Bin.t





        val inherit : 'a -> GObject.constructor -> 'a t

        val get_type : unit -> int
        val new : unit -> 'a Widget.t
        val new_with_label : string -> 'a Widget.t
        val set_label : 'a Button.t -> string -> unit
        val get_label : 'a Button.t -> string
    end
    structure Button :> Button = struct

        type base = unit
        type 'a button_t = unit
        type 'a t = 'a button_t Bin.t
        open Dynlib
        type cptr = GObject.cptr
        val repr = GObject.repr
        val symb = GtkBasis.symb

        fun inherit w con = Bin.inherit () con
        fun makeButton ptr = Bin.inherit () (fn () => repr ptr)
        val get_type_ : unit -> int
            = app1 (symb"mgtk_gtk_button_get_type")
        val get_type : unit -> int
            = fn dummy => get_type_ dummy
        val new_ : unit -> cptr
            = app1 (symb"mgtk_gtk_button_new")
        val new : unit -> 'a Widget.t
            = fn dummy => new_ dummy
        val new_with_label_ : string -> cptr
            = app1 (symb"mgtk_gtk_button_new_with_label")
        val new_with_label : string -> 'a Widget.t
            = fn label => new_with_label_ label
        val set_label_ : cptr -> string -> unit
            = app2 (symb"mgtk_gtk_button_set_label")
        val set_label : 'a Button.t -> string -> unit
            = fn self => fn label => set_label_ (repr self) label
        val get_label_ : cptr -> string
            = app1 (symb"mgtk_gtk_button_get_label")
        val get_label : 'a Button.t -> string
            = fn self => get_label_ (repr self)
    end
    type windowtype = int
    val get_windowtype_ : unit -> int * int
        = app1 (symb"mgtk_get_gtk_windowtype")
    val (GTK_WINDOW_TOPLEVEL,GTK_WINDOW_POPUP) = get_windowtype_ ()
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */
/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_destroy(value self) { /* ML */
    gtk_widget_destroy(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show(value self) { /* ML */
    gtk_widget_show(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show_now(value self) { /* ML */
    gtk_widget_show_now(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_hide(value self) { /* ML */
    gtk_widget_hide(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show_all(value self) { /* ML */
    gtk_widget_show_all(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_hide_all(value self) { /* ML */
    gtk_widget_hide_all(GtkObj_val(self));
    return Val_unit;
}



/* *** Container *** */
/* ML type: cptr -> int -> unit */
EXTERNML value mgtk_gtk_container_set_border_width(value self, value border_width) { /* ML */
    gtk_container_set_border_width(GtkObj_val(self), Int_val(border_width));
    return Val_unit;
}

/* ML type: cptr -> int */
EXTERNML value mgtk_gtk_container_get_border_width(value self) { /* ML */
    return Val_int(gtk_container_get_border_width(GtkObj_val(self)));
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_container_add(value self, value widget) { /* ML */
    gtk_container_add(GtkObj_val(self), GtkObj_val(widget));
    return Val_unit;
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_container_remove(value self, value widget) { /* ML */
    gtk_container_remove(GtkObj_val(self), GtkObj_val(widget));
    return Val_unit;
}



/* *** Bin *** */


/* *** Window *** */
/* ML type: int -> cptr */
EXTERNML value mgtk_gtk_window_new(value wtype) { /* ML */
    return Val_GtkObj(gtk_window_new(Int_val(wtype)));
}



/* *** Button *** */
/* ML type: unit -> int */
EXTERNML value mgtk_gtk_button_get_type(value dummy) { /* ML */
    return Val_int(gtk_button_get_type());
}

/* ML type: unit -> cptr */
EXTERNML value mgtk_gtk_button_new(value dummy) { /* ML */
    return Val_GtkObj(gtk_button_new());
}

/* ML type: string -> cptr */
EXTERNML value mgtk_gtk_button_new_with_label(value label) { /* ML */
    return Val_GtkObj(gtk_button_new_with_label(String_val(label)));
}

/* ML type: cptr -> string -> unit */
EXTERNML value mgtk_gtk_button_set_label(value self, value label) { /* ML */
    gtk_button_set_label(GtkObj_val(self), String_val(label));
    return Val_unit;
}

/* ML type: cptr -> string */
EXTERNML value mgtk_gtk_button_get_label(value self) { /* ML */
    return my_copy_string(gtk_button_get_label(GtkObj_val(self)));
}

/* ML type: unit */
EXTERNML value mgtk_gtk_windowtype(value dummy) { /* ML */
  value res = alloc_tuple(2);
  Field(res, 0) = Val_int(GTK_WINDOW_TOPLEVEL);
  Field(res, 1) = Val_int(GTK_WINDOW_POPUP);
  return res;
}


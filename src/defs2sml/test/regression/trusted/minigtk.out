structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    signature Object = sig
	type base
	type 'a object_t
	type 'a t = 'a object_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toObject : 'a t -> base t
    end
    structure Object :> Object = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a object_t = unit
	type 'a t = 'a object_t GObject.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in GObject.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toObject obj = inherit () (fn () => repr obj)
    end
    signature Widget = sig
	type base
	type 'a widget_t
	type 'a t = 'a widget_t Object.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWidget : 'a t -> base t
	val destroy : 'a t -> unit
	val show : 'a t -> unit
	val show_now : 'a t -> unit
	val hide : 'a t -> unit
	val show_all : 'a t -> unit
	val hide_all : 'a t -> unit
	val delete_event_sig : (unit -> bool) -> 'a t Signal.signal
	val destroy_event_sig : (unit -> bool) -> 'a t Signal.signal
    end
    structure Widget :> Widget = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a widget_t = unit
	type 'a t = 'a widget_t Object.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Object.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWidget obj = inherit () (fn () => repr obj)
	val destroy_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_destroy")
	val destroy : 'a t -> unit = fn self => destroy_ (repr self)
	val show_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_show")
	val show : 'a t -> unit = fn self => show_ (repr self)
	val show_now_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_show_now")
	val show_now : 'a t -> unit = fn self => show_now_ (repr self)
	val hide_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_hide")
	val hide : 'a t -> unit = fn self => hide_ (repr self)
	val show_all_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_show_all")
	val show_all : 'a t -> unit = fn self => show_all_ (repr self)
	val hide_all_ : cptr -> unit = app1 (symb"mgtk_gtk_widget_hide_all")
	val hide_all : 'a t -> unit = fn self => hide_all_ (repr self)
	local open Signal
	      infixr -->
	in val delete_event_sig : (unit -> bool) -> 'a t Signal.signal
	       = fn f => signal "delete-event" false (unit --> return_bool) f
	   val destroy_event_sig : (unit -> bool) -> 'a t Signal.signal
	       = fn f => signal "destroy-event" false (unit --> return_bool) f
	end
    end
    signature Container = sig
	type base
	type 'a container_t
	type 'a t = 'a container_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toContainer : 'a t -> base t
	val set_border_width : 'a t -> int -> unit
	val get_border_width : 'a t -> int
	val add : 'a t -> 'b Widget.t -> unit
	val remove : 'a t -> 'b Widget.t -> unit
    end
    structure Container :> Container = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a container_t = unit
	type 'a t = 'a container_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toContainer obj = inherit () (fn () => repr obj)
	val set_border_width_ : cptr -> int -> unit
	    = app2 (symb"mgtk_gtk_container_set_border_width")
	val set_border_width : 'a t -> int -> unit
	    = fn self => fn border_width =>
		 set_border_width_ (repr self) border_width
	val get_border_width_ : cptr -> int
	    = app1 (symb"mgtk_gtk_container_get_border_width")
	val get_border_width : 'a t -> int
	    = fn self => get_border_width_ (repr self)
	val add_ : cptr -> cptr -> unit = app2 (symb"mgtk_gtk_container_add")
	val add : 'a t -> 'b Widget.t -> unit
	    = fn self => fn widget => add_ (repr self) (repr widget)
	val remove_ : cptr -> cptr -> unit
	    = app2 (symb"mgtk_gtk_container_remove")
	val remove : 'a t -> 'b Widget.t -> unit
	    = fn self => fn widget => remove_ (repr self) (repr widget)
    end
    signature Bin = sig
	type base
	type 'a bin_t
	type 'a t = 'a bin_t Container.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toBin : 'a t -> base t
    end
    structure Bin :> Bin = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a bin_t = unit
	type 'a t = 'a bin_t Container.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Container.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toBin obj = inherit () (fn () => repr obj)
    end
    signature Window = sig
	type base
	type 'a window_t
	type 'a t = 'a window_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toWindow : 'a t -> base t
	type type_t
	val TOPLEVEL : type_t
	val POPUP : type_t
	val new : type_t option -> base t
	val new' : unit -> base t
    end
    structure Window :> Window = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a window_t = unit
	type 'a t = 'a window_t Bin.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Bin.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toWindow obj = inherit () (fn () => repr obj)
	type type_t = int
	val get_type_t_ : unit -> int * int
	    = app1 (symb"mgtk_get_gtk_window_type")
	val (TOPLEVEL, POPUP) = get_type_t_ ()
	val new_ : int -> cptr = app1 (symb"mgtk_gtk_window_new")
	val new : type_t option -> base t
	    = fn typ => make (new_ (getOpt (typ, TOPLEVEL)))
	val new' : unit -> base t = fn dummy => make (new_ TOPLEVEL)
    end
    signature Button = sig
	type base
	type 'a button_t
	type 'a t = 'a button_t Bin.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toButton : 'a t -> base t
	val get_type : unit -> int
	val new : unit -> base t
	val new_with_label : string -> base t
	val set_label : 'a t -> string -> unit
	val get_label : 'a t -> string
	val clicked_sig : (unit -> unit) -> 'a t Signal.signal
    end
    structure Button :> Button = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a button_t = unit
	type 'a t = 'a button_t Bin.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Bin.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toButton obj = inherit () (fn () => repr obj)
	val get_type_ : unit -> int = app1 (symb"mgtk_gtk_button_get_type")
	val get_type : unit -> int = fn dummy => get_type_ dummy
	val new_ : unit -> cptr = app1 (symb"mgtk_gtk_button_new")
	val new : unit -> base t = fn dummy => make (new_ dummy)
	val new_with_label_ : string -> cptr
	    = app1 (symb"mgtk_gtk_button_new_with_label")
	val new_with_label : string -> base t
	    = fn label => make (new_with_label_ label)
	val set_label_ : cptr -> string -> unit
	    = app2 (symb"mgtk_gtk_button_set_label")
	val set_label : 'a t -> string -> unit
	    = fn self => fn label => set_label_ (repr self) label
	val get_label_ : cptr -> string
	    = app1 (symb"mgtk_gtk_button_get_label")
	val get_label : 'a t -> string = fn self => get_label_ (repr self)
	local open Signal
	      infixr -->
	in val clicked_sig : (unit -> unit) -> 'a t Signal.signal
	       = fn f => signal "clicked" false (void --> return_void) f
	end
    end
    signature Editable = sig
	type base
	type 'a editable_t
	type 'a t = 'a editable_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEditable : 'a t -> base t
	val get_chars : 'a t -> int -> int -> string
    end
    structure Editable :> Editable = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a editable_t = unit
	type 'a t = 'a editable_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toEditable obj = inherit () (fn () => repr obj)
	val get_chars_ : cptr -> int -> int -> string
	    = app3 (symb"mgtk_gtk_editable_get_chars")
	val get_chars : 'a t -> int -> int -> string
	    = fn self => fn start_pos => fn end_pos =>
		 get_chars_ (repr self) start_pos end_pos
    end
    signature CellEditable = sig
	type base
	type 'a celleditable_t
	type 'a t = 'a celleditable_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toCellEditable : 'a t -> base t
    end
    structure CellEditable :> CellEditable = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a celleditable_t = unit
	type 'a t = 'a celleditable_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toCellEditable obj = inherit () (fn () => repr obj)
    end
    signature Entry = sig
	type base
	type 'a entry_t
	type 'a t = 'a entry_t Editable.t CellEditable.t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toEntry : 'a t -> base t
	val get_text : 'a t -> string
    end
    structure Entry :> Entry = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a entry_t = unit
	type 'a t = 'a entry_t Editable.t CellEditable.t Widget.t
	fun inherit w con
	  = let val con = let val ptr = con () in fn () => ptr end
		val witness = ()
		val witness = Editable.inherit witness con
		val witness = CellEditable.inherit witness con
	    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toEntry obj = inherit () (fn () => repr obj)
	val get_text_ : cptr -> string = app1 (symb"mgtk_gtk_entry_get_text")
	val get_text : 'a t -> string = fn self => get_text_ (repr self)
    end
    signature Misc = sig
	type base
	type 'a misc_t
	type 'a t = 'a misc_t Widget.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toMisc : 'a t -> base t
    end
    structure Misc :> Misc = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a misc_t = unit
	type 'a t = 'a misc_t Widget.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Widget.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toMisc obj = inherit () (fn () => repr obj)
    end
    signature Label = sig
	type base
	type 'a label_t
	type 'a t = 'a label_t Misc.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toLabel : 'a t -> base t
	val new : string option -> base t
	val new' : unit -> base t
    end
    structure Label :> Label = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a label_t = unit
	type 'a t = 'a label_t Misc.t
	fun inherit w con = let val con = let val ptr = con ()
					  in fn () => ptr end
				val witness = ()
			    in Misc.inherit witness con end
	fun make ptr = inherit () (fn () => ptr)
	fun toLabel obj = inherit () (fn () => repr obj)
	val new_ : string -> cptr = app1 (symb"mgtk_gtk_label_new")
	val new : string option -> base t
	    = fn str => make (new_ (getOpt (str, "")))
	val new' : unit -> base t = fn dummy => make (new_ "")
    end
end


/* *** Gtk *** */


/* *** Object *** */


/* *** Widget *** */
/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_destroy(value self) { /* ML */
    gtk_widget_destroy(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show(value self) { /* ML */
    gtk_widget_show(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show_now(value self) { /* ML */
    gtk_widget_show_now(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_hide(value self) { /* ML */
    gtk_widget_hide(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_show_all(value self) { /* ML */
    gtk_widget_show_all(GtkObj_val(self));
    return Val_unit;
}

/* ML type: cptr -> unit */
EXTERNML value mgtk_gtk_widget_hide_all(value self) { /* ML */
    gtk_widget_hide_all(GtkObj_val(self));
    return Val_unit;
}



/* *** Container *** */
/* ML type: cptr -> int -> unit */
EXTERNML value mgtk_gtk_container_set_border_width(value self, value border_width) { /* ML */
    gtk_container_set_border_width(GtkObj_val(self), Int_val(border_width));
    return Val_unit;
}

/* ML type: cptr -> int */
EXTERNML value mgtk_gtk_container_get_border_width(value self) { /* ML */
    return Val_int(gtk_container_get_border_width(GtkObj_val(self)));
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_container_add(value self, value widget) { /* ML */
    gtk_container_add(GtkObj_val(self), GtkObj_val(widget));
    return Val_unit;
}

/* ML type: cptr -> cptr -> unit */
EXTERNML value mgtk_gtk_container_remove(value self, value widget) { /* ML */
    gtk_container_remove(GtkObj_val(self), GtkObj_val(widget));
    return Val_unit;
}



/* *** Bin *** */


/* *** Window *** */
/* ML type: unit */
EXTERNML value mgtk_get_gtk_window_type(value dummy) { /* ML */
    value res = alloc_tuple(2);
    Field(res, 0) = Val_int(GTK_WINDOW_TOPLEVEL);
    Field(res, 1) = Val_int(GTK_WINDOW_POPUP);
    return res;
}

/* ML type: int -> cptr */
EXTERNML value mgtk_gtk_window_new(value type) { /* ML */
    return Val_GtkObj(gtk_window_new(Int_val(type)));
}



/* *** Button *** */
/* ML type: unit -> int */
EXTERNML value mgtk_gtk_button_get_type(value dummy) { /* ML */
    return Val_int(gtk_button_get_type());
}

/* ML type: unit -> cptr */
EXTERNML value mgtk_gtk_button_new(value dummy) { /* ML */
    return Val_GtkObj(gtk_button_new());
}

/* ML type: string -> cptr */
EXTERNML value mgtk_gtk_button_new_with_label(value label) { /* ML */
    return Val_GtkObj(gtk_button_new_with_label(String_val(label)));
}

/* ML type: cptr -> string -> unit */
EXTERNML value mgtk_gtk_button_set_label(value self, value label) { /* ML */
    gtk_button_set_label(GtkObj_val(self), String_val(label));
    return Val_unit;
}

/* ML type: cptr -> string */
EXTERNML value mgtk_gtk_button_get_label(value self) { /* ML */
    return my_copy_string(gtk_button_get_label(GtkObj_val(self)));
}



/* *** Editable *** */
/* ML type: cptr -> int -> int -> string */
EXTERNML value mgtk_gtk_editable_get_chars(value self, value start_pos, value end_pos) { /* ML */
    return my_copy_string(gtk_editable_get_chars(GtkObj_val(self), Int_val(start_pos), Int_val(end_pos)));
}



/* *** CellEditable *** */


/* *** Entry *** */
/* ML type: cptr -> string */
EXTERNML value mgtk_gtk_entry_get_text(value self) { /* ML */
    return my_copy_string(gtk_entry_get_text(GtkObj_val(self)));
}



/* *** Misc *** */


/* *** Label *** */
/* ML type: string -> cptr */
EXTERNML value mgtk_gtk_label_new(value str) { /* ML */
    return Val_GtkObj(gtk_label_new(String_val(str)));
}


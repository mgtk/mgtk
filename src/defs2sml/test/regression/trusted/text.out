structure Gtk  = struct
    
    open Dynlib
    type cptr = GObject.cptr
    val repr = GObject.repr
    val symb = GtkBasis.symb
    structure TextIter :>
      sig
	type t = GObject.cptr
	type base
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type t = GObject.cptr
	type base = unit
    end
    structure TextBuffer :>
      sig
	type base
	type 'a textbuffer_t
	type 'a t = 'a textbuffer_t GObject.t
	val inherit : 'a -> GObject.constructor -> 'a t
	val toTextBuffer : 'a t -> base t
	val insert : 'a t -> TextIter.t -> string -> int -> unit
	val insert' : 'a t -> TextIter.t -> string -> unit
      end = struct
	open Dynlib
	type cptr = GObject.cptr
	val repr = GObject.repr
	val symb = GtkBasis.symb
	type base = unit
	type 'a textbuffer_t = unit
	type 'a t = 'a textbuffer_t GObject.t
	fun inherit w con = GObject.inherit () con
	fun make ptr = inherit () (fn () => ptr)
	fun toTextBuffer obj = inherit () (fn () => repr obj)
	val insert_ : cptr -> cptr -> string -> int -> unit
	    = app4 (symb"mgtk_gtk_text_buffer_insert")
	val insert : 'a t -> TextIter.t -> string -> int -> unit
	    = fn self => fn iter => fn text => fn len =>
		 insert_ (repr self) iter text len
	val insert' : 'a t -> TextIter.t -> string -> unit
	    = fn self => fn iter => fn text => insert_ (repr self) iter text ~1
    end
end


/* *** Gtk *** */


/* *** TextIter *** */
#define GtkTextIter_val(x) (((void*) Field(x, 1)))

#define GtkTextIter_val_nocast(x) (Field(x, 1))

static void ml_finalize_GtkTextIter(value val) {
    gtk_text_iter_free(GtkTextIter_val(val));
}

value Val_GtkTextIter(void* obj) {
    value res;
    res = alloc_final(2, ml_finalize_GtkTextIter, 0, 1);
    GtkTextIter_val_nocast(res) = (value) gtk_text_iter_copy(obj);
    return res;
}



/* *** TextBuffer *** */
/* ML type: cptr -> cptr -> string -> int -> unit */
EXTERNML value mgtk_gtk_text_buffer_insert(value self, value iter, value text, value len) { /* ML */
    gtk_text_buffer_insert(GtkObj_val(self), GtkTextIter_val(iter), String_val(text), Int_val(len));
    return Val_unit;
}


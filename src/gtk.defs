; -*- scheme -*-

; Major changes by Henning:
; + changed return types of all _new functions to
;   give the right type.
; + changed widget types of many fields to ensure
;   the most type propagation
; + rearranged some objects to allow for sequential
;   processing
; + added specification of signals

; These are snarfed from the GTK distribution.  It needs to be updated from
; time to time
; (include "gtkenums.defs")
; generated by makeenums.pl


; To search in this file, rely on the following convention
; * comments (like this stuff) are always preceded by only 
;   a single `;' character
; * stuff to think about that is also marked as such in the
;   original pyGtk file have double `;''s
; * stuff that Henning wants to reconsider have triple `;''s

(define-func gtk_check_version
  string
  ((uint required_major)
   (uint required_minor)
   (uint required_micro)))

(define-func gtk_exit
  none
  ((int error_code)))

; enumerations generated by
; grep _get_type *.h | grep "#define" | grep -v GTK_CHECK | awk '{ printf "   (%s %s)\n", tolower(substr($2, 10)), $2 }' >! ~/gtktype.defs
; ugly hack to avoid complications: call it GtkGtkType :-)

;(define-enum GtkGtkType
;   (accel_label GTK_TYPE_ACCEL_LABEL)
;   (adjustment GTK_TYPE_ADJUSTMENT)
;   (alignment GTK_TYPE_ALIGNMENT)
;   (arrow GTK_TYPE_ARROW)
;   (aspect_frame GTK_TYPE_ASPECT_FRAME)
;   (button_box GTK_TYPE_BUTTON_BOX)
;   (bin GTK_TYPE_BIN)
;   (box GTK_TYPE_BOX)
;   (button GTK_TYPE_BUTTON)
;   (calendar GTK_TYPE_CALENDAR)
;   (check_button GTK_TYPE_CHECK_BUTTON)
;   (check_menu_item GTK_TYPE_CHECK_MENU_ITEM)
;   (clist GTK_TYPE_CLIST)
;   (color_selection GTK_TYPE_COLOR_SELECTION)
;   (color_selection_dialog GTK_TYPE_COLOR_SELECTION_DIALOG)
;   (container GTK_TYPE_CONTAINER)
;   (ctree GTK_TYPE_CTREE)
;   (curve GTK_TYPE_CURVE)
;   (data GTK_TYPE_DATA)
;   (dialog GTK_TYPE_DIALOG)
;   (drawing_area GTK_TYPE_DRAWING_AREA)
;   (editable GTK_TYPE_EDITABLE)
;   (entry GTK_TYPE_ENTRY)
;   (event_box GTK_TYPE_EVENT_BOX)
;   (file_selection GTK_TYPE_FILE_SELECTION)
;   (fixed GTK_TYPE_FIXED)
;   (font_selection GTK_TYPE_FONT_SELECTION)
;   (font_selection_dialog GTK_TYPE_FONT_SELECTION_DIALOG)
;   (frame GTK_TYPE_FRAME)
;   (handle_box GTK_TYPE_HANDLE_BOX)
;   (hbox GTK_TYPE_HBOX)
;   (hscale GTK_TYPE_HSCALE)
;   (hscrollbar GTK_TYPE_HSCROLLBAR)
;   (hseparator GTK_TYPE_HSEPARATOR)
;   (image GTK_TYPE_IMAGE)
;   (input_dialog GTK_TYPE_INPUT_DIALOG)
;;;;   (invisible GTK_TYPE_INVISIBLE)
;   (item GTK_TYPE_ITEM)
;   (item_factory GTK_TYPE_ITEM_FACTORY)
;   (label GTK_TYPE_LABEL)
;   (layout GTK_TYPE_LAYOUT)
;   (list GTK_TYPE_LIST)
;   (list_item GTK_TYPE_LIST_ITEM)
;   (menu GTK_TYPE_MENU)
;   (menu_bar GTK_TYPE_MENU_BAR)
;   (menu_item GTK_TYPE_MENU_ITEM)
;   (menu_shell GTK_TYPE_MENU_SHELL)
;   (misc GTK_TYPE_MISC)
;   (notebook GTK_TYPE_NOTEBOOK)
;   (option_menu GTK_TYPE_OPTION_MENU)
;   (packer GTK_TYPE_PACKER)
;   (paned GTK_TYPE_PANED)
;   (pixmap GTK_TYPE_PIXMAP)
;   (preview GTK_TYPE_PREVIEW)
;   (progress GTK_TYPE_PROGRESS)
;   (progress_bar GTK_TYPE_PROGRESS_BAR)
;   (radio_button GTK_TYPE_RADIO_BUTTON)
;   (radio_menu_item GTK_TYPE_RADIO_MENU_ITEM)
;   (range GTK_TYPE_RANGE)
;   (ruler GTK_TYPE_RULER)
;   (scale GTK_TYPE_SCALE)
;   (scrollbar GTK_TYPE_SCROLLBAR)
;   (scrolled_window GTK_TYPE_SCROLLED_WINDOW)
;   (separator GTK_TYPE_SEPARATOR)
;   (spin_button GTK_TYPE_SPIN_BUTTON)
;   (table GTK_TYPE_TABLE)
;   (tearoff_menu_item GTK_TYPE_TEAROFF_MENU_ITEM)
;   (text GTK_TYPE_TEXT)
;   (tips_query GTK_TYPE_TIPS_QUERY)
;   (toggle_button GTK_TYPE_TOGGLE_BUTTON)
;   (toolbar GTK_TYPE_TOOLBAR)
;   (tooltips GTK_TYPE_TOOLTIPS)
;   (tree GTK_TYPE_TREE)
;   (tree_item GTK_TYPE_TREE_ITEM)
;   (identifier GTK_TYPE_IDENTIFIER)
;   (vbox GTK_TYPE_VBOX)
;   (viewport GTK_TYPE_VIEWPORT)
;   (vscale GTK_TYPE_VSCALE)
;   (vscrollbar GTK_TYPE_VSCROLLBAR)
;   (vseparator GTK_TYPE_VSEPARATOR)
;   (widget GTK_TYPE_WIDGET)
;   (window GTK_TYPE_WINDOW)
;   )

; enumerations from "gtkaccelgroup.h"

(define-flags GtkAccelFlags
   (visible GTK_ACCEL_VISIBLE)
   (signal-visible GTK_ACCEL_SIGNAL_VISIBLE)
   (locked GTK_ACCEL_LOCKED)
   (mask GTK_ACCEL_MASK))

; enumerations from "gtkcalendar.h"

(define-flags GtkCalendarDisplayOptions
   (show-heading GTK_CALENDAR_SHOW_HEADING)
   (show-day-names GTK_CALENDAR_SHOW_DAY_NAMES)
   (no-month-change GTK_CALENDAR_NO_MONTH_CHANGE)
   (show-week-numbers GTK_CALENDAR_SHOW_WEEK_NUMBERS)
   (week-start-monday GTK_CALENDAR_WEEK_START_MONDAY))

; enumerations from "gtkclist.h"

(define-enum GtkCellType
   (empty GTK_CELL_EMPTY)
   (text GTK_CELL_TEXT)
   (pixmap GTK_CELL_PIXMAP)
   (pixtext GTK_CELL_PIXTEXT)
   (widget GTK_CELL_WIDGET))

(define-enum GtkCListDragPos
   (none GTK_CLIST_DRAG_NONE)
   (before GTK_CLIST_DRAG_BEFORE)
   (into GTK_CLIST_DRAG_INTO)
   (after GTK_CLIST_DRAG_AFTER))

(define-flags GtkButtonAction
   (ignored GTK_BUTTON_IGNORED)
   (selects GTK_BUTTON_SELECTS)
   (drags GTK_BUTTON_DRAGS)
   (expands GTK_BUTTON_EXPANDS))

; enumerations from "gtkctree.h"

(define-enum GtkCTreePos
   (before GTK_CTREE_POS_BEFORE)
   (as-child GTK_CTREE_POS_AS_CHILD)
   (after GTK_CTREE_POS_AFTER))

(define-enum GtkCTreeLineStyle
   (none GTK_CTREE_LINES_NONE)
   (solid GTK_CTREE_LINES_SOLID)
   (dotted GTK_CTREE_LINES_DOTTED)
   (tabbed GTK_CTREE_LINES_TABBED))

(define-enum GtkCTreeExpanderStyle
   (none GTK_CTREE_EXPANDER_NONE)
   (square GTK_CTREE_EXPANDER_SQUARE)
   (triangle GTK_CTREE_EXPANDER_TRIANGLE)
   (circular GTK_CTREE_EXPANDER_CIRCULAR))

(define-enum GtkCTreeExpansionType
   (expand GTK_CTREE_EXPANSION_EXPAND)
   (expand-recursive GTK_CTREE_EXPANSION_EXPAND_RECURSIVE)
   (collapse GTK_CTREE_EXPANSION_COLLAPSE)
   (collapse-recursive GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE)
   (toggle GTK_CTREE_EXPANSION_TOGGLE)
   (toggle-recursive GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE))

; enumerations from "gtkdebug.h"

(define-flags GtkDebugFlag
   (objects GTK_DEBUG_OBJECTS)
   (misc GTK_DEBUG_MISC)
   (signals GTK_DEBUG_SIGNALS)
   (dnd GTK_DEBUG_DND))

; enumerations from "gtkdnd.h"

(define-flags GtkDestDefaults
   (motion GTK_DEST_DEFAULT_MOTION)
   (highlight GTK_DEST_DEFAULT_HIGHLIGHT)
   (drop GTK_DEST_DEFAULT_DROP)
   (all GTK_DEST_DEFAULT_ALL))

(define-flags GtkTargetFlags
   (same-app GTK_TARGET_SAME_APP)
   (same-widget GTK_TARGET_SAME_WIDGET))

; enumerations from "gtkenums.h"

(define-enum GtkArrowType
   (up GTK_ARROW_UP)
   (down GTK_ARROW_DOWN)
   (left GTK_ARROW_LEFT)
   (right GTK_ARROW_RIGHT))

(define-flags GtkAttachOptions
   (expand GTK_EXPAND)
   (shrink GTK_SHRINK)
   (fill GTK_FILL))

(define-enum GtkButtonBoxStyle
   (default-style GTK_BUTTONBOX_DEFAULT_STYLE)
   (spread GTK_BUTTONBOX_SPREAD)
   (edge GTK_BUTTONBOX_EDGE)
   (start GTK_BUTTONBOX_START)
   (end GTK_BUTTONBOX_END))

(define-enum GtkCurveType
   (linear GTK_CURVE_TYPE_LINEAR)
   (spline GTK_CURVE_TYPE_SPLINE)
   (free GTK_CURVE_TYPE_FREE))

(define-enum GtkDirectionType
   (tab-forward GTK_DIR_TAB_FORWARD)
   (tab-backward GTK_DIR_TAB_BACKWARD)
   (up GTK_DIR_UP)
   (down GTK_DIR_DOWN)
   (left GTK_DIR_LEFT)
   (right GTK_DIR_RIGHT))

(define-enum GtkJustification
   (left GTK_JUSTIFY_LEFT)
   (right GTK_JUSTIFY_RIGHT)
   (center GTK_JUSTIFY_CENTER)
   (fill GTK_JUSTIFY_FILL))

(define-enum GtkMatchType
   (all GTK_MATCH_ALL)
   (all-tail GTK_MATCH_ALL_TAIL)
   (head GTK_MATCH_HEAD)
   (tail GTK_MATCH_TAIL)
   (exact GTK_MATCH_EXACT)
   (last GTK_MATCH_LAST))

(define-enum GtkMenuDirectionType
   (parent GTK_MENU_DIR_PARENT)
   (child GTK_MENU_DIR_CHILD)
   (next GTK_MENU_DIR_NEXT)
   (prev GTK_MENU_DIR_PREV))

(define-enum GtkMenuFactoryType
   (menu GTK_MENU_FACTORY_MENU)
   (menu-bar GTK_MENU_FACTORY_MENU_BAR)
   (option-menu GTK_MENU_FACTORY_OPTION_MENU))

(define-enum GtkMetricType
   (pixels GTK_PIXELS)
   (inches GTK_INCHES)
   (centimeters GTK_CENTIMETERS))

(define-enum GtkOrientation
   (horizontal GTK_ORIENTATION_HORIZONTAL)
   (vertical GTK_ORIENTATION_VERTICAL))

(define-enum GtkCornerType
   (top-left GTK_CORNER_TOP_LEFT)
   (bottom-left GTK_CORNER_BOTTOM_LEFT)
   (top-right GTK_CORNER_TOP_RIGHT)
   (bottom-right GTK_CORNER_BOTTOM_RIGHT))

(define-enum GtkPackType
   (start GTK_PACK_START)
   (end GTK_PACK_END))

(define-enum GtkPathPriorityType
   (lowest GTK_PATH_PRIO_LOWEST)
   (gtk GTK_PATH_PRIO_GTK)
   (application GTK_PATH_PRIO_APPLICATION)
   (rc GTK_PATH_PRIO_RC)
   (highest GTK_PATH_PRIO_HIGHEST)
   (mask GTK_PATH_PRIO_MASK))

(define-enum GtkPathType
   (widget GTK_PATH_WIDGET)
   (widget-class GTK_PATH_WIDGET_CLASS)
   (class GTK_PATH_CLASS))

(define-enum GtkPolicyType
   (always GTK_POLICY_ALWAYS)
   (automatic GTK_POLICY_AUTOMATIC)
   (never GTK_POLICY_NEVER))

(define-enum GtkPositionType
   (left GTK_POS_LEFT)
   (right GTK_POS_RIGHT)
   (top GTK_POS_TOP)
   (bottom GTK_POS_BOTTOM))

(define-enum GtkPreviewType
   (color GTK_PREVIEW_COLOR)
   (grayscale GTK_PREVIEW_GRAYSCALE))

(define-enum GtkReliefStyle
   (normal GTK_RELIEF_NORMAL)
   (half GTK_RELIEF_HALF)
   (none GTK_RELIEF_NONE))

(define-enum GtkResizeMode
   (parent GTK_RESIZE_PARENT)
   (queue GTK_RESIZE_QUEUE)
   (immediate GTK_RESIZE_IMMEDIATE))

(define-flags GtkSignalRunType
   (first GTK_RUN_FIRST)
   (last GTK_RUN_LAST)
   (both GTK_RUN_BOTH)
   (no-recurse GTK_RUN_NO_RECURSE)
   (action GTK_RUN_ACTION)
   (no-hooks GTK_RUN_NO_HOOKS))

(define-enum GtkScrollType
   (none GTK_SCROLL_NONE)
   (step-backward GTK_SCROLL_STEP_BACKWARD)
   (step-forward GTK_SCROLL_STEP_FORWARD)
   (page-backward GTK_SCROLL_PAGE_BACKWARD)
   (page-forward GTK_SCROLL_PAGE_FORWARD)
   (jump GTK_SCROLL_JUMP))

(define-enum GtkSelectionMode
   (single GTK_SELECTION_SINGLE)
   (browse GTK_SELECTION_BROWSE)
   (multiple GTK_SELECTION_MULTIPLE)
   (extended GTK_SELECTION_EXTENDED))

(define-enum GtkShadowType
   (none GTK_SHADOW_NONE)
   (in GTK_SHADOW_IN)
   (out GTK_SHADOW_OUT)
   (etched-in GTK_SHADOW_ETCHED_IN)
   (etched-out GTK_SHADOW_ETCHED_OUT))

(define-enum GtkStateType
   (normal GTK_STATE_NORMAL)
   (active GTK_STATE_ACTIVE)
   (prelight GTK_STATE_PRELIGHT)
   (selected GTK_STATE_SELECTED)
   (insensitive GTK_STATE_INSENSITIVE))

(define-enum GtkSubmenuDirection
   (left GTK_DIRECTION_LEFT)
   (right GTK_DIRECTION_RIGHT))

(define-enum GtkSubmenuPlacement
   (top-bottom GTK_TOP_BOTTOM)
   (left-right GTK_LEFT_RIGHT))

(define-enum GtkToolbarStyle
   (icons GTK_TOOLBAR_ICONS)
   (text GTK_TOOLBAR_TEXT)
   (both GTK_TOOLBAR_BOTH))

(define-enum GtkTroughType
   (none GTK_TROUGH_NONE)
   (start GTK_TROUGH_START)
   (end GTK_TROUGH_END)
   (jump GTK_TROUGH_JUMP))

(define-enum GtkUpdateType
   (continuous GTK_UPDATE_CONTINUOUS)
   (discontinuous GTK_UPDATE_DISCONTINUOUS)
   (delayed GTK_UPDATE_DELAYED))

(define-enum GtkVisibility
   (none GTK_VISIBILITY_NONE)
   (partial GTK_VISIBILITY_PARTIAL)
   (full GTK_VISIBILITY_FULL))

(define-enum GtkWindowPosition
   (none GTK_WIN_POS_NONE)
   (center GTK_WIN_POS_CENTER)
   (mouse GTK_WIN_POS_MOUSE))

(define-enum GtkWindowType
   (toplevel GTK_WINDOW_TOPLEVEL)
   (dialog GTK_WINDOW_DIALOG)
   (popup GTK_WINDOW_POPUP))

(define-enum GtkSortType
   (ascending GTK_SORT_ASCENDING)
   (descending GTK_SORT_DESCENDING))

; enumerations from "gtkfontsel.h"

(define-enum GtkFontMetricType
   (pixels GTK_FONT_METRIC_PIXELS)
   (points GTK_FONT_METRIC_POINTS))

(define-flags GtkFontType
   (bitmap GTK_FONT_BITMAP)
   (scalable GTK_FONT_SCALABLE)
   (scalable-bitmap GTK_FONT_SCALABLE_BITMAP)
   (all GTK_FONT_ALL))

(define-enum GtkFontFilterType
   (base GTK_FONT_FILTER_BASE)
   (user GTK_FONT_FILTER_USER))

; enumerations from "gtkobject.h"

(define-flags GtkObjectFlags
   (destroyed GTK_DESTROYED)
   (floating GTK_FLOATING)
   (connected GTK_CONNECTED)
   (constructed GTK_CONSTRUCTED))

(define-flags GtkArgFlags
   (readable GTK_ARG_READABLE)
   (writable GTK_ARG_WRITABLE)
   (construct GTK_ARG_CONSTRUCT)
   (construct-only GTK_ARG_CONSTRUCT_ONLY)
   (child-arg GTK_ARG_CHILD_ARG)
   (mask GTK_ARG_MASK)
   (readwrite GTK_ARG_READWRITE))

; enumerations from "gtkpacker.h"

(define-flags GtkPackerOptions
   (expand GTK_PACK_EXPAND)
   (fill-x GTK_FILL_X)
   (fill-y GTK_FILL_Y))

(define-enum GtkSideType
   (top GTK_SIDE_TOP)
   (bottom GTK_SIDE_BOTTOM)
   (left GTK_SIDE_LEFT)
   (right GTK_SIDE_RIGHT))

(define-enum GtkAnchorType
   (center GTK_ANCHOR_CENTER)
   (north GTK_ANCHOR_NORTH)
   (north-west GTK_ANCHOR_NORTH_WEST)
   (north-east GTK_ANCHOR_NORTH_EAST)
   (south GTK_ANCHOR_SOUTH)
   (south-west GTK_ANCHOR_SOUTH_WEST)
   (south-east GTK_ANCHOR_SOUTH_EAST)
   (west GTK_ANCHOR_WEST)
   (east GTK_ANCHOR_EAST)
   (n GTK_ANCHOR_N)
   (nw GTK_ANCHOR_NW)
   (ne GTK_ANCHOR_NE)
   (s GTK_ANCHOR_S)
   (sw GTK_ANCHOR_SW)
   (se GTK_ANCHOR_SE)
   (w GTK_ANCHOR_W)
   (e GTK_ANCHOR_E))

; enumerations from "gtkprivate.h"

;;; Removed!

; enumerations from "gtkprogressbar.h"

(define-enum GtkProgressBarStyle
   (continuous GTK_PROGRESS_CONTINUOUS)
   (discrete GTK_PROGRESS_DISCRETE))

(define-enum GtkProgressBarOrientation
   (left-to-right GTK_PROGRESS_LEFT_TO_RIGHT)
   (right-to-left GTK_PROGRESS_RIGHT_TO_LEFT)
   (bottom-to-top GTK_PROGRESS_BOTTOM_TO_TOP)
   (top-to-bottom GTK_PROGRESS_TOP_TO_BOTTOM))

; enumerations from "gtkrc.h"

(define-flags GtkRcFlags
   (fg GTK_RC_FG)
   (bg GTK_RC_BG)
   (text GTK_RC_TEXT)
   (base GTK_RC_BASE))

(define-enum GtkRcTokenType
   (invalid GTK_RC_TOKEN_INVALID)
   (include GTK_RC_TOKEN_INCLUDE)
   (normal GTK_RC_TOKEN_NORMAL)
   (active GTK_RC_TOKEN_ACTIVE)
   (prelight GTK_RC_TOKEN_PRELIGHT)
   (selected GTK_RC_TOKEN_SELECTED)
   (insensitive GTK_RC_TOKEN_INSENSITIVE)
   (fg GTK_RC_TOKEN_FG)
   (bg GTK_RC_TOKEN_BG)
   (base GTK_RC_TOKEN_BASE)
   (text GTK_RC_TOKEN_TEXT)
   (font GTK_RC_TOKEN_FONT)
   (fontset GTK_RC_TOKEN_FONTSET)
   (bg-pixmap GTK_RC_TOKEN_BG_PIXMAP)
   (pixmap-path GTK_RC_TOKEN_PIXMAP_PATH)
   (style GTK_RC_TOKEN_STYLE)
   (binding GTK_RC_TOKEN_BINDING)
   (bind GTK_RC_TOKEN_BIND)
   (widget GTK_RC_TOKEN_WIDGET)
   (widget-class GTK_RC_TOKEN_WIDGET_CLASS)
   (class GTK_RC_TOKEN_CLASS)
   (lowest GTK_RC_TOKEN_LOWEST)
   (gtk GTK_RC_TOKEN_GTK)
   (application GTK_RC_TOKEN_APPLICATION)
   (rc GTK_RC_TOKEN_RC)
   (highest GTK_RC_TOKEN_HIGHEST)
   (engine GTK_RC_TOKEN_ENGINE)
   (module-path GTK_RC_TOKEN_MODULE_PATH)
   (last GTK_RC_TOKEN_LAST))

; enumerations from "gtkspinbutton.h"

(define-enum GtkSpinButtonUpdatePolicy
   (always GTK_UPDATE_ALWAYS)
   (if-valid GTK_UPDATE_IF_VALID))

(define-enum GtkSpinType
   (step-forward GTK_SPIN_STEP_FORWARD)
   (step-backward GTK_SPIN_STEP_BACKWARD)
   (page-forward GTK_SPIN_PAGE_FORWARD)
   (page-backward GTK_SPIN_PAGE_BACKWARD)
   (home GTK_SPIN_HOME)
   (end GTK_SPIN_END)
   (user-defined GTK_SPIN_USER_DEFINED))

; enumerations from "gtktoolbar.h"

(define-enum GtkToolbarChildType
   (space GTK_TOOLBAR_CHILD_SPACE)
   (button GTK_TOOLBAR_CHILD_BUTTON)
   (togglebutton GTK_TOOLBAR_CHILD_TOGGLEBUTTON)
   (radiobutton GTK_TOOLBAR_CHILD_RADIOBUTTON)
   (widget GTK_TOOLBAR_CHILD_WIDGET))

(define-enum GtkToolbarSpaceStyle
   (empty GTK_TOOLBAR_SPACE_EMPTY)
   (line GTK_TOOLBAR_SPACE_LINE))

; enumerations from "gtktree.h"

(define-enum GtkTreeViewMode
   (line GTK_TREE_VIEW_LINE)
   (item GTK_TREE_VIEW_ITEM))

; enumerations from "gtktypeutils.h"

(define-enum GtkFundamentalType
   (invalid GTK_TYPE_INVALID)
   (none GTK_TYPE_NONE)
   (char GTK_TYPE_CHAR)
   (uchar GTK_TYPE_UCHAR)
   (bool GTK_TYPE_BOOL)
   (int GTK_TYPE_INT)
   (uint GTK_TYPE_UINT)
   (long GTK_TYPE_LONG)
   (ulong GTK_TYPE_ULONG)
   (float GTK_TYPE_FLOAT)
   (double GTK_TYPE_DOUBLE)
   (string GTK_TYPE_STRING)
   (enum GTK_TYPE_ENUM)
   (flags GTK_TYPE_FLAGS)
   (boxed GTK_TYPE_BOXED)
   (pointer GTK_TYPE_POINTER)
   (signal GTK_TYPE_SIGNAL)
   (args GTK_TYPE_ARGS)
   (callback GTK_TYPE_CALLBACK)
   (c-callback GTK_TYPE_C_CALLBACK)
   (foreign GTK_TYPE_FOREIGN)
   (object GTK_TYPE_OBJECT))

; enumerations from "gtkwidget.h"

(define-flags GtkWidgetFlags
   (toplevel GTK_TOPLEVEL)
   (no-window GTK_NO_WINDOW)
   (realized GTK_REALIZED)
   (mapped GTK_MAPPED)
   (visible GTK_VISIBLE)
   (sensitive GTK_SENSITIVE)
   (parent-sensitive GTK_PARENT_SENSITIVE)
   (can-focus GTK_CAN_FOCUS)
   (has-focus GTK_HAS_FOCUS)
   (can-default GTK_CAN_DEFAULT)
   (has-default GTK_HAS_DEFAULT)
   (has-grab GTK_HAS_GRAB)
   (rc-style GTK_RC_STYLE)
   (composite-child GTK_COMPOSITE_CHILD)
   (no-reparent GTK_NO_REPARENT)
   (app-paintable GTK_APP_PAINTABLE))

; enumerations from "../gdk/gdktypes.h"

(define-enum GdkWindowType
   (root GDK_WINDOW_ROOT)
   (toplevel GDK_WINDOW_TOPLEVEL)
   (child GDK_WINDOW_CHILD)
   (dialog GDK_WINDOW_DIALOG)
   (temp GDK_WINDOW_TEMP)
   (pixmap GDK_WINDOW_PIXMAP)
   (foreign GDK_WINDOW_FOREIGN))

(define-enum GdkWindowClass
   (output GDK_INPUT_OUTPUT)
   (only GDK_INPUT_ONLY))

(define-enum GdkImageType
   (normal GDK_IMAGE_NORMAL)
   (shared GDK_IMAGE_SHARED)
   (fastest GDK_IMAGE_FASTEST))

(define-enum GdkVisualType
   (static-gray GDK_VISUAL_STATIC_GRAY)
   (grayscale GDK_VISUAL_GRAYSCALE)
   (static-color GDK_VISUAL_STATIC_COLOR)
   (pseudo-color GDK_VISUAL_PSEUDO_COLOR)
   (true-color GDK_VISUAL_TRUE_COLOR)
   (direct-color GDK_VISUAL_DIRECT_COLOR))

(define-enum GdkFontType
   (font GDK_FONT_FONT)
   (fontset GDK_FONT_FONTSET))

(define-flags GdkWindowAttributesType
   (title GDK_WA_TITLE)
   (x GDK_WA_X)
   (y GDK_WA_Y)
   (cursor GDK_WA_CURSOR)
   (colormap GDK_WA_COLORMAP)
   (visual GDK_WA_VISUAL)
   (wmclass GDK_WA_WMCLASS)
   (noredir GDK_WA_NOREDIR))

(define-flags GdkWindowHints
   (pos GDK_HINT_POS)
   (min-size GDK_HINT_MIN_SIZE)
   (max-size GDK_HINT_MAX_SIZE)
   (base-size GDK_HINT_BASE_SIZE)
   (aspect GDK_HINT_ASPECT)
   (resize-inc GDK_HINT_RESIZE_INC))

(define-enum GdkFunction
   (copy GDK_COPY)
   (invert GDK_INVERT)
   (xor GDK_XOR)
   (clear GDK_CLEAR)
   (and GDK_AND)
   (and-reverse GDK_AND_REVERSE)
   (and-invert GDK_AND_INVERT)
   (noop GDK_NOOP)
   (or GDK_OR)
   (equiv GDK_EQUIV)
   (or-reverse GDK_OR_REVERSE)
   (copy-invert GDK_COPY_INVERT)
   (or-invert GDK_OR_INVERT)
   (nand GDK_NAND)
   (set GDK_SET))

(define-enum GdkFill
   (solid GDK_SOLID)
   (tiled GDK_TILED)
   (stippled GDK_STIPPLED)
   (opaque-stippled GDK_OPAQUE_STIPPLED))

(define-enum GdkFillRule
   (even-odd-rule GDK_EVEN_ODD_RULE)
   (winding-rule GDK_WINDING_RULE))

(define-enum GdkLineStyle
   (solid GDK_LINE_SOLID)
   (on-off-dash GDK_LINE_ON_OFF_DASH)
   (double-dash GDK_LINE_DOUBLE_DASH))

(define-enum GdkCapStyle
   (not-last GDK_CAP_NOT_LAST)
   (butt GDK_CAP_BUTT)
   (round GDK_CAP_ROUND)
   (projecting GDK_CAP_PROJECTING))

(define-enum GdkJoinStyle
   (miter GDK_JOIN_MITER)
   (round GDK_JOIN_ROUND)
   (bevel GDK_JOIN_BEVEL))

(define-enum GdkCursorType
   (num-glyphs GDK_NUM_GLYPHS)
   (x-cursor GDK_X_CURSOR)
   (arrow GDK_ARROW)
   (based-arrow-down GDK_BASED_ARROW_DOWN)
   (based-arrow-up GDK_BASED_ARROW_UP)
   (boat GDK_BOAT)
   (bogosity GDK_BOGOSITY)
   (bottom-left-corner GDK_BOTTOM_LEFT_CORNER)
   (bottom-right-corner GDK_BOTTOM_RIGHT_CORNER)
   (bottom-side GDK_BOTTOM_SIDE)
   (bottom-tee GDK_BOTTOM_TEE)
   (box-spiral GDK_BOX_SPIRAL)
   (center-ptr GDK_CENTER_PTR)
   (circle GDK_CIRCLE)
   (clock GDK_CLOCK)
   (coffee-mug GDK_COFFEE_MUG)
   (cross GDK_CROSS)
   (cross-reverse GDK_CROSS_REVERSE)
   (crosshair GDK_CROSSHAIR)
   (diamond-cross GDK_DIAMOND_CROSS)
   (dot GDK_DOT)
   (dotbox GDK_DOTBOX)
   (double-arrow GDK_DOUBLE_ARROW)
   (draft-large GDK_DRAFT_LARGE)
   (draft-small GDK_DRAFT_SMALL)
   (draped-box GDK_DRAPED_BOX)
   (exchange GDK_EXCHANGE)
   (fleur GDK_FLEUR)
   (gobbler GDK_GOBBLER)
   (gumby GDK_GUMBY)
   (hand1 GDK_HAND1)
   (hand2 GDK_HAND2)
   (heart GDK_HEART)
   (icon GDK_ICON)
   (iron-cross GDK_IRON_CROSS)
   (left-ptr GDK_LEFT_PTR)
   (left-side GDK_LEFT_SIDE)
   (left-tee GDK_LEFT_TEE)
   (leftbutton GDK_LEFTBUTTON)
   (ll-angle GDK_LL_ANGLE)
   (lr-angle GDK_LR_ANGLE)
   (man GDK_MAN)
   (middlebutton GDK_MIDDLEBUTTON)
   (mouse GDK_MOUSE)
   (pencil GDK_PENCIL)
   (pirate GDK_PIRATE)
   (plus GDK_PLUS)
   (question-arrow GDK_QUESTION_ARROW)
   (right-ptr GDK_RIGHT_PTR)
   (right-side GDK_RIGHT_SIDE)
   (right-tee GDK_RIGHT_TEE)
   (rightbutton GDK_RIGHTBUTTON)
   (rtl-logo GDK_RTL_LOGO)
   (sailboat GDK_SAILBOAT)
   (sb-down-arrow GDK_SB_DOWN_ARROW)
   (sb-h-double-arrow GDK_SB_H_DOUBLE_ARROW)
   (sb-left-arrow GDK_SB_LEFT_ARROW)
   (sb-right-arrow GDK_SB_RIGHT_ARROW)
   (sb-up-arrow GDK_SB_UP_ARROW)
   (sb-v-double-arrow GDK_SB_V_DOUBLE_ARROW)
   (shuttle GDK_SHUTTLE)
   (sizing GDK_SIZING)
   (spider GDK_SPIDER)
   (spraycan GDK_SPRAYCAN)
   (star GDK_STAR)
   (target GDK_TARGET)
   (tcross GDK_TCROSS)
   (top-left-arrow GDK_TOP_LEFT_ARROW)
   (top-left-corner GDK_TOP_LEFT_CORNER)
   (top-right-corner GDK_TOP_RIGHT_CORNER)
   (top-side GDK_TOP_SIDE)
   (top-tee GDK_TOP_TEE)
   (trek GDK_TREK)
   (ul-angle GDK_UL_ANGLE)
   (umbrella GDK_UMBRELLA)
   (ur-angle GDK_UR_ANGLE)
   (watch GDK_WATCH)
   (xterm GDK_XTERM)
   (last-cursor GDK_LAST_CURSOR)
   (cursor-is-pixmap GDK_CURSOR_IS_PIXMAP))

(define-enum GdkFilterReturn
   (continue GDK_FILTER_CONTINUE)
   (translate GDK_FILTER_TRANSLATE)
   (remove GDK_FILTER_REMOVE))

(define-enum GdkVisibilityState
   (unobscured GDK_VISIBILITY_UNOBSCURED)
   (partial GDK_VISIBILITY_PARTIAL)
   (fully-obscured GDK_VISIBILITY_FULLY_OBSCURED))

(define-enum GdkEventType
   (nothing GDK_NOTHING)
   (delete GDK_DELETE)
   (destroy GDK_DESTROY)
   (expose GDK_EXPOSE)
   (motion-notify GDK_MOTION_NOTIFY)
   (button-press GDK_BUTTON_PRESS)
   (2button-press GDK_2BUTTON_PRESS)
   (3button-press GDK_3BUTTON_PRESS)
   (button-release GDK_BUTTON_RELEASE)
   (key-press GDK_KEY_PRESS)
   (key-release GDK_KEY_RELEASE)
   (enter-notify GDK_ENTER_NOTIFY)
   (leave-notify GDK_LEAVE_NOTIFY)
   (focus-change GDK_FOCUS_CHANGE)
   (configure GDK_CONFIGURE)
   (map GDK_MAP)
   (unmap GDK_UNMAP)
   (property-notify GDK_PROPERTY_NOTIFY)
   (selection-clear GDK_SELECTION_CLEAR)
   (selection-request GDK_SELECTION_REQUEST)
   (selection-notify GDK_SELECTION_NOTIFY)
   (proximity-in GDK_PROXIMITY_IN)
   (proximity-out GDK_PROXIMITY_OUT)
   (drag-enter GDK_DRAG_ENTER)
   (drag-leave GDK_DRAG_LEAVE)
   (drag-motion GDK_DRAG_MOTION)
   (drag-status GDK_DRAG_STATUS)
   (drop-start GDK_DROP_START)
   (drop-finished GDK_DROP_FINISHED)
   (client-event GDK_CLIENT_EVENT)
   (visibility-notify GDK_VISIBILITY_NOTIFY)
   (no-expose GDK_NO_EXPOSE))

(define-flags GdkEventMask
   (exposure-mask GDK_EXPOSURE_MASK)
   (pointer-motion-mask GDK_POINTER_MOTION_MASK)
   (pointer-motion-hint-mask GDK_POINTER_MOTION_HINT_MASK)
   (button-motion-mask GDK_BUTTON_MOTION_MASK)
   (button1-motion-mask GDK_BUTTON1_MOTION_MASK)
   (button2-motion-mask GDK_BUTTON2_MOTION_MASK)
   (button3-motion-mask GDK_BUTTON3_MOTION_MASK)
   (button-press-mask GDK_BUTTON_PRESS_MASK)
   (button-release-mask GDK_BUTTON_RELEASE_MASK)
   (key-press-mask GDK_KEY_PRESS_MASK)
   (key-release-mask GDK_KEY_RELEASE_MASK)
   (enter-notify-mask GDK_ENTER_NOTIFY_MASK)
   (leave-notify-mask GDK_LEAVE_NOTIFY_MASK)
   (focus-change-mask GDK_FOCUS_CHANGE_MASK)
   (structure-mask GDK_STRUCTURE_MASK)
   (property-change-mask GDK_PROPERTY_CHANGE_MASK)
   (visibility-notify-mask GDK_VISIBILITY_NOTIFY_MASK)
   (proximity-in-mask GDK_PROXIMITY_IN_MASK)
   (proximity-out-mask GDK_PROXIMITY_OUT_MASK)
   (substructure-mask GDK_SUBSTRUCTURE_MASK)
   (all-events-mask GDK_ALL_EVENTS_MASK))

(define-enum GdkNotifyType
   (ancestor GDK_NOTIFY_ANCESTOR)
   (virtual GDK_NOTIFY_VIRTUAL)
   (inferior GDK_NOTIFY_INFERIOR)
   (nonlinear GDK_NOTIFY_NONLINEAR)
   (nonlinear-virtual GDK_NOTIFY_NONLINEAR_VIRTUAL)
   (unknown GDK_NOTIFY_UNKNOWN))

(define-enum GdkCrossingMode
   (normal GDK_CROSSING_NORMAL)
   (grab GDK_CROSSING_GRAB)
   (ungrab GDK_CROSSING_UNGRAB))

(define-flags GdkModifierType
   (shift-mask GDK_SHIFT_MASK)
   (lock-mask GDK_LOCK_MASK)
   (control-mask GDK_CONTROL_MASK)
   (mod1-mask GDK_MOD1_MASK)
   (mod2-mask GDK_MOD2_MASK)
   (mod3-mask GDK_MOD3_MASK)
   (mod4-mask GDK_MOD4_MASK)
   (mod5-mask GDK_MOD5_MASK)
   (button1-mask GDK_BUTTON1_MASK)
   (button2-mask GDK_BUTTON2_MASK)
   (button3-mask GDK_BUTTON3_MASK)
   (button4-mask GDK_BUTTON4_MASK)
   (button5-mask GDK_BUTTON5_MASK)
   (release-mask GDK_RELEASE_MASK)
   (modifier-mask GDK_MODIFIER_MASK))

(define-enum GdkSubwindowMode
   (clip-by-children GDK_CLIP_BY_CHILDREN)
   (include-inferiors GDK_INCLUDE_INFERIORS))

(define-flags GdkInputCondition
   (read GDK_INPUT_READ)
   (write GDK_INPUT_WRITE)
   (exception GDK_INPUT_EXCEPTION))

(define-enum GdkStatus
   (ok GDK_OK)
   (error GDK_ERROR)
   (error-param GDK_ERROR_PARAM)
   (error-file GDK_ERROR_FILE)
   (error-mem GDK_ERROR_MEM))

(define-enum GdkByteOrder
   (lsb-first GDK_LSB_FIRST)
   (msb-first GDK_MSB_FIRST))

(define-flags GdkGCValuesMask
   (foreground GDK_GC_FOREGROUND)
   (background GDK_GC_BACKGROUND)
   (font GDK_GC_FONT)
   (function GDK_GC_FUNCTION)
   (fill GDK_GC_FILL)
   (tile GDK_GC_TILE)
   (stipple GDK_GC_STIPPLE)
   (clip-mask GDK_GC_CLIP_MASK)
   (subwindow GDK_GC_SUBWINDOW)
   (ts-x-origin GDK_GC_TS_X_ORIGIN)
   (ts-y-origin GDK_GC_TS_Y_ORIGIN)
   (clip-x-origin GDK_GC_CLIP_X_ORIGIN)
   (clip-y-origin GDK_GC_CLIP_Y_ORIGIN)
   (exposures GDK_GC_EXPOSURES)
   (line-width GDK_GC_LINE_WIDTH)
   (line-style GDK_GC_LINE_STYLE)
   (cap-style GDK_GC_CAP_STYLE)
   (join-style GDK_GC_JOIN_STYLE))

(define-enum GdkSelection
   (primary GDK_SELECTION_PRIMARY)
   (secondary GDK_SELECTION_SECONDARY))

(define-enum GdkPropertyState
   (new-value GDK_PROPERTY_NEW_VALUE)
   (delete GDK_PROPERTY_DELETE))

(define-enum GdkPropMode
   (replace GDK_PROP_MODE_REPLACE)
   (prepend GDK_PROP_MODE_PREPEND)
   (append GDK_PROP_MODE_APPEND))

(define-enum GdkInputSource
   (mouse GDK_SOURCE_MOUSE)
   (pen GDK_SOURCE_PEN)
   (eraser GDK_SOURCE_ERASER)
   (cursor GDK_SOURCE_CURSOR))

(define-enum GdkInputMode
   (disabled GDK_MODE_DISABLED)
   (screen GDK_MODE_SCREEN)
   (window GDK_MODE_WINDOW))

(define-enum GdkAxisUse
   (ignore GDK_AXIS_IGNORE)
   (x GDK_AXIS_X)
   (y GDK_AXIS_Y)
   (pressure GDK_AXIS_PRESSURE)
   (xtilt GDK_AXIS_XTILT)
   (ytilt GDK_AXIS_YTILT)
   (last GDK_AXIS_LAST))

(define-enum GdkTarget
   (bitmap GDK_TARGET_BITMAP)
   (colormap GDK_TARGET_COLORMAP)
   (drawable GDK_TARGET_DRAWABLE)
   (pixmap GDK_TARGET_PIXMAP)
   (string GDK_TARGET_STRING))

(define-enum GdkSelectionType
   (atom GDK_SELECTION_TYPE_ATOM)
   (bitmap GDK_SELECTION_TYPE_BITMAP)
   (colormap GDK_SELECTION_TYPE_COLORMAP)
   (drawable GDK_SELECTION_TYPE_DRAWABLE)
   (integer GDK_SELECTION_TYPE_INTEGER)
   (pixmap GDK_SELECTION_TYPE_PIXMAP)
   (window GDK_SELECTION_TYPE_WINDOW)
   (string GDK_SELECTION_TYPE_STRING))

(define-enum GdkExtensionMode
   (none GDK_EXTENSION_EVENTS_NONE)
   (all GDK_EXTENSION_EVENTS_ALL)
   (cursor GDK_EXTENSION_EVENTS_CURSOR))

(define-flags GdkIMStyle
   (preedit-area GDK_IM_PREEDIT_AREA)
   (preedit-callbacks GDK_IM_PREEDIT_CALLBACKS)
   (preedit-position GDK_IM_PREEDIT_POSITION)
   (preedit-nothing GDK_IM_PREEDIT_NOTHING)
   (preedit-none GDK_IM_PREEDIT_NONE)
   (preedit-mask GDK_IM_PREEDIT_MASK)
   (status-area GDK_IM_STATUS_AREA)
   (status-callbacks GDK_IM_STATUS_CALLBACKS)
   (status-nothing GDK_IM_STATUS_NOTHING)
   (status-none GDK_IM_STATUS_NONE)
   (status-mask GDK_IM_STATUS_MASK))

(define-flags GdkICAttributesType
   (style GDK_IC_STYLE)
   (client-window GDK_IC_CLIENT_WINDOW)
   (focus-window GDK_IC_FOCUS_WINDOW)
   (filter-events GDK_IC_FILTER_EVENTS)
   (spot-location GDK_IC_SPOT_LOCATION)
   (line-spacing GDK_IC_LINE_SPACING)
   (cursor GDK_IC_CURSOR)
   (preedit-fontset GDK_IC_PREEDIT_FONTSET)
   (preedit-area GDK_IC_PREEDIT_AREA)
   (preedit-area-needed GDK_IC_PREEDIT_AREA_NEEDED)
   (preedit-foreground GDK_IC_PREEDIT_FOREGROUND)
   (preedit-background GDK_IC_PREEDIT_BACKGROUND)
   (preedit-pixmap GDK_IC_PREEDIT_PIXMAP)
   (preedit-colormap GDK_IC_PREEDIT_COLORMAP)
   (status-fontset GDK_IC_STATUS_FONTSET)
   (status-area GDK_IC_STATUS_AREA)
   (status-area-needed GDK_IC_STATUS_AREA_NEEDED)
   (status-foreground GDK_IC_STATUS_FOREGROUND)
   (status-background GDK_IC_STATUS_BACKGROUND)
   (status-pixmap GDK_IC_STATUS_PIXMAP)
   (status-colormap GDK_IC_STATUS_COLORMAP)
   (all-req GDK_IC_ALL_REQ)
;;;    (client-window GDK_IC_CLIENT_WINDOW)
   (preedit-area-req GDK_IC_PREEDIT_AREA_REQ)
;;;    (preedit-fontset GDK_IC_PREEDIT_FONTSET)
   (preedit-position-req GDK_IC_PREEDIT_POSITION_REQ)
;;;   (preedit-fontset GDK_IC_PREEDIT_FONTSET)
;;;   (status-area-req GDK_IC_STATUS_AREA_REQ)
;;;   (status-fontset GDK_IC_STATUS_FONTSET))
   )

(define-flags GdkWMDecoration
   (all GDK_DECOR_ALL)
   (border GDK_DECOR_BORDER)
   (resizeh GDK_DECOR_RESIZEH)
   (title GDK_DECOR_TITLE)
   (menu GDK_DECOR_MENU)
   (minimize GDK_DECOR_MINIMIZE)
   (maximize GDK_DECOR_MAXIMIZE))

(define-flags GdkWMFunction
   (all GDK_FUNC_ALL)
   (resize GDK_FUNC_RESIZE)
   (move GDK_FUNC_MOVE)
   (minimize GDK_FUNC_MINIMIZE)
   (maximize GDK_FUNC_MAXIMIZE)
   (close GDK_FUNC_CLOSE))

(define-enum GdkColorContextMode
   (undefined GDK_CC_MODE_UNDEFINED)
   (bw GDK_CC_MODE_BW)
   (std-cmap GDK_CC_MODE_STD_CMAP)
   (true GDK_CC_MODE_TRUE)
   (my-gray GDK_CC_MODE_MY_GRAY)
   (palette GDK_CC_MODE_PALETTE))

(define-enum GdkOverlapType
   (in GDK_OVERLAP_RECTANGLE_IN)
   (out GDK_OVERLAP_RECTANGLE_OUT)
   (part GDK_OVERLAP_RECTANGLE_PART))

(define-flags GdkDragAction
   (default GDK_ACTION_DEFAULT)
   (copy GDK_ACTION_COPY)
   (move GDK_ACTION_MOVE)
   (link GDK_ACTION_LINK)
   (private GDK_ACTION_PRIVATE)
   (ask GDK_ACTION_ASK))

(define-enum GdkDragProtocol
   (motif GDK_DRAG_PROTO_MOTIF)
   (xdnd GDK_DRAG_PROTO_XDND)
   (rootwin GDK_DRAG_PROTO_ROOTWIN))

; enumerations from "../gdk/gdkrgb.h"

(define-enum GdkRgbDither
   (none GDK_RGB_DITHER_NONE)
   (normal GDK_RGB_DITHER_NORMAL)
   (max GDK_RGB_DITHER_MAX))

; Boxed types
(define-boxed GtkAccelGroup
  gtk_accel_group_ref
  gtk_accel_group_unref)

(define-boxed GtkStyle
  gtk_style_ref
  gtk_style_unref)

(define-boxed GtkSelectionData
  gtk_selection_data_copy
  gtk_selection_data_free)

(define-boxed GdkDragContext
  gdk_drag_context_ref
  gdk_drag_context_unref)

(define-boxed GdkColormap
  gdk_colormap_ref
  gdk_colormap_unref)

(define-boxed GdkFont
  gdk_font_ref
  gdk_font_unref)

(define-boxed GdkWindow
  gdk_window_ref
  gdk_window_unref)
(define-boxed GdkPixmap
  gdk_pixmap_ref
  gdk_pixmap_unref)
(define-boxed GdkBitmap
  gdk_bitmap_ref
  gdk_bitmap_unref)
(define-boxed GdkDrawable
  gdk_window_ref
  gdk_window_unref)

(define-boxed GdkEvent
  gdk_event_copy
  gdk_event_free
  "sizeof(GdkEvent)")

(define-boxed GdkColor
  gdk_color_copy
  gdk_color_free
  "sizeof(GdkColor)")

(define-boxed GdkGC
  gdk_gc_ref
  gdk_gc_unref)

(define-boxed GtkCTreeNode
 
  )

(define-boxed GtkCTreeRow
  
  )

;;;(define-boxed GdkCursor
;;;)

;;;(define-boxed GtkCTreeNode
;;;)

; Gdk Functions

(define-func gdk_beep
  none
  ())

; Fonts

(define-func gdk_font_load
  GdkFont
  ((string name)))
(define-func gdk_fontset_load
  GdkFont
  ((string name)))

; Colors
(define-func gdk_color_alloc
  bool
  ((GdkColormap colormap)
   (GdkColor color)))

(define-func gdk_color_black
  bool
  ((GdkColormap colormap)
   (GdkColor color)))

(define-func gdk_color_change
  bool
  ((GdkColormap colormap)
   (GdkColor color)))

(define-func gdk_color_parse
  bool
  ((string spec)
   (GdkColor color (output))))

(define-func gdk_color_white
  bool
  ((GdkColormap colormap)
   (GdkColor color)))

(define-func gdk_colormap_alloc_color
  bool
  ((GdkColormap colormap)
   (GdkColor color)
   (bool writeable)
   (bool best_match)))

(define-func gdk_colormap_change
  none
  ((GdkColormap colormap)
   (int ncolors)))

(define-func gdk_colormap_free_colors
  none
  ((GdkColormap colormap)
   (GdkColor colors)
   (int ncolors)))

(define-func gdk_colormap_get_system
  GdkColormap
  ())

(define-func gdk_colormap_get_system_size
  int
  ())

(define-func gdk_gc_set_background
  none
  ((GdkGC gc)
   (GdkColor color)))

(define-func gdk_gc_set_clip_mask
  none
  ((GdkGC gc)
   (GdkBitmap mask)))

(define-func gdk_gc_set_clip_origin
  none
  ((GdkGC gc)
   (int x)
   (int y)))

;;;(define-func gdk_gc_set_clip_rectangle
;;;  none
;;;  ((GdkGC gc)
;;;   (GdkRectangle rectangle)))

;;;(define-func gdk_gc_set_clip_region
;;;  none
;;;  ((GdkGC gc)
;;;   (GdkRegion region)))

(define-func gdk_gc_set_dashes
  none
  ((GdkGC gc)
   (int dash_offset)
   (static_string dash_list)
   (int n)))

(define-func gdk_gc_set_exposures
  none
  ((GdkGC gc)
   (int exposures)))

(define-func gdk_gc_set_fill
  none
  ((GdkGC gc)
   (GdkFill fill)))

(define-func gdk_gc_set_font
  none
  ((GdkGC gc)
   (GdkFont font)))

(define-func gdk_gc_set_foreground
  none
  ((GdkGC gc)
   (GdkColor color)))

(define-func gdk_gc_set_line_attributes
  none
  ((GdkGC gc)
   (int line_width)
   (GdkLineStyle line_style)
   (GdkCapStyle cap_style)
   (GdkJoinStyle join_style)))

(define-func gdk_gc_set_stipple
  none
  ((GdkGC gc)
   (GdkPixmap stipple)))

(define-func gdk_gc_set_subwindow
  none
  ((GdkGC gc)
   (GdkSubwindowMode mode)))

(define-func gdk_gc_set_tile
  none
  ((GdkGC gc)
   (GdkPixmap tile)))

(define-func gdk_gc_set_ts_origin
  none
  ((GdkGC gc)
   (int x)
   (int y)))

;;; Henning; consider the following section (until end-sec) marked ;;;
; Pixmaps and bitmaps
;(define-func gdk_pixmap_new
;  GdkPixmap
;  ((GdkWindow window (null-ok)); Henning, NULL only allowed if depth is given
;   (int width)
;   (int height)
;   (int depth)))

;(define-func gdk_pixmap_create_from_data
;  GdkPixmap
;  ((GdkWindow window (null-ok)); Henning, NULL only allowed if depth is given
;   (static_string data)
;   (int width)
;   (int height)
;   (int depth)
;   (GdkColor fg)
;   (GdkColor bg)))

;(define-func gdk_pixmap_create_from_xpm
;  GdkPixmap
;  ((GdkWindow window)
;   (GdkBitmap mask (null-ok)); Henning
;   (GdkColor transparent_color (null-ok))
;   (static_string filename)))

;;(define-func gdk_pixmap_create_from_xpm_d
;;  GdkPixmap
;;  ((GdkWindow window)
;;   (GdkBitmap mask (null-ok)); Henning
;;   (GdkColor transparent_color (null-ok))
;;   (string data)))

;(define-func gdk_bitmap_create_from_data
;  GdkBitmap
;  ((GdkWindow window (null-ok))
;   (static_string data)
;   (int width)
;   (int height)))

;;; end-sec

; Drawing primitives
(define-func gdk_window_clear_area 
   none
   ((GdkDrawable drawable)
    (int x1) (int y1)
    (int x2) (int y2)))

(define-func gdk_draw_point
  none
  ((GdkDrawable drawable)
   (GdkGC gc)
   (int x) (int y)))
(define-func gdk_draw_line
  none
  ((GdkDrawable drawable)
   (GdkGC gc)
   (int x1) (int y1)
   (int x2) (int y2)))
(define-func gdk_draw_rectangle
  none
  ((GdkDrawable drawable)
   (GdkGC gc)
   (bool filled)
   (int x)     (int y)
   (int width) (int height)))
(define-func gdk_draw_arc
  none
  ((GdkDrawable drawable)
   (GdkGC gc)
   (bool filled)
   (int x)      (int y)
   (int width)  (int height)
   (int angle1) (int angle2)))

(define-func gdk_draw_string
  none
  ((GdkDrawable drawable)
   (GdkFont font)
   (GdkGC gc)
   (int x) (int y)
   (string str)))
(define-func gdk_draw_text
  none
  ((GdkDrawable drawable)
   (GdkFont font)
   (GdkGC gc)
   (int x) (int y)
   (string text)
   (int text_length)))
(define-func gdk_draw_pixmap
  none
  ((GdkDrawable drawable)
   (GdkGC gc)
   (GdkDrawable src)
   (int xsrc)  (int ysrc)
   (int xdest) (int ydest)
   (int width) (int height)))

;; gdk_draw_points
;; gdk_draw_segments
;; gdk_draw_lines
;; gdk_draw_polygon

(define-func gdk_string_extents
  none
  ((GdkFont font)
   (static_string string)
   (int lbearing (output))
   (int rbearing (output))
   (int width (output))
   (int ascent (output))
   (int descent (output))))

(define-func gdk_string_height
  int
  ((GdkFont font)
   (static_string string)))

(define-func gdk_string_measure
  int
  ((GdkFont font)
   (static_string string)))

(define-func gdk_string_width
  int
  ((GdkFont font)
   (static_string string)))

(define-func gdk_text_extents
  none
  ((GdkFont font)
   (static_string text)
   (int text_length)
   (int lbearing (output))
   (int rbearing (output))
   (int width (output))
   (int ascent (output))
   (int descent (output))))

(define-func gdk_text_height
  int
  ((GdkFont font)
   (static_string text)
   (int text_length)))

(define-func gdk_text_measure
  int
  ((GdkFont font)
   (static_string text)
   (int text_length)))

(define-func gdk_text_width
  int
  ((GdkFont font)
   (static_string text)
   (int text_length)))

;;;(define-func gdk_cursor_new
;;;  GdkCursor
;;;  ((GdkCursorType cursor_type)))

;;;(define-func gdk_cursor_destroy
;;;  none
;;;  ((GdkCursor cursor)))

;;;(define-func gdk_cursor_new_from_pixmap
;;;  GdkCursor
;;;  ((GdkPixmap source)
;;;   (GdkBitmap mask)
;;;   (GdkColor fg)
;;;   (GdkColor bg)
;;;   (int x) (int y)))

;;; (define-func gdk_draw_bitmap
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (GdkDrawable src)
;;;    (int xsrc)
;;;    (int ysrc)
;;;    (int xdest)
;;;    (int ydest)
;;;    (int width)
;;;    (int height)))
  
;;; (define-func gdk_draw_gray_image
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (int x)
;;;    (int y)
;;;    (int width)
;;;    (int height)
;;;    (GdkRgbDither dith)
;;;    (uchar* buf)
;;;    (int rowstride)))
  
;;; (define-func gdk_draw_image
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (GdkImage image)
;;;    (int xsrc)
;;;    (int ysrc)
;;;    (int xdest)
;;;    (int ydest)
;;;    (int width)
;;;    (int height)))
  
;;; (define-func gdk_draw_indexed_image
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (int x)
;;;    (int y)
;;;    (int width)
;;;    (int height)
;;;    (GdkRgbDither dith)
;;;    (uchar* buf)
;;;    (int rowstride)
;;;    (GdkRgbCmap cmap)))

;;; (define-func gdk_draw_rgb_32_image
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (int x)
;;;    (int y)
;;;    (int width)
;;;    (int height)
;;;    (GdkRgbDither dith)
;;;    (uchar* buf)
;;;    (int rowstride)))

;;; (define-func gdk_draw_rgb_image
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (int x)
;;;    (int y)
;;;    (int width)
;;;    (int height)
;;;    (GdkRgbDither dith)
;;;    (uchar* rgb_buf)
;;;    (int rowstride)))

;;; (define-func gdk_draw_rgb_image_dithalign
;;;   none
;;;   ((GdkDrawable drawable)
;;;    (GdkGC gc)
;;;    (int x)
;;;    (int y)
;;;    (int width)
;;;    (int height)
;;;    (GdkRgbDither dith)
;;;    (uchar* rgb_buf)
;;;    (int rowstride)
;;;    (int xdith)
;;;    (int ydith)))

(define-func gdk_get_display
  string
  ())

; Gtk equivalents
(define-func gtk_draw_arrow
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (GtkArrowType arrow_type)
   (bool fill)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_box
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_box_gap
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)
   (GtkPositionType gap_side)
   (int gap_x)
   (int gap_width)))

(define-func gtk_draw_check
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_cross
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_diamond
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_extension
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)
   (GtkPositionType gap_side)))

(define-func gtk_draw_flat_box
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_focus
  none
  ((GtkStyle style)
   (GdkWindow window)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_handle
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)
   (GtkOrientation orientation)))

(define-func gtk_draw_hline
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (int x1)
   (int x2)
   (int y)))

(define-func gtk_draw_option
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_oval
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

;;;(define-func gtk_draw_polygon
;;;  none
;;;  ((GtkStyle style)
;;;   (GdkWindow window)
;;;   (GtkStateType state_type)
;;;   (GtkShadowType shadow_type)
;;;   (GdkPoint points)
;;;   (int npoints)
;;;   (bool fill)))

(define-func gtk_draw_ramp
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (GtkArrowType arrow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_shadow
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_shadow_gap
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)
   (GtkPositionType gap_side)
   (int gap_x)
   (int gap_width)))

(define-func gtk_draw_slider
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)
   (GtkOrientation orientation)))

(define-func gtk_draw_string
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (int x)
   (int y)
   (static_string string)))

(define-func gtk_draw_tab
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (GtkShadowType shadow_type)
   (int x)
   (int y)
   (int width)
   (int height)))

(define-func gtk_draw_vline
  none
  ((GtkStyle style)
   (GdkWindow window)
   (GtkStateType state_type)
   (int y1)
   (int y2)
   (int x)))

; misc gdk functions that are useful to GTK programmers ...
(define-func gdk_screen_width
  int
  ())

(define-func gdk_screen_height
  int
  ())

(define-func gdk_screen_width_mm
  int
  ())

(define-func gdk_screen_height_mm
  int
  ())

; these two are used extensively -- define early
; --- GtkObject is currently handled specially,
;     hence commented-out here, Henning
;(define-object GtkObject (nil))

;     GtkWidgets has to be defined in the ``header''
;     in order to give the right type to toWidget
;     (in the signature); hence it is commented-out
;     here, Henning
;(define-object GtkWidget (GtkObject))


; Access internal widget data
(define-func gtk_widget_get_window
  GdkWindow
  ((GtkWidget widget)))

(define-func gtk_widget_get_drawable
  GdkDrawable
  ((GtkWidget widget)))

(define-func gtk_widget_get_state 
  GtkStateType 
  ((GtkWidget widget)))

(define-func gtk_widget_get_allocation
  none
  ((GtkWidget widget)
   (int width (output))
   (int height (output))
   (int x (output))
   (int y (output))))

(define-func gtk_widget_get_style_fg_gc
  GdkGC
  ((GtkWidget widget)
   (GtkStateType state)))

; Data

(define-object GtkData (GtkObject))

; Adjustment

(define-object GtkAdjustment (GtkData)
  (fields
   (float value)
   (float lower)
   (float upper)
   (float step_increment)
   (float page_increment)
   (float page_size)))

(define-func gtk_adjustment_new
  GtkObject
  ((float valu)
   (float lower)
   (float upper)
   (float step_increment)
   (float page_increment)
   (float page_size)))

(define-func gtk_adjustment_changed
  none
  ((GtkAdjustment adjustment)))

(define-func gtk_adjustment_value_changed
  none
  ((GtkAdjustment adjustment)))

(define-func gtk_adjustment_clamp_page
  none
  ((GtkAdjustment adjustment)
   (float lower)
   (float upper)))

(define-func gtk_adjustment_set_value
  none
  ((GtkAdjustment adjustment)
   (float valu)))

; gtkwidget.h

(define-func gtk_widget_destroy
  none
  ((GtkWidget widget)))

(define-func gtk_widget_unparent
  none
  ((GtkWidget widget)))

(define-func gtk_widget_show
  none
  ((GtkWidget widget)))

(define-func gtk_widget_show_now
  none
  ((GtkWidget widget)))

(define-func gtk_widget_hide
  none
  ((GtkWidget widget)))

(define-func gtk_widget_show_all
  none
  ((GtkWidget widget)))

(define-func gtk_widget_hide_all
  none
  ((GtkWidget widget)))

(define-func gtk_widget_map
  none
  ((GtkWidget widget)))

(define-func gtk_widget_unmap
  none
  ((GtkWidget widget)))

(define-func gtk_widget_realize
  none
  ((GtkWidget widget)))

(define-func gtk_widget_unrealize
  none
  ((GtkWidget widget)))

(define-func gtk_widget_queue_draw
  none
  ((GtkWidget widget)))

(define-func gtk_widget_queue_resize
  none
  ((GtkWidget widget)))

(define-func gtk_widget_draw_focus
  none
  ((GtkWidget widget)))

(define-func gtk_widget_draw_default
  none
  ((GtkWidget widget)))

;;; (define-func gtk_widget_size_request
;;;  none
;;;  ((GtkWidget widget)
;;;   (GtkRequisition requisition)))

;;; (define-func gtk_widget_size_allocate
;;;  none
;;;  ((GtkWidget widget)
;;;   (GtkAllocation allocation)))

(define-func gtk_widget_add_accelerator
  none
  ((GtkWidget widget)
   (string signal_name)
   (GtkAccelGroup group)
   (uint key)
   (GdkModifierType modifiers)
   (GtkAccelFlags flags)))

(define-func gtk_widget_remove_accelerator
  none
  ((GtkWidget widget)
   (GtkAccelGroup group)
   (uint key)
   (GdkModifierType modifiers)))

(define-func gtk_widget_remove_accelerators
  none
  ((GtkWidget widget)
   (string signal_name)
   (bool visible_only)))

(define-func gtk_widget_accelerator_signal
  uint
  ((GtkWidget widget)
   (GtkAccelGroup group)
   (uint key)
   (GdkModifierType modifiers)))

(define-func gtk_widget_lock_accelerators
  none
  ((GtkWidget widget)))

(define-func gtk_widget_unlock_accelerators
  none
  ((GtkWidget widget)))

(define-func gtk_widget_accelerators_locked
  bool
  ((GtkWidget widget)))

(define-func gtk_widget_event
  bool
  ((GtkWidget widget)
   (GdkEvent event)))

(define-func gtk_widget_activate
  bool
  ((GtkWidget widget)))

(define-func gtk_widget_set_scroll_adjustments
  bool
  ((GtkWidget widget)
   (GtkAdjustment hadjustment)
   (GtkAdjustment vadjustment)))

(define-func gtk_widget_reparent
  none
  ((GtkWidget widget)
   (GtkWidget new_parent)))

(define-func gtk_widget_popup
  none
  ((GtkWidget widget)
   (int x)
   (int y)))

;;;(define-func gtk_widget_intersect
;;;  int
;;;  ((GtkWidget widget)
;;;   (GdkRectangle area)
;;;   (GdkRectangle intersection)))

(define-func gtk_widget_grab_focus
  none
  ((GtkWidget widget)))

(define-func gtk_widget_grab_default
  none
  ((GtkWidget widget)))

(define-func gtk_widget_set_name
  none
  ((GtkWidget widget)
   (string name)))

(define-func gtk_widget_get_name
  static_string
  ((GtkWidget widget)))

(define-func gtk_widget_set_state
  none
  ((GtkWidget widget)
   (GtkStateType state)))

(define-func gtk_widget_set_sensitive
  none
  ((GtkWidget widget)
   (bool sensitive)))

(define-func gtk_widget_set_app_paintable
  none
  ((GtkWidget widget)
   (bool app_paintable)))

(define-func gtk_widget_set_parent
  none
  ((GtkWidget widget)
   (GtkWidget parent)))

(define-func gtk_widget_set_parent_window
  none
  ((GtkWidget widget)
   (GdkWindow parent_window)))

(define-func gtk_widget_get_parent_window
  GdkWindow
  ((GtkWidget widget)))

(define-func gtk_widget_set_uposition
  none
  ((GtkWidget widget)
   (int x)
   (int y)))

(define-func gtk_widget_set_usize
  none
  ((GtkWidget widget)
   (int height)
   (int width)))

(define-func gtk_widget_set_events
  none
  ((GtkWidget widget)
   (GdkEventMask events)))

(define-func gtk_widget_add_events
  none
  ((GtkWidget widget)
   (GdkEventMask events)))

(define-func gtk_widget_set_extension_events
  none
  ((GtkWidget widget)
   (GdkEventMask events)))

(define-func gtk_widget_get_extension_events
  GdkEventMask
  ((GtkWidget widget)))

(define-func gtk_widget_get_toplevel
  GtkWidget
  ((GtkWidget widget)))

(define-func gtk_widget_get_ancestor
  GtkWidget
  ((GtkWidget widget)
   (uint typ)))

(define-func gtk_widget_get_colormap
  GdkColormap
  ((GtkWidget widget)))

(define-func gtk_widget_get_events
  GdkEventMask
  ((GtkWidget widget)))

;;gtk_widget_get_pointer

(define-func gtk_widget_is_ancestor
  bool
  ((GtkWidget widget)
   (GtkWidget ancestor)))

(define-func gtk_widget_hide_on_delete
  int
  ((GtkWidget widget)))

(define-func gtk_widget_set_style
  none
  ((GtkWidget widget)
   (GtkStyle style)))

(define-func gtk_widget_set_rc_style
  none
  ((GtkWidget widget)))

(define-func gtk_widget_ensure_style
  none
  ((GtkWidget widget)))

(define-func gtk_widget_get_style
  GtkStyle
  ((GtkWidget widget)))

(define-func gtk_widget_restore_default_style
  none
  ((GtkWidget widget)))

(define-func gtk_widget_set_composite_name
  none
  ((GtkWidget widget)
   (string name)))

(define-func gtk_widget_get_composite_name
  string
  ((GtkWidget widget)))

(define-func gtk_widget_reset_rc_styles
  none
  ((GtkWidget widget)))

(define-func gtk_widget_push_style
  none
  ((GtkStyle style)))

(define-func gtk_widget_push_colormap
  none
  ((GdkColormap cmap)))

(define-func gtk_widget_pop_style
  none
  ())

(define-func gtk_widget_pop_colormap
  none
  ())

(define-func gtk_widget_set_default_style
  none
  ((GtkStyle style)))

(define-func gtk_widget_set_default_colormap
  none
  ((GdkColormap cmap)))

(define-func gtk_widget_get_default_style
  GtkStyle
  ())

(define-func gtk_widget_get_default_colormap
  GdkColormap
  ())

; shaped widgets ...
(define-func gtk_widget_shape_combine_mask
  none
  ((GtkWidget widget)
   (GdkBitmap mask)
   (int ofs_x) (int ofs_y)))

; these are in gtkmain.h ...
(define-func gtk_grab_add
  none
  ((GtkWidget widget)))

(define-func gtk_grab_get_current
  GtkWidget
  ())

(define-func gtk_grab_remove
  none
  ((GtkWidget widget)))

; dnd and selection stuff ...
;(include "gtkdnd.defs")

; DnD functions ...

;;;(define-func gtk_drag_get_data
;;;  none
;;;  ((GtkWidget widget)
;;;   (GdkDragContext context)
;;;   (GdkAtom target)
;;;   (uint time)))

(define-func gtk_drag_finish
  none
  ((GdkDragContext context)
   (bool success)
   (bool del)
   (uint time)))

(define-func gtk_drag_get_source_widget
  GtkWidget
  ((GdkDragContext context)))

(define-func gtk_drag_highlight
  none
  ((GtkWidget widget)))

(define-func gtk_drag_unhighlight
  none
  ((GtkWidget widget)))

;; gtk_drag_dest_set

(define-func gtk_drag_dest_set_proxy
  none
  ((GtkWidget widget)
   (GdkWindow proxy_window)
   (GdkDragProtocol protocol)
   (bool use_coordinates)))

(define-func gtk_drag_dest_unset
  none
  ((GtkWidget widget)))

;; gtk_drag_source_set

(define-func gtk_drag_source_unset
  none
  ((GtkWidget widget)))

(define-func gtk_drag_source_set_icon
  none
  ((GtkWidget widget)
   (GdkColormap colormap)
   (GdkPixmap pixmap)
   (GdkBitmap mask)))

;; gtk_drag_begin

(define-func gtk_drag_set_icon_widget
  none
  ((GdkDragContext context)
   (GtkWidget widget)
   (int hot_x) (int hot_y)))

(define-func gtk_drag_set_icon_pixmap
  none
  ((GdkDragContext context)
   (GdkColormap colormap)
   (GdkPixmap pixmap)
   (GdkBitmap mask)
   (int hot_x) (int hot_y)))

(define-func gtk_drag_set_icon_default
  none
  ((GdkDragContext context)))

(define-func gtk_drag_set_default_icon
  none
  ((GdkColormap colormap)
   (GdkPixmap pixmap)
   (GdkBitmap mask)
   (int hot_x) (int hot_y)))

; this is GDK, but useful for programs at the GTK level ...
(define-func gdk_drag_status
  none
  ((GdkDragContext context)
   (GdkDragAction action)
   (uint time)))

; Selection functions ...

;;; Removed!

;; gtk_selection_data_set -- implemented as method in pygtk.

(define-func gtk_selection_remove_all
  none
  ((GtkWidget widget)))


; descendents of GtkData (alignments, tooltips, etc)
;(include "gtkdata.defs")

; GtkData and GtkAdjustment are defined in gtkbase.defs now.

; Tooltips ...
(define-object GtkTooltips (GtkData))

(define-func gtk_tooltips_new
  GtkTooltips
  ())

(define-func gtk_tooltips_enable
  none
  ((GtkTooltips tooltips)))

(define-func gtk_tooltips_disable
  none
  ((GtkTooltips tooltips)))

(define-func gtk_tooltips_set_delay
  none
  ((GtkTooltips tooltips)
   (int delay)))

(define-func gtk_tooltips_set_tip
  none
  ((GtkTooltips tooltips)
   (GtkWidget widget)
   (string tip_text (null-ok))
   (string tip_private (null-ok))))

(define-func gtk_tooltips_set_colors
  none
  ((GtkTooltips tooltips)
   (GdkColor background)
   (GdkColor foreground)))

(define-func gtk_tooltips_force_window
  none
  ((GtkTooltips tooltips)))


; all the different containers
;(include "gtkcontainers.defs")

(define-object GtkContainer (GtkWidget))

(define-func gtk_container_set_border_width
  none
  ((GtkContainer container)
   (int border_width)))

(define-func gtk_container_add
  none
  ((GtkContainer container)
   (GtkWidget widget)))

(define-func gtk_container_remove
  none
  ((GtkContainer container)
   (GtkWidget widget)))

(define-func gtk_container_set_resize_mode
  none
  ((GtkContainer container)
   (GtkResizeMode resize_mode)))

(define-func gtk_container_check_resize
  none
  ((GtkContainer container)))

;;;(define-func gtk_container_children
;;;  GList*
;;;  ((GtkContainer container)))

(define-func gtk_container_child_composite_name
  string
  ((GtkContainer container)
   (GtkWidget child)))

(define-func gtk_container_focus
  int
  ((GtkContainer container)
   (GtkDirectionType direction)))

(define-func gtk_container_set_focus_child
  none
  ((GtkContainer container)
   (GtkWidget child (null-ok))))

(define-func gtk_container_set_focus_vadjustment
  none
  ((GtkContainer container)
   (GtkAdjustment adjustment)))

(define-func gtk_container_set_focus_hadjustment
  none
  ((GtkContainer container)
   (GtkAdjustment adjustment)))

(define-func gtk_container_register_toplevel
  none
  ((GtkContainer container)))

(define-func gtk_container_unregister_toplevel
  none
  ((GtkContainer container)))

(define-func gtk_container_resize_children
  none
  ((GtkContainer container)))

(define-func gtk_container_child_type
  uint
  ((GtkContainer container)))

(define-func gtk_container_clear_resize_widgets
  none
  ((GtkContainer container)))

(define-func gtk_container_dequeue_resize_handler
  none
  ((GtkContainer container)))

;gtk_container_child_set
;gtk_container_child_get

;;;(define-func gtk_container_get_toplevels
;;;  GList*
;;;  ())

(define-func gtk_container_queue_resize
  none
  ((GtkContainer container)))

(define-func gtk_container_set_reallocate_redraws
  none
  ((GtkContainer container)
   (bool needs_redraws)))


; Fixed

(define-object GtkFixed (GtkContainer))

(define-func gtk_fixed_new
  GtkFixed
  ())

(define-func gtk_fixed_put 
  none
  ((GtkFixed fixed)
   (GtkWidget widget)
   (int x)
   (int y)))

(define-func gtk_fixed_move
  none
  ((GtkFixed fixed)
   (GtkWidget widget)
   (int x)
   (int y)))

; Bin

(define-object GtkBin (GtkContainer))

; Event Box

(define-object GtkEventBox (GtkBin))

(define-func gtk_event_box_new 
  GtkEventBox
  ())

; Window

(define-object GtkWindow (GtkBin))

(define-func gtk_window_new
  GtkWindow
  ((GtkWindowType typ)))

(define-func gtk_window_set_title
  none
  ((GtkWindow window)
   (string title)))

(define-func gtk_window_set_wmclass
  none
  ((GtkWindow window)
   (string wmclass_class)
   (string wmclass_name)))

(define-func gtk_window_set_policy
  none
  ((GtkWindow window)
   (bool allow_shrink)
   (bool allow_grow)
   (bool auto_shrink)))

(define-func gtk_window_add_accel_group
  none
  ((GtkWindow window)
   (GtkAccelGroup group)))

(define-func gtk_window_remove_accel_group
  none
  ((GtkWindow window)
   (GtkAccelGroup group)))

(define-func gtk_window_set_position
  none
  ((GtkWindow window)
   (GtkWindowPosition position)))

(define-func gtk_window_activate_focus
  int
  ((GtkWindow window)))

(define-func gtk_window_activate_default
  int
  ((GtkWindow window)))

(define-func gtk_window_set_transient_for
  none
  ((GtkWindow window)
   (GtkWindow parent)))

(define-func gtk_window_set_default_size
  none
  ((GtkWindow window)
   (int width) (int height)))

(define-func gtk_window_set_modal
  none
  ((GtkWindow window)
   (bool modal)))

; HandleBox

(define-object GtkHandleBox (GtkBin))

(define-func gtk_handle_box_new
  GtkHandleBox
  ())

(define-func gtk_handle_box_set_shadow_type
  none
  ((GtkHandleBox handle_box)
   (GtkShadowType typ)))

(define-func gtk_handle_box_set_handle_position
  none
  ((GtkHandleBox handle_box)
   (GtkPositionType position)))

(define-func gtk_handle_box_set_snap_edge
  none
  ((GtkHandleBox handle_box)
   (GtkPositionType position)))

; Box

(define-object GtkBox (GtkContainer))

(define-func gtk_box_pack_start
  none
  ((GtkBox box)
   (GtkWidget child)
   (bool expand (= "TRUE"))
   (bool fill (= "TRUE"))
   (int padding (= "0"))))

(define-func gtk_box_pack_end
  none
  ((GtkBox box)
   (GtkWidget child)
   (bool expand (= "TRUE"))
   (bool fill (= "TRUE"))
   (int padding (= "0"))))

(define-func gtk_box_pack_start_defaults
  none
  ((GtkBox box)
   (GtkWidget child)))

(define-func gtk_box_pack_end_defaults
  none
  ((GtkBox box)
   (GtkWidget child)))

(define-func gtk_box_set_homogeneous
  none
  ((GtkBox box)
   (bool homogenous)))

(define-func gtk_box_set_spacing
  none
  ((GtkBox box)
   (int spacing)))

(define-func gtk_box_reorder_child
  none
  ((GtkBox box)
   (GtkWidget child)
   (uint pos)))

(define-func gtk_box_set_child_packing
  none
  ((GtkBox box)
   (GtkWidget child)
   (bool expand)
   (bool fill)
   (int padding)
   (GtkPackType pack_type)))

(define-func gtk_box_query_child_packing
  none
  ((GtkBox box)
   (GtkWidget child)
   (bool expand (output))
   (bool fill (output))
   (uint padding (output))
   (GtkPackType pack_type (output))))

(define-object GtkHBox (GtkBox))
(define-func gtk_hbox_new
  GtkHBox
  ((bool homogeneous) (int spacing)))

(define-object GtkVBox (GtkBox))
(define-func gtk_vbox_new
  GtkVBox
  ((bool homogeneous) (int spacing)))

; ButtonBox

(define-object GtkButtonBox (GtkBox))

(define-func gtk_button_box_get_child_size
  none
  ((GtkButtonBox widget)
   (int min_width (output))
   (int min_height (output))))

(define-func gtk_button_box_get_child_size_default
  none
  ((none dummy)
   (int min_width (output))
   (int min_height (output))))

(define-func gtk_button_box_get_child_ipadding
  none
  ((GtkButtonBox widget)
   (int ipad_x (output))
   (int ipad_y (output))))

(define-func gtk_button_box_get_child_ipadding_default
  none
  ((none dummy)
   (int ipad_x (output))
   (int ipad_y (output))))

(define-func gtk_button_box_set_child_size_default 
  none
  ((int min_width)
   (int min_height)))

(define-func gtk_button_box_set_child_ipadding_default 
  none
  ((int ipad_x)
   (int ipad_y)))

(define-func gtk_button_box_get_spacing 
  int 
  ((GtkButtonBox widget)))

(define-func gtk_button_box_get_layout 
  GtkButtonBoxStyle
  ((GtkButtonBox widget)))

(define-func gtk_button_box_set_spacing 
  none
  ((GtkButtonBox widget) 
   (int spacing)))

(define-func gtk_button_box_set_layout 
  none 
  ((GtkButtonBox widget)
   (GtkButtonBoxStyle layout_style)))

(define-func gtk_button_box_set_child_size	 
  none
  ((GtkButtonBox widget)
   (int min_width) 
   (int min_height)))

(define-func gtk_button_box_set_child_ipadding 
  none
  ((GtkButtonBox widget) 
   (int ipad_x) 
   (int ipad_y)))

;;; An internally used functions not to be called by clients (RDP)
;;; define-func gtk_button_box_child_requisition

; HButtonBox

(define-object GtkHButtonBox (GtkButtonBox))

(define-func gtk_hbutton_box_new  
  GtkHButtonBox
  ())

(define-func gtk_hbutton_box_get_spacing_default 
  int 
  ())

(define-func gtk_hbutton_box_get_layout_default 
  GtkButtonBoxStyle
  ())

(define-func gtk_hbutton_box_set_spacing_default 
  none
  ((int spacing)))

(define-func gtk_hbutton_box_set_layout_default 
  none
  ((GtkButtonBoxStyle layout)))

; HVuttonBox

(define-object GtkVButtonBox (GtkButtonBox))

(define-func gtk_vbutton_box_new  
  GtkVButtonBox
  ())

(define-func gtk_vbutton_box_get_spacing_default 
  int 
  ())

(define-func gtk_vbutton_box_get_layout_default 
  GtkButtonBoxStyle
  ())

(define-func gtk_vbutton_box_set_spacing_default 
  none
  ((int spacing)))

(define-func gtk_vbutton_box_set_layout_default 
  none
  ((GtkButtonBoxStyle layout)))

; Dialog

(define-object GtkDialog (GtkWindow)
  (fields
   (GtkVBox vbox)
   (GtkHBox action_area)))

(define-func gtk_dialog_new
  GtkDialog
  ())

; Table

(define-object GtkTable (GtkContainer))

(define-func gtk_table_new
  GtkTable
  ((int rows)
   (int columns)
   (bool homogenous)))

;;;(define-func gtk_table_attach
;;;  none
;;;  ((GtkTable table)
;;;   (GtkWidget child)
;;;   (int left_attach)
;;;   (int right_attach)
;;;   (int top_attach)
;;;   (int bottom_attach)
;;;   (GtkAttachOptions xoptions (= "GTK_EXPAND|GTK_FILL"))
;;;   (GtkAttachOptions yoptions (= "GTK_EXPAND|GTK_FILL"))
;;;   (int xpadding (= "0"))
;;;   (int ypadding (= "0"))))

;;;(define-func gtk_table_attach_defaults
;;;  none
;;;  ((GtkTable table)
;;;   (GtkWidget child)
;;;   (int left_attach)
;;;   (int right_attach)
;;;   (int top_attach)
;;;   (int bottom_attach)))

(define-func gtk_table_set_row_spacing
  none
  ((GtkTable table)
   (int row)
   (int spacing)))

(define-func gtk_table_set_col_spacing
  none
  ((GtkTable table)
   (int column)
   (int spacing)))

(define-func gtk_table_set_row_spacings
  none
  ((GtkTable table)
   (int spacing)))

(define-func gtk_table_set_col_spacings
  none
  ((GtkTable table)
   (int spacing)))

(define-func gtk_table_set_homogeneous
  none
  ((GtkTable table)
   (bool homogeneous)))

; Packer

(define-object GtkPacker (GtkContainer))

(define-func gtk_packer_new
  GtkPacker
  ())

(define-func gtk_packer_add_defaults
  none
  ((GtkPacker packer)
   (GtkWidget child)
   (GtkSideType side)
   (GtkAnchorType anchor)
   (GtkPackerOptions options)))

(define-func gtk_packer_add
  none
  ((GtkPacker packer)
   (GtkWidget child)
   (GtkSideType side)
   (GtkAnchorType anchor)
   (GtkPackerOptions options)
   (uint border_width (= "0"))
   (uint pad_x (= "0"))  (uint pad_y (= "0"))
   (uint ipad_x (= "0")) (uint ipad_y (= "0"))))

(define-func gtk_packer_set_child_packing
  none
  ((GtkPacker packer)
   (GtkWidget child)
   (GtkSideType size)
   (GtkAnchorType anchor)
   (GtkPackerOptions options)
   (uint border_width (= "0"))
   (uint pad_x (= "0"))  (uint pad_y (= "0"))
   (uint ipad_x (= "0")) (uint ipad_y (= "0"))))

(define-func gtk_packer_reorder_child
  none
  ((GtkPacker packer)
   (GtkWidget widget)
   (int position)))

(define-func gtk_packer_set_spacing
  none
  ((GtkPacker packer)
   (uint spacing)))

(define-func gtk_packer_set_default_border_width
  none
  ((GtkPacker packer)
   (uint border)))

(define-func gtk_packer_set_default_pad
  none
  ((GtkPacker packer)
   (uint pad_x) (uint pad_y)))

(define-func gtk_packer_set_default_ipad
  none
  ((GtkPacker packer)
   (uint ipad_x) (uint ipad_y)))


; Panes

(define-object GtkPaned (GtkContainer))

(define-func gtk_paned_add1
  none
  ((GtkPaned paned)
   (GtkWidget child)))

(define-func gtk_paned_add2
  none
  ((GtkPaned paned)
   (GtkWidget child)))

(define-func gtk_paned_pack1
  none
  ((GtkPaned paned)
   (GtkWidget child)
   (bool resize)
   (bool shrink)))

(define-func gtk_paned_pack2
  none
  ((GtkPaned paned)
   (GtkWidget child)
   (bool resize)
   (bool shrink)))

(define-func gtk_paned_set_position
  none
  ((GtkPaned paned)
   (int position)))

(define-func gtk_paned_set_handle_size
  none
  ((GtkPaned paned)
   (uint size)))

(define-func gtk_paned_set_gutter_size
  none
  ((GtkPaned paned)
   (uint size)))

(define-object GtkHPaned (GtkPaned))
(define-func gtk_hpaned_new
  GtkHPaned
  ())
  
(define-object GtkVPaned (GtkPaned))
(define-func gtk_vpaned_new
  GtkVPaned
  ())

; Frame

(define-object GtkFrame (GtkBin))

(define-func gtk_frame_new
  GtkFrame
  ((string label (null-ok))))

(define-func gtk_frame_set_label
  none
  ((GtkFrame frame)
   (string label)))

(define-func gtk_frame_set_label_align
  none
  ((GtkFrame frame)
   (float xalign)
   (float yalign)))

(define-func gtk_frame_set_shadow_type
  none
  ((GtkFrame frame)
   (GtkShadowType typ)))

; Aspect Frame

(define-object GtkAspectFrame (GtkFrame))

(define-func gtk_aspect_frame_new
  GtkAspectFrame
  ((string label)
   (float xalign)
   (float yalign)
   (float ratio)
   (int obey_child)))

(define-func gtk_aspect_frame_set
  none
  ((GtkAspectFrame aspect_frame)
   (float xalign)
   (float yalign)
   (float ratio)
   (int obey_child)))

; Viewport

(define-object GtkViewport (GtkBin))

(define-func gtk_viewport_new
  GtkViewport
  ((GtkAdjustment hadjustment (null-ok) (= "NULL"))
   (GtkAdjustment vadjustment (null-ok) (= "NULL"))))

(define-func gtk_viewport_get_hadjustment
  GtkAdjustment
  ((GtkViewport viewport)))

(define-func gtk_viewport_get_vadjustment
  GtkAdjustment
  ((GtkViewport viewport)))

(define-func gtk_viewport_set_hadjustment
  none
  ((GtkViewport viewport)
   (GtkAdjustment adjustment)))

(define-func gtk_viewport_set_vadjustment
  none
  ((GtkViewport viewport)
   (GtkAdjustment adjustment)))

(define-func gtk_viewport_set_shadow_type
  none
  ((GtkViewport viewport)
   (GtkShadowType typ)))

; ScrolledWidow

(define-object GtkScrolledWindow (GtkContainer))

(define-func gtk_scrolled_window_new
  GtkScrolledWindow
  ((GtkAdjustment hadjustment (null-ok) (= "NULL"))
   (GtkAdjustment vadjustment (null-ok) (= "NULL"))))

(define-func gtk_scrolled_window_set_hadjustment
  none
  ((GtkScrolledWindow scrolled_window)
   (GtkAdjustment adjustment)))

(define-func gtk_scrolled_window_set_vadjustment
  none
  ((GtkScrolledWindow scrolled_window)
   (GtkAdjustment adjustment)))

(define-func gtk_scrolled_window_get_hadjustment
  GtkAdjustment
  ((GtkScrolledWindow scrolled_window)))

(define-func gtk_scrolled_window_get_vadjustment
  GtkAdjustment
  ((GtkScrolledWindow scrolled_window)))

(define-func gtk_scrolled_window_set_policy
  none
  ((GtkScrolledWindow scrolled_window)
   (GtkPolicyType hscrollbar_policy)
   (GtkPolicyType vscrollbar_policy)))

(define-func gtk_scrolled_window_set_placement
  none
  ((GtkScrolledWindow scrolled_window)
   (GtkCornerType window_placement)))

(define-func gtk_scrolled_window_add_with_viewport
  none
  ((GtkScrolledWindow scrolled_window)
   (GtkWidget child)))

; Notebook

(define-object GtkNotebook (GtkContainer)
  (fields
   (GtkPositionType tab_pos)))

(define-func gtk_notebook_new
  GtkNotebook
  ())

(define-func gtk_notebook_append_page
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)))

(define-func gtk_notebook_append_page_menu  
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)
   (GtkWidget menu_label)))

(define-func gtk_notebook_prepend_page
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)))

(define-func gtk_notebook_prepend_page_menu 
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)
   (GtkWidget menu_label)))

(define-func gtk_notebook_insert_page
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)
   (int position)))

(define-func gtk_notebook_insert_page_menu 
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)
   (GtkWidget menu_label)
   (int position)))

(define-func gtk_notebook_remove_page
  none
  ((GtkNotebook notebook)
   (int page_num)))

(define-func gtk_notebook_get_current_page
  int
  ((GtkNotebook notebook)))

(define-func gtk_notebook_get_nth_page
  GtkWidget
  ((GtkNotebook notebook)
   (int page_num)))

(define-func gtk_notebook_page_num
  int
  ((GtkNotebook notebook)
   (GtkWidget page)))

(define-func gtk_notebook_set_page
  none
  ((GtkNotebook notebook)
   (int page_num)))

(define-func gtk_notebook_next_page
  none
  ((GtkNotebook notebook)))

(define-func gtk_notebook_prev_page
  none
  ((GtkNotebook notebook)))

(define-func gtk_notebook_reorder_child
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (int position)))

(define-func gtk_notebook_set_tab_pos
  none
  ((GtkNotebook notebook)
   (GtkPositionType pos)))

(define-func gtk_notebook_set_show_tabs
  none
  ((GtkNotebook notebook)
   (bool show_tabs)))

(define-func gtk_notebook_set_show_border
  none
  ((GtkNotebook notebook)
   (bool show_border)))

(define-func gtk_notebook_set_scrollable 
  none
  ((GtkNotebook notebook)
   (int              scrollable)))

(define-func gtk_notebook_set_homogeneous_tabs
  none
  ((GtkNotebook notebook)
   (bool homogeneous)))

(define-func gtk_notebook_set_tab_border 
  none
  ((GtkNotebook notebook)
   (int border_width)))

(define-func gtk_notebook_set_tab_hborder
  none
  ((GtkNotebook notebook)
   (uint tab_hborder)))

(define-func gtk_notebook_set_tab_vborder
  none
  ((GtkNotebook notebook)
   (uint tab_vborder)))

(define-func gtk_notebook_popup_enable 
  none
  ((GtkNotebook notebook)))
   
(define-func gtk_notebook_popup_disable 
  none
  ((GtkNotebook notebook)))

(define-func gtk_notebook_get_tab_label
  GtkWidget
  ((GtkNotebook notebook)
   (GtkWidget child)))

(define-func gtk_notebook_set_tab_label
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget tab_label)))

(define-func gtk_notebook_set_tab_label_text
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (string tab_text)))

(define-func gtk_notebook_get_menu_label
  GtkWidget
  ((GtkNotebook notebook)
   (GtkWidget child)))

(define-func gtk_notebook_set_menu_label
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (GtkWidget menu_label)))

(define-func gtk_notebook_set_menu_label_text
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (string menu_text)))

(define-func gtk_notebook_query_tab_label_packing
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (bool expand (output))
   (bool fill (output))
   (GtkPackType pack_type (output))))

(define-func gtk_notebook_set_tab_label_packing
  none
  ((GtkNotebook notebook)
   (GtkWidget child)
   (bool expand)
   (bool fill)
   (GtkPackType pack_type)))

; Alignment

(define-object GtkAlignment (GtkBin))

(define-func gtk_alignment_new
  GtkAlignment
  ((float xalign)
   (float yalign)
   (float xscale)
   (float yscale)))

(define-func gtk_alignment_set
  none
  ((GtkAlignment alignment)
   (float xalign)
   (float yalign)
   (float xscale)
   (float yscale)))

; gtklayout.h
(define-object GtkLayout (GtkContainer))

(define-func gtk_layout_new
  GtkLayout
  ((GtkAdjustment hadjustment (null-ok) (= "NULL"))
   (GtkAdjustment vadjustment (null-ok) (= "NULL"))))

(define-func gtk_layout_put
  none
  ((GtkLayout layout)
   (GtkWidget child)
   (int x) (int y)))

(define-func gtk_layout_move
  none
  ((GtkLayout layout)
   (GtkWidget child)
   (int x) (int y)))

(define-func gtk_layout_set_size
  none
  ((GtkLayout layout)
   (uint width) (uint height)))

(define-func gtk_layout_freeze
  none
  ((GtkLayout layout)))

(define-func gtk_layout_thaw
  none
  ((GtkLayout layout)))

(define-func gtk_layout_get_hadjustment
  GtkAdjustment
  ((GtkLayout layout)))

(define-func gtk_layout_get_vadjustment
  GtkAdjustment
  ((GtkLayout layout)))

(define-func gtk_layout_set_hadjustment
  none
  ((GtkLayout layout)
   (GtkAdjustment adjustment)))

(define-func gtk_layout_set_vadjustment
  none
  ((GtkLayout layout)
   (GtkAdjustment adjustment)))

; gtk-plug.h
(define-object GtkPlug (GtkWindow))

(define-func gtk_plug_new
  GtkPlug
  ((uint socket_id)))

; gtk-socket.h
;;;(define-object GtkSocket (GtkContainerClass))

;;;(define-func gtk_socket_new
;;;  GtkWidget
;;;  ())

;;;(define-func gtk_socket_steal
;;;  none
;;;  ((GtkSocket socket)
;;;   (uint window_id)))


; all the rest ...
;(include "gtkmisc.defs")

; Toolbar

(define-object GtkToolbar (GtkContainer))

(define-func gtk_toolbar_new
  GtkToolbar
  ((GtkOrientation orientation)
   (GtkToolbarStyle style)))

;; gtk_toolbar_append_item
;; gtk_toolbar_prepend_item
;; gtk_toolbar_insert_item
 
(define-func gtk_toolbar_append_space
  none
  ((GtkToolbar toolbar)))

(define-func gtk_toolbar_prepend_space
  none
  ((GtkToolbar toolbar)))

(define-func gtk_toolbar_insert_space
  none
  ((GtkToolbar toolbar)
   (int position)))

;; (define-func gtk_toolbar_append_element)
;; (define-func gtk_toolbar_prepend_element)
;; (define-func gtk_toolbar_insert_element)

(define-func gtk_toolbar_append_widget
  none
  ((GtkToolbar Toolbar)
   (GtkWidget Widget)
   (string tooltip_text)
   (string tooltip_private_text)))

(define-func gtk_toolbar_prepend_widget
  none
  ((GtkToolbar Toolbar)
   (GtkWidget Widget)
   (string tooltip_text)
   (string tooltip_private_text)))

(define-func gtk_toolbar_insert_widget
  none
  ((GtkToolbar toolbar)
   (GtkWidget widget)
   (string tooltip_text)
   (string tooltip_private_text)
   (int position)))

(define-func gtk_toolbar_set_orientation
  none
  ((GtkToolbar toolbar)
   (GtkOrientation orientation)))

(define-func gtk_toolbar_set_style
  none
  ((GtkToolbar toolbar)
   (GtkToolbarStyle style)))

(define-func gtk_toolbar_set_space_size
  none
  ((GtkToolbar toolbar)
   (int space_size)))

(define-func gtk_toolbar_set_space_style
  none
  ((GtkToolbar toolbar)
   (GtkToolbarSpaceStyle space_style)))

(define-func gtk_toolbar_set_tooltips
  none
  ((GtkToolbar toolbar)
   (bool enable)))

(define-func gtk_toolbar_set_button_relief
  none
  ((GtkToolbar toolbar)
   (GtkReliefStyle relief)))

(define-func gtk_toolbar_get_button_relief
  GtkReliefStyle
  ((GtkToolbar toolbar)))

; Button

(define-object GtkButton (GtkContainer))

(define-func gtk_button_new
  GtkButton
  ())

(define-func gtk_button_new_with_label
  GtkButton
  ((string label)))

(define-func gtk_button_pressed
  none
  ((GtkButton button)))

(define-func gtk_button_released
  none
  ((GtkButton button)))

(define-func gtk_button_clicked
  none
  ((GtkButton button)))

(define-func gtk_button_enter
  none
  ((GtkButton button)))

(define-func gtk_button_leave
  none
  ((GtkButton button)))

(define-func gtk_button_set_relief
  none
  ((GtkButton button)
   (GtkReliefStyle newstyle)))

(define-func gtk_button_get_relief
  GtkReliefStyle
  ((GtkButton button)))

; ToggleButton

(define-object GtkToggleButton (GtkButton)
  (fields
   (bool draw_indicator)))

(define-func gtk_toggle_button_new
  GtkToggleButton
  ())

(define-func gtk_toggle_button_new_with_label
  GtkToggleButton
  ((string label)))

(define-func gtk_toggle_button_set_mode
  none
  ((GtkToggleButton toggle_button)
   (bool draw_indicator)))

(define-func gtk_toggle_button_set_active
  none
  ((GtkToggleButton toggle_button)
   (bool state)))

(define-func gtk_toggle_button_get_active
  bool
  ((GtkToggleButton toggle_button)))

(define-func gtk_toggle_button_toggled
  none
  ((GtkToggleButton toggle_button)))

; CheckButton

(define-object GtkCheckButton (GtkToggleButton))

(define-func gtk_check_button_new
  GtkCheckButton
  ())

(define-func gtk_check_button_new_with_label
  GtkCheckButton
  ((string label)))

; RadioButton

(define-object GtkRadioButton (GtkCheckButton))

(define-func gtk_radio_button_new_from_widget
  GtkRadioButton
  ((GtkRadioButton group)))

(define-func gtk_radio_button_new_with_label_from_widget
  GtkRadioButton
  ((GtkRadioButton group (null-ok))
   (string label)))

; Misc

(define-object GtkMisc (GtkWidget))

(define-func gtk_misc_set_alignment
  none
  ((GtkMisc misc)
   (float xalign)
   (float yalign)))

(define-func gtk_misc_set_padding
  none
  ((GtkMisc misc)
   (int xpad)
   (int ypad)))

; Arrow

(define-object GtkArrow (GtkMisc))

(define-func gtk_arrow_new 
  GtkArrow
  ((GtkArrowType arrow_type)
   (GtkShadowType shadow_type)))

(define-func gtk_arrow_set
  none
  ((GtkArrow arrow)
   (GtkArrowType arrow_type)
   (GtkShadowType shadow_type)))

; Label

(define-object GtkLabel (GtkMisc))

(define-func gtk_label_new
  GtkLabel
  ((string str)))

(define-func gtk_label_set_text
  none
  ((GtkLabel label)
   (string str)))

(define-func gtk_label_set_pattern
  none
  ((GtkLabel label)
   (string pattern)))

(define-func gtk_label_set_justify
  none
  ((GtkLabel label)
   (GtkJustification jtype)))

(define-func gtk_label_set_line_wrap
  none
  ((GtkLabel label)
   (bool wrap)))

(define-func gtk_label_parse_uline
  uint
  ((GtkLabel label)
   (string string)))

(define-func gtk_label_get
  none
  ((GtkLabel label)
   (string str (output))))

; Accel Label

(define-object GtkAccelLabel (GtkLabel))

(define-func gtk_accel_label_new
  GtkAccelLabel
  ((string string)))

(define-func gtk_accel_label_get_accel_width
  uint
  ((GtkAccelLabel accel_label)))

(define-func gtk_accel_label_set_accel_widget
  none
  ((GtkAccelLabel accel_label)
   (GtkWidget accel_widget)))

(define-func gtk_accel_label_refetch
  bool
  ((GtkAccelLabel accel_label)))

; Tips Query

(define-object GtkTipsQuery (GtkLabel))

(define-func gtk_tips_query_new
  GtkTipsQuery
  ())

(define-func gtk_tips_query_start_query
  none
  ((GtkTipsQuery tips_query)))

(define-func gtk_tips_query_stop_query
  none
  ((GtkTipsQuery tips_query)))

(define-func gtk_tips_query_set_caller
  none
  ((GtkTipsQuery tips_query)
   (GtkWidget caller)))

(define-func gtk_tips_query_set_labels
  none
  ((GtkTipsQuery tips_query)
   (string label_inactive)
   (string label_no_tip)))

; Item

(define-object GtkItem (GtkBin))

(define-func gtk_item_select 
  none
  ((GtkItem item)))

(define-func gtk_item_deselect 
  none
  ((GtkItem item)))

(define-func gtk_item_toggle 
  none
  ((GtkItem item)))

; StatusBar

(define-object GtkStatusbar (GtkHBox))

(define-func gtk_statusbar_new
  GtkStatusbar
  ())

(define-func gtk_statusbar_push
  uint
  ((GtkStatusbar statusbar)
   (uint context_id)
   (string text)))

(define-func gtk_statusbar_pop
  none
  ((GtkStatusbar statusbar)
   (uint context_id)))

(define-func gtk_statusbar_get_context_id
  uint
  ((GtkStatusbar statusbar)
   (string context_description)))

(define-func gtk_statusbar_remove
  none
  ((GtkStatusbar statusbar)
   (uint context_id)
   (uint message_id)))

; Separator

(define-object GtkSeparator (GtkWidget))

; HSeparator

(define-object GtkHSeparator (GtkSeparator))

(define-func gtk_hseparator_new
  GtkHSeparator
  ())

; VSeparator

(define-object GtkVSeparator (GtkSeparator))

(define-func gtk_vseparator_new
  GtkVSeparator
  ())

; Progress
(define-object GtkProgress (GtkWidget))

(define-func gtk_progress_set_show_text
  none
  ((GtkProgress progress)
   (int show_text)))

(define-func gtk_progress_set_text_alignment
  none
  ((GtkProgress progress)
   (float x_align) (float y_align)))

(define-func gtk_progress_set_format_string
  none
  ((GtkProgress progress)
   (string format)))

(define-func gtk_progress_set_adjustment
  none
  ((GtkProgress progress)
   (GtkAdjustment adjustment)))

(define-func gtk_progress_configure
  none
  ((GtkProgress progress)
   (float valu) (float min) (float max)))

(define-func gtk_progress_set_percentage
  none
  ((GtkProgress progress)
   (float percentage)))

(define-func gtk_progress_set_value
  none
  ((GtkProgress progress)
   (float valu)))

(define-func gtk_progress_get_value
  float
  ((GtkProgress progress)))

(define-func gtk_progress_set_activity_mode
  none
  ((GtkProgress progress)
   (uint activity_mode)))

(define-func gtk_progress_get_current_text
  string
  ((GtkProgress progress)))

(define-func gtk_progress_get_text_from_value
  string
  ((GtkProgress progress)
   (float valu)))

(define-func gtk_progress_get_current_percentage
  float
  ((GtkProgress progress)))

(define-func gtk_progress_get_percentage_from_value
  float
  ((GtkProgress progress)
   (float valu)))

; Progress Bar

(define-object GtkProgressBar (GtkWidget))

(define-func gtk_progress_bar_new
  GtkProgressBar
  ())

(define-func gtk_progress_bar_new_with_adjustment
  GtkProgressBar
  ((GtkAdjustment adjustment)))

(define-func gtk_progress_bar_set_bar_style
  none
  ((GtkProgressBar pbar)
   (GtkProgressBarStyle style)))

(define-func gtk_progress_bar_set_discrete_blocks
  none
  ((GtkProgressBar pbar)
   (uint blocks)))

(define-func gtk_progress_bar_set_activity_step
  none
  ((GtkProgressBar pbar)
   (uint step)))

(define-func gtk_progress_bar_set_activity_blocks
  none
  ((GtkProgressBar pbar)
   (uint blocks)))

(define-func gtk_progress_bar_set_orientation
  none
  ((GtkProgressBar pbar)
   (GtkProgressBarOrientation orientation)))

(define-func gtk_progress_bar_update
  none
  ((GtkProgressBar progress_bar)
   (float percentage)))

;;(define-func gtk_progress_bar_percentage
;;  float
;;  ((GtkProgressBar progress_bar)))

; Image
;;;(define-object GtkImage (GtkMisc))

;;;(define-func gtk_image_new
;;;  GtkWidget
;;;  ((GdkImage val)
;;;   (GdkBitmap mask)))

;;;(define-func gtk_image_get
;;;  none
;;;  ((GtkImage image)
;;;   (GdkImage** val)
;;;   (GdkBitmap** mask)))

;;;(define-func gtk_image_set
;;;  none
;;;  ((GtkImage image)
;;;   (GdkImage val)
;;;   (GdkBitmap mask)))

; Pixmaps

(define-object GtkPixmap (GtkMisc))

(define-func gtk_pixmap_new
  GtkWidget
  ((GdkPixmap pixmap)
   (GdkBitmap mask (null-ok))))

(define-func gtk_pixmap_set
  none
  ((GtkPixmap pixmap)
   (GdkPixmap valu)
   (GdkBitmap mask)))
;;gtk_pixmap_get

(define-func gtk_pixmap_set_build_insensitive
  none
  ((GtkPixmap pixmap)
   (uint build)))

; ColorSelection

(define-object GtkColorSelection (GtkVBox))

(define-func gtk_color_selection_new
  GtkColorSelection
  ())

(define-func gtk_color_selection_set_update_policy
  none
  ((GtkColorSelection colorsel)
   (GtkUpdateType policy)))

(define-func gtk_color_selection_set_opacity
  none
  ((GtkColorSelection colorsel)
   (bool use_opacity)))

;; (define-func gtk_color_selection_set_color)

;; (define-func gtk_color_selection_get_color)

; ColorSelectionDialog

(define-object GtkColorSelectionDialog (GtkWindow)
  (fields
   (GtkColorSelection colorsel)
   (GtkVBox main_vbox)
   (GtkButton ok_button)
   (GtkButton reset_button)
   (GtkButton cancel_button)
   (GtkButton help_button)))

(define-func gtk_color_selection_dialog_new
  GtkColorSelectionDialog
  ((string title)))

; InputDialog

(define-object GtkInputDialog (GtkDialog)
  (fields
   (GtkButton close_button)
   (GtkButton save_button)))

(define-func gtk_input_dialog_new
  GtkInputDialog
  ())

; DrawingArea 

(define-object GtkDrawingArea (GtkWidget))

(define-func gtk_drawing_area_new
  GtkDrawingArea
  ())

(define-func gtk_drawing_area_size
  none
  ((GtkDrawingArea darea)
   (int width)
   (int height)))

; Curve

(define-object GtkCurve (GtkDrawingArea))

(define-func gtk_curve_new
  GtkCurve
  ())

(define-func gtk_curve_reset
  none
  ((GtkCurve curve)))

(define-func gtk_curve_set_gamma
  none
  ((GtkCurve curve)
   (float gamma)))

(define-func gtk_curve_set_range
  none
  ((GtkCurve curve)
   (float min_x)
   (float max_x)
   (float min_y)
   (float max_y)))

;; (define-func gtk_curve_set_vector)

;; (define-func gtk_curve_get_vector)

(define-func gtk_curve_set_curve_type
  none
  ((GtkCurve curve)
   (GtkCurveType typ)))

; GammaCurve

(define-object GtkGammaCurve (GtkVBox)
;;; The documentation says not to touch, HN
;;;  (fields                     ; Henning, update types
;;;   (GtkWidget table)
;;;   (GtkWidget curve)
;;;   (float gamma)
;;;   (GtkWidget gamma_dialog)
;;;  (GtkWidget gamma_text))
)

(define-func gtk_gamma_curve_new
  GtkGammaCurve
  ())

; FileSelection

(define-object GtkFileSelection (GtkWindow)
  (fields                        ; Henning, update types
   (GtkWidget dir_list)
   (GtkWidget file_list)
   (GtkWidget selection_entry)
   (GtkWidget selection_text)
   (GtkVBox main_vbox)
   (GtkButton ok_button)
   (GtkButton cancel_button)
   (GtkButton help_button)))

(define-func gtk_file_selection_new
  GtkFileSelection
  ((string title)))

(define-func gtk_file_selection_set_filename
  none
  ((GtkFileSelection filesel)
   (string filename)))

(define-func gtk_file_selection_get_filename
  static_string
  ((GtkFileSelection filesel)))

(define-func gtk_file_selection_complete
  none
  ((GtkFileSelection filesel)
   (string pattern)))

(define-func gtk_file_selection_show_fileop_buttons
  none
  ((GtkFileSelection filesel)))

(define-func gtk_file_selection_hide_fileop_buttons
  none
  ((GtkFileSelection filesel)))

; Font Selection

(define-object GtkFontSelection (GtkNotebook))

(define-func gtk_font_selection_new
  GtkFontSelection
  ())

(define-func gtk_font_selection_get_font_name
  string
  ((GtkFontSelection fontsel)))

(define-func gtk_font_selection_get_font
  GdkFont
  ((GtkFontSelection fontsel)))

(define-func gtk_font_selection_set_font_name
  bool
  ((GtkFontSelection fontsel)
   (string fontname)))

(define-func gtk_font_selection_get_preview_text
  static_string
  ((GtkFontSelection fontsel)))

(define-func gtk_font_selection_set_preview_text
  none
  ((GtkFontSelection fontsel)
   (string text)))

(define-object GtkFontSelectionDialog (GtkWindow)
  (fields                      ; Henning, update types
   (GtkWidget fontsel)
   (GtkVBox main_vbox)
   (GtkWidget action_area)
   (GtkButton ok_button)
   (GtkButton apply_button)
   (GtkButton cancel_button)))

(define-func gtk_font_selection_dialog_new
  GtkFontSelectionDialog
  ((string title)))

(define-func gtk_font_selection_dialog_get_font_name
  string
  ((GtkFontSelectionDialog fsd)))

(define-func gtk_font_selection_dialog_get_font
  GdkFont
  ((GtkFontSelectionDialog fsd)))

(define-func gtk_font_selection_dialog_set_font_name
  bool
  ((GtkFontSelectionDialog fsd)
   (string fontname)))

(define-func gtk_font_selection_dialog_get_preview_text
  static_string
  ((GtkFontSelectionDialog fsd)))

(define-func gtk_font_selection_dialog_set_preview_text
  none
  ((GtkFontSelectionDialog fsd)
   (string text)))

(define-object GtkPreview (GtkWidget))

(define-func gtk_preview_new 
  GtkWidget
  ((GtkPreviewType typ)))

(define-func gtk_preview_size 
  none
  ((GtkPreview preview)
   (int width)
   (int height)))

(define-func gtk_preview_put
  none
  ((GtkPreview preview)
   (GdkWindow window)
   (GdkGC gc)
   (int srcx)  (int srcy)
   (int destx) (int desty)
   (int width) (int height)))

(define-func gtk_preview_draw_row
  none
  ((GtkPreview preview)
   (string data)
   (int x) (int y)
   (int width)))

(define-func gtk_preview_set_expand
  none
  ((GtkPreview preview)
   (int expand)))

;;;(define-func gtk_preview_set_gamma
;;;  none
;;;  ((double gamma)))

(define-func gtk_preview_set_color_cube
  none
  ((uint nred_shades)
   (uint ngreen_shades)
   (uint nblue_shades)
   (uint ngray_shades)))

(define-func gtk_preview_set_install_cmap
  none
  ((int install_cmap)))

(define-func gtk_preview_set_reserved
  none
  ((int nreserved)))

(define-func gtk_preview_set_dither
  none
  ((GtkPreview preview)
   (GdkRgbDither dither)))

; Calendar widget

(define-object GtkCalendar (GtkWidget))

(define-func gtk_calendar_new
  GtkCalendar
  ())

(define-func gtk_calendar_select_month
  int
  ((GtkCalendar calendar)
   (uint month)
   (uint year)))

(define-func gtk_calendar_select_day
  none
  ((GtkCalendar calendar)
   (uint day)))

(define-func gtk_calendar_mark_day
  int
  ((GtkCalendar calendar)
   (uint day)))

(define-func gtk_calendar_unmark_day
  int
  ((GtkCalendar calendar)
   (uint day)))

(define-func gtk_calendar_clear_marks
  none
  ((GtkCalendar calendar)))

(define-func gtk_calendar_display_options
  none
  ((GtkCalendar calendar)
   (GtkCalendarDisplayOptions flags)))

(define-func gtk_calendar_get_date
  none
  ((GtkCalendar cal)
   (uint year (output))
   (uint month (output))
   (uint day (output))))

(define-func gtk_calendar_freeze
  none
  ((GtkCalendar calendar)))

(define-func gtk_calendar_thaw
  none
  ((GtkCalendar calendar)))


; trees/lists ...
;(include "gtklists.defs")

(define-object GtkTree (GtkContainer))

(define-object GtkTreeItem (GtkItem)
  (fields (GtkTree subtree))
)

(define-func gtk_tree_item_new
  GtkTreeItem
  ())

(define-func gtk_tree_item_new_with_label
  GtkTreeItem
  ((string label)))

(define-func gtk_tree_item_set_subtree
  none
  ((GtkTreeItem tree_item)
   (GtkWidget subtree)))

(define-func gtk_tree_item_remove_subtree
  none
  ((GtkTreeItem tree_item)))

(define-func gtk_tree_item_select
  none
  ((GtkTreeItem tree_item)))

(define-func gtk_tree_item_deselect
  none
  ((GtkTreeItem tree_item)))

(define-func gtk_tree_item_expand
  none
  ((GtkTreeItem tree_item)))

(define-func gtk_tree_item_collapse
  none
  ((GtkTreeItem tree_item)))

; Tree

; Definition of GtkTree moved to above TreeItem
; so it can access it, HN
; (define-object GtkTree (GtkContainer))

(define-func gtk_tree_new 
  GtkTree
  ())

(define-func gtk_tree_append
  none
  ((GtkTree tree)
   (GtkWidget child)))

(define-func gtk_tree_prepend
  none
  ((GtkTree tree)
   (GtkWidget child)))

(define-func gtk_tree_insert
  none
  ((GtkTree tree)
   (GtkWidget child)
   (int position)))

(define-func gtk_tree_remove_item
  none
  ((GtkTree tree)
   (GtkWidget child)))

;;;(define-func gtk_tree_remove_items
;;;  none
;;;  ((GtkTree tree)
;;;   (GList* items)))

(define-func gtk_tree_clear_items
  none
  ((GtkTree tree)
   (int start_item)
   (int end_item)))

(define-func gtk_tree_select_item
  none
  ((GtkTree tree)
   (int item)))

(define-func gtk_tree_unselect_item
  none
  ((GtkTree tree)
   (int item)))

(define-func gtk_tree_select_child
  none
  ((GtkTree tree)
   (GtkWidget child)))

(define-func gtk_tree_unselect_child
  none
  ((GtkTree tree)
   (GtkWidget child)))

(define-func gtk_tree_child_position
  int
  ((GtkTree tree)
   (GtkWidget child)))

(define-func gtk_tree_set_selection_mode
  none
  ((GtkTree tree)
   (GtkSelectionMode mode)))

(define-func gtk_tree_set_view_mode
  none
  ((GtkTree tree)
   (GtkTreeViewMode mode)))

(define-func gtk_tree_set_view_lines
  none
  ((GtkTree tree)
   (bool flag)))

; GtkCList

(define-object GtkCList (GtkContainer)
  (fields
   (int focus_row)
   (int rows)))

(define-func gtk_clist_new 
  GtkCList
  ((int columns)))

;; gtk_clist_new_with_titles

(define-func gtk_clist_set_shadow_type
 none
 ((GtkCList clist)
  (GtkShadowType border)))

(define-func gtk_clist_set_selection_mode
 none
 ((GtkCList clist)
  (GtkSelectionMode mode)))

(define-func gtk_clist_set_reorderable
  none
  ((GtkCList clist)
   (bool reorderable)))

(define-func gtk_clist_set_use_drag_icons
  none
  ((GtkCList clist)
   (bool use_icons)))

(define-func gtk_clist_set_button_actions
  none
  ((GtkCList clist)
   (uint button)
   (uint button_actions)))

(define-func gtk_clist_set_hadjustment
  none
  ((GtkCList clist)
   (GtkAdjustment adjustment)))

(define-func gtk_clist_set_vadjustment
  none
  ((GtkCList clist)
   (GtkAdjustment adjustment)))

(define-func gtk_clist_get_hadjustment
  GtkAdjustment
  ((GtkCList clist)))

(define-func gtk_clist_get_vadjustment
  GtkAdjustment
  ((GtkCList clist)))

(define-func gtk_clist_freeze
 none
 ((GtkCList clist)))

(define-func gtk_clist_thaw
 none
 ((GtkCList clist)))

(define-func gtk_clist_column_titles_show
 none
 ((GtkCList clist)))

(define-func gtk_clist_column_titles_hide
 none
 ((GtkCList clist)))

(define-func gtk_clist_column_title_active
 none
 ((GtkCList clist)
  (int column)))

(define-func gtk_clist_column_title_passive
 none
 ((GtkCList clist)
  (int column)))

(define-func gtk_clist_column_titles_active
 none
 ((GtkCList clist)))

(define-func gtk_clist_column_titles_passive
 none
 ((GtkCList clist)))

(define-func gtk_clist_set_column_title
  none
  ((GtkCList clist)
   (int column)
   (string title)))

(define-func gtk_clist_get_column_title
  static_string
  ((GtkCList clist)
   (int column)))

(define-func gtk_clist_set_column_widget
  none
  ((GtkCList clist)
   (int column)
   (GtkWidget widget)))

(define-func gtk_clist_get_column_widget
  GtkWidget
  ((GtkCList clist)
   (int column)))

(define-func gtk_clist_set_column_justification
  none
  ((GtkCList clist)
   (int column)
   (GtkJustification justification)))

(define-func gtk_clist_set_column_visibility
  none
  ((GtkCList clist)
   (int column)
   (bool visible)))

(define-func gtk_clist_set_column_resizeable
  none
  ((GtkCList clist)
   (int column)
   (bool resizeable)))

(define-func gtk_clist_set_column_auto_resize
  none
  ((GtkCList clist)
   (int column)
   (bool auto_resize)))

(define-func gtk_clist_columns_autosize
  int
  ((GtkCList clist)))

(define-func gtk_clist_optimal_column_width
  int
  ((GtkCList clist)
   (int column)))

(define-func gtk_clist_set_column_width
  none
  ((GtkCList clist)
   (int column)
   (int width)))

(define-func gtk_clist_set_column_min_width
  none
  ((GtkCList clist)
   (int column)
   (int min_width)))

(define-func gtk_clist_set_column_max_width
  none
  ((GtkCList clist)
   (int column)
   (int max_width)))

(define-func gtk_clist_set_row_height
  none
  ((GtkCList clist)
   (uint height)))

(define-func gtk_clist_moveto
  none
  ((GtkCList clist)
   (int row)
   (int column)
   (float row_align)
   (float column_align)))

(define-func gtk_clist_row_is_visible
  bool
  ((GtkCList clist)
   (int row)))

(define-func gtk_clist_get_cell_type
  GtkCellType
  ((GtkCList clist)
   (int row) (int column)))

(define-func gtk_clist_set_text
  none
  ((GtkCList clist)
   (int row)
   (int column)
   (string text)))

(define-func gtk_clist_get_text
  int
  ((GtkCList clist)
   (int row)
   (int column)
   (string text (output))))

;; gtk_clist_get_pixmap

(define-func gtk_clist_set_pixmap
  none
  ((GtkCList clist)
   (int row) (int col)
   (GdkPixmap pixmap)
   (GdkBitmap mask)))

(define-func gtk_clist_set_pixtext
  none
  ((GtkCList clist)
   (int row) (int col)
   (string text)
   (uint spacing)
   (GdkPixmap pixmap)
   (GdkBitmap mask (null-ok))))

(define-func gtk_clist_set_foreground
  none
  ((GtkCList clist)
   (int row)
   (GdkColor color)))

(define-func gtk_clist_set_background
  none
  ((GtkCList clist)
   (int row)
   (GdkColor color)))

(define-func gtk_clist_set_cell_style
  none
  ((GtkCList clist)
   (int row)
   (int column)
   (GtkStyle style)))

(define-func gtk_clist_get_cell_style
  GtkStyle
  ((GtkCList clist)
   (int row)
   (int column)))

(define-func gtk_clist_set_row_style
  none
  ((GtkCList clist)
   (int row)
   (GtkStyle style)))

(define-func gtk_clist_get_row_style
  GtkStyle
  ((GtkCList clist)
   (int row)))

(define-func gtk_clist_set_shift 
  none
  ((GtkCList clist)
   (int row)
   (int column)
   (int vertical)
   (int horizontal)))

(define-func gtk_clist_set_selectable
  none
  ((GtkCList clist)
   (int row)
   (bool selectable)))

(define-func gtk_clist_get_selectable
  none
  ((GtkCList clist)
   (int row)))

;; gtk_clist_append
;; gtk_clist_insert

(define-func gtk_clist_remove 
  none
  ((GtkCList clist)
   (int row)))

;; gtk_clist_set_row_data
;; gtk_clist_get_row_data
;; gtk_clist_find_row_from_data

(define-func gtk_clist_select_row
  none
  ((GtkCList clist)
   (int row)
   (int column)))

(define-func gtk_clist_unselect_row
  none
  ((GtkCList clist)
   (int row)
   (int column)))

(define-func gtk_clist_undo_selection
  none
  ((GtkCList clist)))

(define-func gtk_clist_clear
  none
  ((GtkCList clist)))

(define-func gtk_clist_get_selection_info
  int
  ((GtkCList clist)
   (int x)
   (int y)
   (int row (output))
   (int column (output))))


(define-func gtk_clist_select_all
  none
  ((GtkCList clist)))

(define-func gtk_clist_unselect_all
  none
  ((GtkCList clist)))

(define-func gtk_clist_swap_rows
  none
  ((GtkCList clist)
   (int row1) (int row2)))

(define-func gtk_clist_row_move
  none
  ((GtkCList clist)
   (int source_row)
   (int dest_row)))

(define-func gtk_clist_set_sort_column
  none
  ((GtkCList clist)
   (int column)))

(define-func gtk_clist_set_sort_type
  none
  ((GtkCList clist)
   (GtkSortType sort_type)))

(define-func gtk_clist_sort
  none
  ((GtkCList clist)))

(define-func gtk_clist_set_auto_sort
  none
  ((GtkCList clist)
   (bool auto_sort)))

; ListItem

(define-object GtkListItem (GtkItem))

(define-func gtk_list_item_new
  GtkListItem
  ())

(define-func gtk_list_item_new_with_label
  GtkListItem
  ((string label)))

(define-func gtk_list_item_select
  none
  ((GtkListItem list_item)))

(define-func gtk_list_item_deselect
  none
  ((GtkListItem list_item)))

; List

(define-object GtkList (GtkContainer))

(define-func gtk_list_new
  GtkList
  ())

;;;(define-func gtk_list_insert_items
;;;  none
;;;  ((GtkList list)
;;;   (GList* items)
;;;   (int position)))

;;;(define-func gtk_list_append_items
;;;  none
;;;  ((GtkList list)
;;;   (GList* items)))

;;;(define-func gtk_list_prepend_items
;;;  none
;;;  ((GtkList list)
;;;   (GList* items)))

;;;(define-func gtk_list_remove_items
;;;  none
;;;  ((GtkList list)
;;;   (GList* items)))

(define-func gtk_list_clear_items
  none
  ((GtkList list)
   (int start_item)
   (int end_item)))

(define-func gtk_list_select_item
  none
  ((GtkList list)
   (int item)))

(define-func gtk_list_unselect_item
  none
  ((GtkList list)
   (int item)))

(define-func gtk_list_select_child
  none
  ((GtkList list)
   (GtkWidget child)))

(define-func gtk_list_unselect_child
  none
  ((GtkList list)
   (GtkWidget child)))

(define-func gtk_list_child_position
  int
  ((GtkList list)
   (GtkWidget child)))

(define-func gtk_list_set_selection_mode
  none
  ((GtkList list)
   (GtkSelectionMode mode)))

(define-func gtk_list_extend_selection
  none
  ((GtkList list)
   (GtkScrollType scroll_type)
   (float position)
   (bool auto_start)))

(define-func gtk_list_start_selection
  none
  ((GtkList list)))

(define-func gtk_list_end_selection
  none
  ((GtkList list)))

(define-func gtk_list_select_all
  none
  ((GtkList list)))

(define-func gtk_list_unselect_all
  none
  ((GtkList list)))

(define-func gtk_list_scroll_horizontal
  none
  ((GtkList list)
   (GtkScrollType scroll_type)
   (float pos)))

(define-func gtk_list_scroll_vertical
  none
  ((GtkList list)
   (GtkScrollType scroll_type)
   (float pos)))

(define-func gtk_list_toggle_add_mode
  none
  ((GtkList list)))

(define-func gtk_list_toggle_focus_row
  none
  ((GtkList list)))

(define-func gtk_list_toggle_row
  none
  ((GtkList list)
   (GtkWidget item)))

(define-func gtk_list_undo_selection
  none
  ((GtkList list)))

(define-func gtk_list_end_drag_selection
  none
  ((GtkList list)))


; GtkCTree

(define-object GtkCTree (GtkCList))

;; gtk_ctree_new_with_titles

(define-func gtk_ctree_new
  GtkWidget
  ((int columns)
   (int tree_column)))

;;gtk_ctree_insert_node

(define-func gtk_ctree_remove_node
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_is_viewable
  bool
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_last
  GtkCTreeNode
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

;;gtk_ctree_find_node_ptr

(define-func gtk_ctree_node_nth
;;;  (GtkCTreeNode null-ok)           ;;; Henning, this may not parse!
  GtkCTreeNode
  ((GtkCTree ctree)
   (uint row)))

(define-func gtk_ctree_find
  bool
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GtkCTreeNode child)))

(define-func gtk_ctree_is_ancestor
  bool
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GtkCTreeNode child)))

;; gtk_ctree_find_by_row_data
;; gtk_ctree_find_all_by_row_data

(define-func gtk_ctree_is_hot_spot
  bool
  ((GtkCTree ctree)
   (int x) (int y)))

(define-func gtk_ctree_move
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GtkCTreeNode new_parent)
   (GtkCTreeNode new_sibling)))

(define-func gtk_ctree_expand
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_expand_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_expand_to_depth
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int depth)))

(define-func gtk_ctree_collapse
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_collapse_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_collapse_to_depth
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int depth)))

(define-func gtk_ctree_toggle_expansion
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_toggle_expansion_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_select
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_select_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_unselect
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_unselect_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_real_select_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int state)))

(define-func gtk_ctree_node_set_text
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (string text)))

(define-func gtk_ctree_node_set_pixmap
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (GdkPixmap pixmap)
   (GdkBitmap mask)))

(define-func gtk_ctree_node_set_pixtext
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (string text)
   (uint spacing)
   (GdkPixmap pixmap)
   (GdkBitmap mask)))

(define-func gtk_ctree_set_node_info
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (string text)
   (uint spacing)
   (GdkPixmap pixmap_closed) (GdkBitmap mask_closed)
   (GdkPixmap pixmap_opened) (GdkBitmap mask_opened)
   (bool is_leaf)
   (bool expanded)))

(define-func gtk_ctree_node_set_shift
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (int vertical) (int horizontal)))

(define-func gtk_ctree_node_set_selectable
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (bool selectable)))

(define-func gtk_ctree_node_get_selectable
  bool
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_node_get_cell_type
  GtkCellType
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)))

(define-func gtk_ctree_node_get_text
  int
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (string text (output))))

;; gtk_ctree_node_get_pixmap
;; gtk_ctree_node_get_pixtext
;; gtk_ctree_get_node_info

(define-func gtk_ctree_node_set_row_style
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GtkStyle style)))

(define-func gtk_ctree_node_get_row_style
  GtkStyle
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_node_set_cell_style
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (GtkStyle style)))

(define-func gtk_ctree_node_get_cell_style
  GtkStyle
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)))

(define-func gtk_ctree_node_set_foreground
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GdkColor color)))

(define-func gtk_ctree_node_set_background
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (GdkColor color)))

;; gtk_ctree_node_set_row_data
;; gtk_ctree_node_get_row_data

(define-func gtk_ctree_node_moveto
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)
   (int column)
   (float row_align)
   (float col_align)))

(define-func gtk_ctree_node_is_visible
  GtkVisibility
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_set_indent
  none
  ((GtkCTree ctree)
   (int indent)))

(define-func gtk_ctree_set_spacing
  none
  ((GtkCTree ctree)
   (int spacing)))

(define-func gtk_ctree_set_show_stub
  none
  ((GtkCTree ctree)
   (bool show_stub)))

(define-func gtk_ctree_set_line_style
  none
  ((GtkCTree ctree)
   (GtkCTreeLineStyle style)))

(define-func gtk_ctree_set_expander_style
  none
  ((GtkCTree ctree)
   (GtkCTreeExpanderStyle style)))

(define-func gtk_ctree_sort_node
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))

(define-func gtk_ctree_sort_recursive
  none
  ((GtkCTree ctree)
   (GtkCTreeNode node)))


; menus, menubars ...
;(include "gtkmenus.defs")

; MenuShell

(define-object GtkMenuShell (GtkContainer))

(define-func gtk_menu_shell_append
  none
  ((GtkMenuShell menu_shell)
   (GtkWidget child)))

(define-func gtk_menu_shell_prepend
  none
  ((GtkMenuShell menu_shell)
   (GtkWidget child)))

(define-func gtk_menu_shell_insert
  none
  ((GtkMenuShell menu_shell)
   (GtkWidget child)
   (int position)))

(define-func gtk_menu_shell_deactivate
  none
  ((GtkMenuShell menu_shell)))

(define-func gtk_menu_shell_select_item
  none
  ((GtkMenuShell menu_shell)
   (GtkWidget menu_item)))

(define-func gtk_menu_shell_deselect
  none
  ((GtkMenuShell menu_shell)))

(define-func gtk_menu_shell_activate_item
  none
  ((GtkMenuShell menu_shell)
   (GtkWidget menu_item)
   (bool force_deactivate)))

; MenuBar

(define-object GtkMenuBar (GtkMenuShell))

(define-func gtk_menu_bar_new
  GtkMenuBar
  ())

(define-func gtk_menu_bar_append
  none
  ((GtkMenuBar menu_bar)
   (GtkWidget child)))

(define-func gtk_menu_bar_prepend
  none
  ((GtkMenuBar menu_bar)
   (GtkWidget child)))

(define-func gtk_menu_bar_insert
  none
  ((GtkMenuBar menu_bar)
   (GtkWidget child)
   (int position)))

(define-func gtk_menu_bar_set_shadow_type
  none
  ((GtkMenuBar menu_bar)
   (GtkShadowType typ)))

; Menu

(define-object GtkMenu (GtkMenuShell))

(define-func gtk_menu_new
  GtkMenu
  ())

(define-func gtk_menu_append
  none
  ((GtkMenu menu)
   (GtkWidget child)))

(define-func gtk_menu_prepend
  none
  ((GtkMenu menu)
   (GtkWidget child)))

(define-func gtk_menu_insert
  none
  ((GtkMenu menu)
   (GtkWidget child)
   (int position)))

;;; gtk_menu_popup

(define-func gtk_menu_reposition
  none
  ((GtkMenu menu)))

(define-func gtk_menu_popdown
  none
  ((GtkMenu menu)))

(define-func gtk_menu_get_active
  GtkWidget
  ((GtkMenu menu)))

(define-func gtk_menu_set_active
  none
  ((GtkMenu menu)
   (int index)))

(define-func gtk_menu_set_accel_group
  none
  ((GtkMenu menu)
   (GtkAccelGroup group)))

(define-func gtk_menu_get_accel_group
  GtkAccelGroup
  ((GtkMenu menu)))

; gtk_menu_attach_to_widget

(define-func gtk_menu_get_attach_widget
  GtkWidget
  ((GtkMenu menu)))

(define-func gtk_menu_detach
  none
  ((GtkMenu menu)))

(define-func gtk_menu_set_tearoff_state
  none
  ((GtkMenu menu)
   (bool torn_off)))

(define-func gtk_menu_set_title
  none
  ((GtkMenu menu)
   (string title)))

(define-func gtk_menu_reorder_child
  none
  ((GtkMenu menu)
   (GtkWidget child)
   (int position)))

; MenuItem

(define-object GtkMenuItem (GtkItem))

(define-func gtk_menu_item_new
  GtkMenuItem
  ())

(define-func gtk_menu_item_new_with_label
  GtkMenuItem
  ((string label)))

(define-func gtk_menu_item_set_submenu
  none
  ((GtkMenuItem menu_item)
   (GtkWidget submenu)))

(define-func gtk_menu_item_remove_submenu
  none
  ((GtkMenuItem menu_item)))

(define-func gtk_menu_item_set_placement
  none
  ((GtkMenuItem menu_item)
   (GtkSubmenuPlacement placement)))

(define-func gtk_menu_item_configure
  none
  ((GtkMenuItem menu_item)
   (bool show_toggle_indicator)
   (bool show_submenu_indicator)))

(define-func gtk_menu_item_select
  none
  ((GtkMenuItem menu_item)))

(define-func gtk_menu_item_deselect
  none
  ((GtkMenuItem menu_item)))

(define-func gtk_menu_item_activate
  none
  ((GtkMenuItem menu_item)))

(define-func gtk_menu_item_right_justify
  none
  ((GtkMenuItem menu_item)))

; CheckMenuItem

(define-object GtkCheckMenuItem (GtkMenuItem)
  (fields
   (uint active))
)

(define-func gtk_check_menu_item_new
  GtkCheckMenuItem
  ())

(define-func gtk_check_menu_item_new_with_label
  GtkCheckMenuItem
  ((string label)))

(define-func gtk_check_menu_item_set_active
  none
  ((GtkCheckMenuItem check_menu_item)
   (bool state)))

(define-func gtk_check_menu_item_set_show_toggle
  none
  ((GtkCheckMenuItem menu_item)
   (bool always)))

(define-func gtk_check_menu_item_toggled
  none
  ((GtkCheckMenuItem check_menu_item)))

; RadioMenuItem

(define-object GtkRadioMenuItem (GtkCheckMenuItem))

;;(define-func gtk_radio_menu_item_new_interp
;;  GtkRadioMenuItem
;;  ((GtkRadioMenuItem group (null-ok))))

;;(define-func gtk_radio_menu_item_new_with_label_interp
;;  GtkRadioMenuItem
;;  ((GtkRadioMenuItem group (null-ok))
;;   (string label)))

; OptionMenu

(define-object GtkOptionMenu (GtkButton))

(define-func gtk_option_menu_new
  GtkOptionMenu
  ())

(define-func gtk_option_menu_get_menu
  GtkWidget
  ((GtkOptionMenu option_menu)))

(define-func gtk_option_menu_set_menu
  none
  ((GtkOptionMenu option_menu)
   (GtkWidget menu)))

(define-func gtk_option_menu_remove_menu
  none
  ((GtkOptionMenu option_menu)))

(define-func gtk_option_menu_set_history
  none
  ((GtkOptionMenu option_menu)
   (int index)))

; Tearoffs

(define-object GtkTearoffMenuItem (GtkMenuItem))
(define-func gtk_tearoff_menu_item_new
  GtkTearoffMenuItem
  ())

; Item Factory

(define-object GtkItemFactory (GtkObject))

;(define-func gtk_item_factory_new
;  GtkItemFactory
;  ((GtkGtkType container_type)
;   (string path)
;   (GtkAccelGroup group)))

(define-func gtk_item_factory_parse_rc
  none
  ((string file_name)))

(define-func gtk_item_factory_parse_rc_string
  none
  ((string rc_string)))

(define-func gtk_item_factory_add_foreign
  none
  ((GtkWidget accel_widget)
   (string full_path)
   (GtkAccelGroup accel_group)
   (uint keyval)
   (GdkModifierType modifiers)))

(define-func gtk_item_factory_from_widget
  GtkItemFactory
  ((GtkWidget widget)))

(define-func gtk_item_factory_path_from_widget
  static_string
  ((GtkWidget widget)))

(define-func gtk_item_factory_get_widget
  GtkWidget
  ((GtkItemFactory ifactory)
   (string path)))

(define-func gtk_item_factory_get_widget_by_action
  GtkWidget
  ((GtkItemFactory ifactory)
   (uint action)))

;; gtk_item_factory_create_items

(define-func gtk_item_factory_delete_item
  none
  ((GtkItemFactory ifactory)
   (string path)))

(define-func gtk_item_factory_popup
  none
  ((GtkItemFactory ifactory)
   (uint x) (uint y)
   (uint mouse_button)
   (uint time)))

; ranges, rulers, scrollbars ...
;(include "gtkranges.defs")

(define-object GtkRange (GtkWidget))

(define-func gtk_range_get_adjustment
  GtkAdjustment
  ((GtkRange range)))

(define-func gtk_range_set_update_policy
  none
  ((GtkRange range)
   (GtkUpdateType policy)))

(define-func gtk_range_set_adjustment
  none
  ((GtkRange range)
   (GtkAdjustment adjustment)))

(define-func gtk_range_draw_background
  none
  ((GtkRange range)))

(define-func gtk_range_clear_background
  none
  ((GtkRange range)))

(define-func gtk_range_draw_trough
  none
  ((GtkRange range)))

(define-func gtk_range_draw_slider
  none
  ((GtkRange range)))

(define-func gtk_range_draw_step_forw
  none
  ((GtkRange range)))

(define-func gtk_range_draw_step_back
  none
  ((GtkRange range)))

(define-func gtk_range_slider_update
  none
  ((GtkRange range)))

(define-func gtk_range_default_hmotion
  none
  ((GtkRange range)
   (int xdelta)
   (int ydelta)))

(define-func gtk_range_default_hslider_update
  none
  ((GtkRange range)))

(define-func gtk_range_default_vmotion
  none
  ((GtkRange range)
   (int xdelta)
   (int ydelta)))

(define-func gtk_range_default_vslider_update
  none
  ((GtkRange range)))

; Scale

(define-object GtkScale (GtkRange))

(define-func gtk_scale_set_digits
  none
  ((GtkScale scale)
   (uint digits)))

(define-func gtk_scale_set_draw_value
  none
  ((GtkScale scale)
   (bool draw_value)))

(define-func gtk_scale_set_value_pos
  none
  ((GtkScale scale)
   (GtkPositionType pos)))

(define-func gtk_scale_get_value_width
  int
  ((GtkScale scale)))

(define-func gtk_scale_draw_value
  none
  ((GtkScale scale)))

; HScale

(define-object GtkHScale (GtkScale))

(define-func gtk_hscale_new
  GtkHScale
  ((GtkAdjustment adjustment (null-ok))))

; VScale

(define-object GtkVScale (GtkScale))

(define-func gtk_vscale_new
  GtkVScale
  ((GtkAdjustment adjustment (null-ok))))

; Scrollbar

(define-object GtkScrollbar (GtkRange))

; HScrollbar

(define-object GtkHScrollbar (GtkScrollbar))

(define-func gtk_hscrollbar_new
  GtkHScrollbar
  ((GtkAdjustment adjustment (null-ok))))

; VScrollbar

(define-object GtkVScrollbar (GtkScrollbar))

(define-func gtk_vscrollbar_new
  GtkVScrollbar
  ((GtkAdjustment adjustment (null-ok))))

; Ruler

(define-object GtkRuler (GtkWidget))

(define-func gtk_ruler_set_metric
  none
  ((GtkRuler ruler)
   (GtkMetricType metric)))

(define-func gtk_ruler_set_range
  none
  ((GtkRuler ruler)
   (float lower)
   (float upper)
   (float position)
   (float max_size)))

(define-func gtk_ruler_draw_ticks
  none
  ((GtkRuler ruler)))

(define-func gtk_ruler_draw_pos
  none
  ((GtkRuler ruler)))

; HRuler

(define-object GtkHRuler (GtkRuler))

(define-func gtk_hruler_new
  GtkHRuler
  ())

; VRuler

(define-object GtkVRuler (GtkRuler))

(define-func gtk_vruler_new
  GtkVRuler
  ())

; editable components ...
;(include "gtkedit.defs")

; Editable

(define-object GtkEditable (GtkWidget) 
  (fields (uint selection_start_pos)
	  (uint selection_end_pos)))

(define-func gtk_editable_select_region
  none
  ((GtkEditable editable)
   (int start_pos) (int end_pos)))

;;;(define-func gtk_editable_insert_text
;;;  none
;;;  ((GtkEditable editable)
;;;   (const_string new_text)
;;;   (int new_text_length)
;;;   (int* position))); In/Out (indicate position on call, returns the
                       ; position just after the inserted text

(define-func gtk_editable_delete_text
  none
  ((GtkEditable editable)
   (int start_pos) (int end_pos)))

(define-func gtk_editable_get_chars
  string
  ((GtkEditable editable)
   (int start_pos) (int end_pos)))

(define-func gtk_editable_cut_clipboard
  none
  ((GtkEditable edtiable)))

(define-func gtk_editable_copy_clipboard
  none
  ((GtkEditable editable)))

(define-func gtk_editable_paste_clipboard
  none
  ((GtkEditable editable)))

(define-func gtk_editable_claim_selection
  none
  ((GtkEditable editable)
   (bool claim)
   (uint time)))

(define-func gtk_editable_delete_selection
  none
  ((GtkEditable editable)))

(define-func gtk_editable_changed
  none
  ((GtkEditable editable)))

(define-func gtk_editable_set_position
  none
  ((GtkEditable editable)
   (int position)))

(define-func gtk_editable_get_position
  int
  ((GtkEditable editable)))

(define-func gtk_editable_set_editable
  none
  ((GtkEditable editable)
   (bool is_editable)))

; Entry

(define-object GtkEntry (GtkEditable))

(define-func gtk_entry_new
  GtkEntry
  ())

(define-func gtk_entry_new_with_max_length 
  GtkEntry
; should actually be int16 - does it matter?
  ((int max)))

(define-func gtk_entry_set_text
  none
  ((GtkEntry entry)
   (string text)))

(define-func gtk_entry_append_text
  none
  ((GtkEntry entry)
   (string text)))

(define-func gtk_entry_prepend_text
  none
  ((GtkEntry entry)
   (string text)))

(define-func gtk_entry_set_position
  none
  ((GtkEntry entry)
   (int position)))

(define-func gtk_entry_get_text
  static_string
  ((GtkEntry entry)))

(define-func gtk_entry_select_region
  none
  ((GtkEntry entry)
   (int start_pos)
   (int end_pos)))

(define-func gtk_entry_set_visibility
  none
  ((GtkEntry entry)
   (bool visible)))

(define-func gtk_entry_set_editable
  none
  ((GtkEntry entry)
   (bool editable)))

(define-func gtk_entry_set_max_length
  none
  ((GtkEntry entry)
   (uint max)))

; SpinButton

(define-object GtkSpinButton (GtkEntry))

(define-func gtk_spin_button_new   
  GtkSpinButton
  ((GtkAdjustment adjustment (null-ok))
   (float climb_rate)
   (uint digits)))

(define-func gtk_spin_button_set_adjustment 
  none
  ((GtkSpinButton spin_button)
   (GtkAdjustment adjustment)))

(define-func gtk_spin_button_get_adjustment 
  GtkAdjustment
  ((GtkSpinButton spin_button)))

(define-func gtk_spin_button_set_digits 
  none
  ((GtkSpinButton spin_button)
   (uint digits)))

(define-func gtk_spin_button_get_value_as_float 
  float 
  ((GtkSpinButton spin_button)))

(define-func gtk_spin_button_get_value_as_int  
  int
  ((GtkSpinButton spin_button)))

(define-func gtk_spin_button_set_value 
  none
  ((GtkSpinButton spin_button) 
   (float valu)))

(define-func gtk_spin_button_set_update_policy 
  none
  ((GtkSpinButton spin_button)
   (GtkSpinButtonUpdatePolicy policy)))

(define-func gtk_spin_button_set_numeric
  none
  ((GtkSpinButton spin_button)
   (bool numeric)))

(define-func gtk_spin_button_spin
  none
  ((GtkSpinButton spin_button)
   (GtkSpinType direction)
   (float increment)))

(define-func gtk_spin_button_set_wrap
  none
  ((GtkSpinButton spin_button)
   (bool wrap)))

(define-func gtk_spin_button_set_shadow_type
  none
  ((GtkSpinButton spin_button)
   (GtkShadowType shadow_type)))

(define-func gtk_spin_button_set_snap_to_ticks
  none
  ((GtkSpinButton spin_button)
   (bool snap_to_ticks)))

(define-func gtk_spin_button_update
  none
  ((GtkSpinButton spin_button)))

(define-func gtk_spin_button_configure
  none
  ((GtkSpinButton spin_button)
   (GtkAdjustment adjustment)
   (float climb_rate)
   (uint digits)))

; GtkCombo

(define-object GtkCombo (GtkHBox)
  (fields 
   (GtkEntry entry)
   (GtkList list)))

(define-func gtk_combo_new
  GtkCombo
  ())

(define-func gtk_combo_set_value_in_list
  none
  ((GtkCombo combo)
   (bool valu)
   (bool ok_if_empty)))

(define-func gtk_combo_set_use_arrows
  none
  ((GtkCombo combo)
   (bool valu)))

(define-func gtk_combo_set_use_arrows_always
  none
  ((GtkCombo combo)
   (bool valu)))

(define-func gtk_combo_set_case_sensitive
  none
  ((GtkCombo combo)
   (bool valu)))

(define-func gtk_combo_set_item_string
  none
  ((GtkCombo combo)
   (GtkItem item)
   (string item_value)))

;;;(define-func gtk_combo_set_popdown_strings
;;;  none
;;;  ((GtkCombo combo)
;;;   (GList* strings)))

(define-func gtk_combo_disable_activate
  none
  ((GtkCombo combo)))

; Text

(define-object GtkText (GtkEditable)
  (fields
   (GtkAdjustment hadj)
   (GtkAdjustment vadj)))

(define-func gtk_text_new
  GtkText
  ((GtkAdjustment hadj (null-ok) (= "NULL"))
   (GtkAdjustment vadj (null-ok) (= "NULL"))))

(define-func gtk_text_set_editable
  none
  ((GtkText text)
   (bool editable)))

(define-func gtk_text_set_word_wrap
  none
  ((GtkText text)
   (bool word_wrap)))

(define-func gtk_text_set_line_wrap
  none
  ((GtkText text)
   (bool line_wrap)))

(define-func gtk_text_set_adjustments
  none
  ((GtkText text)
   (GtkAdjustment hadj (null-ok))
   (GtkAdjustment vadj (null-ok))))

(define-func gtk_text_set_point
  none
  ((GtkText text)
   (uint index)))

(define-func gtk_text_get_point
  uint
  ((GtkText text)))

(define-func gtk_text_get_length
  uint
  ((GtkText text)))

(define-func gtk_text_freeze
  none
  ((GtkText text)))

(define-func gtk_text_thaw
  none
  ((GtkText text)))

; Text insert

(define-func gtk_text_insert
  none
  ((GtkText text)
   (GdkFont font (null-ok))
   (GdkColor fore (null-ok))
   (GdkColor back (null-ok))
   (string chars)
   (int length)))

(define-func gtk_text_backward_delete
  none
  ((GtkText text)
   (uint nchars)))

(define-func gtk_text_forward_delete
  none
  ((GtkText text)
   (uint nchars)))


; gtk signals -- generated by Henning

;(define-signal GtkAccelGroup "add-accelerator")
;(define-signal GtkAccelGroup "remove-accelerator")
;(define-signal GtkAdjustment "changed")
(define-signal GtkAdjustment "value_changed")
(define-signal GtkButton "pressed")
(define-signal GtkButton "released")
(define-signal GtkButton "clicked")
(define-signal GtkButton "enter")
(define-signal GtkButton "leave")
(define-signal GtkCalendar "month_changed")
(define-signal GtkCalendar "day_selected")
(define-signal GtkCalendar "day_selected_double_click")
(define-signal GtkCalendar "prev_month")
(define-signal GtkCalendar "next_month")
(define-signal GtkCalendar "prev_year")
(define-signal GtkCalendar "next_year")
;(define-signal GtkCheckMenuItem "toggled")
;(define-signal GtkCList "set_scroll_adjustments")
(define-signal GtkCList "select_row")
(define-signal GtkCList "unselect_row")
(define-signal GtkCList "row_move")
(define-signal GtkCList "click_column")
(define-signal GtkCList "resize_column")
;(define-signal GtkCList "toggle_focus_row")
;(define-signal GtkCList "select_all")
;(define-signal GtkCList "unselect_all")
;(define-signal GtkCList "undo_selection")
;(define-signal GtkCList "start_selection")
;(define-signal GtkCList "end_selection")
;(define-signal GtkCList "toggle_add_mode")
;(define-signal GtkCList "extend_selection")
;(define-signal GtkCList "scroll_vertical")
;(define-signal GtkCList "scroll_horizontal")
;(define-signal GtkCList "abort_column_resize")
;(define-signal GtkColorsel "color_changed")
(define-signal GtkContainer "add")
(define-signal GtkContainer "remove")
(define-signal GtkContainer "check_resize")
(define-signal GtkContainer "focus")
(define-signal GtkContainer "set-focus-child")
;(define-signal GtkCTree "tree_select_row")
;(define-signal GtkCTree "tree_unselect_row")
;(define-signal GtkCTree "tree_expand")
;(define-signal GtkCTree "tree_collapse")
;(define-signal GtkCTree "tree_move")
;(define-signal GtkCTree "change_focus_row_expansion")
;(define-signal GtkCurve "curve_type_changed")
(define-signal GtkData "disconnect")
(define-signal GtkEditable "changed")
(define-signal GtkEditable "insert_text")
(define-signal GtkEditable "delete_text")
(define-signal GtkEditable "activate")
(define-signal GtkEditable "set-editable")
(define-signal GtkEditable "move_cursor")
(define-signal GtkEditable "move_word")
(define-signal GtkEditable "move_page")
(define-signal GtkEditable "move_to_row")
(define-signal GtkEditable "move_to_column")
(define-signal GtkEditable "kill_char")
(define-signal GtkEditable "kill_word")
(define-signal GtkEditable "kill_line")
(define-signal GtkEditable "cut_clipboard")
(define-signal GtkEditable "copy_clipboard")
(define-signal GtkEditable "paste_clipboard")
(define-signal GtkHandleBox "child_attached")
(define-signal GtkHandleBox "child_detached")
(define-signal GtkInputDialog "enable_device")
(define-signal GtkInputDialog "disable_device")
(define-signal GtkItem "select")
(define-signal GtkItem "deselect")
(define-signal GtkItem "toggle")
;(define-signal GtkLayout "set_scroll_adjustments")
;(define-signal GtkList "selection_changed")
;(define-signal GtkList "select_child")
;(define-signal GtkList "unselect_child")
(define-signal GtkListItem "toggle_focus_row")
(define-signal GtkListItem "select_all")
(define-signal GtkListItem "unselect_all")
(define-signal GtkListItem "undo_selection")
(define-signal GtkListItem "start_selection")
(define-signal GtkListItem "end_selection")
(define-signal GtkListItem "toggle_add_mode")
(define-signal GtkListItem "extend_selection")
(define-signal GtkListItem "scroll_vertical")
(define-signal GtkListItem "scroll_horizontal")
;(define-signal GtkMenuItem "activate")
;(define-signal GtkMenuItem "activate_item")
;(define-signal GtkMenuShell "deactivate")
;(define-signal GtkMenuShell "selection-done")
;(define-signal GtkMenuShell "move_current")
;(define-signal GtkMenuShell "activate_current")
;(define-signal GtkMenuShell "cancel")
(define-signal GtkNotebook "switch_page")
(define-signal GtkObject "destroy")
(define-signal GtkStatusbar "text_pushed")
(define-signal GtkStatusbar "text_popped")
(define-signal GtkText "set_scroll_adjustments")
(define-signal GtkTipsQuery "start_query")
(define-signal GtkTipsQuery "stop_query")
(define-signal GtkTipsQuery "widget_entered")
(define-signal GtkTipsQuery "widget_selected")
(define-signal GtkToggleButton "toggled")
(define-signal GtkToolbar "orientation_changed")
(define-signal GtkToolbar "style_changed")
(define-signal GtkTree "selection_changed")
(define-signal GtkTree "select_child")
(define-signal GtkTree "unselect_child")
(define-signal GtkTreeItem "expand")
(define-signal GtkTreeItem "collapse")
;(define-signal GtkViewport "set_scroll_adjustments")
(define-signal GtkWidget "show")
(define-signal GtkWidget "hide")
(define-signal GtkWidget "map")
(define-signal GtkWidget "unmap")
(define-signal GtkWidget "realize")
(define-signal GtkWidget "unrealize")
(define-signal GtkWidget "draw")
(define-signal GtkWidget "draw_focus")
(define-signal GtkWidget "draw_default")
(define-signal GtkWidget "size_request")
(define-signal GtkWidget "size_allocate")
(define-signal GtkWidget "state_changed")
(define-signal GtkWidget "parent_set")
(define-signal GtkWidget "style_set")
(define-signal GtkWidget "grab_focus")
(define-signal GtkWidget "event")
(define-signal GtkWidget "button_press_event")
(define-signal GtkWidget "button_release_event")
(define-signal GtkWidget "motion_notify_event")
(define-signal GtkWidget "delete_event" (bool ((none dummy))))
(define-signal GtkWidget "destroy_event")
(define-signal GtkWidget "expose_event")
(define-signal GtkWidget "key_press_event")
(define-signal GtkWidget "key_release_event")
(define-signal GtkWidget "enter_notify_event")
(define-signal GtkWidget "leave_notify_event")
(define-signal GtkWidget "configure_event")
(define-signal GtkWidget "focus_in_event")
(define-signal GtkWidget "focus_out_event")
(define-signal GtkWidget "map_event")
(define-signal GtkWidget "unmap_event")
(define-signal GtkWidget "property_notify_event")
(define-signal GtkWidget "selection_clear_event")
(define-signal GtkWidget "selection_request_event")
(define-signal GtkWidget "selection_notify_event")
(define-signal GtkWidget "selection_received")
(define-signal GtkWidget "selection_get")
(define-signal GtkWidget "proximity_in_event")
(define-signal GtkWidget "proximity_out_event")
(define-signal GtkWidget "drag_leave")
(define-signal GtkWidget "drag_begin")
(define-signal GtkWidget "drag_end")
(define-signal GtkWidget "drag_data_delete")
(define-signal GtkWidget "drag_motion")
(define-signal GtkWidget "drag_drop")
(define-signal GtkWidget "drag_data_get")
(define-signal GtkWidget "drag_data_received")
(define-signal GtkWidget "visibility_notify_event")
(define-signal GtkWidget "client_event")
(define-signal GtkWidget "no_expose_event")
(define-signal GtkWidget "debug_msg")
(define-signal GtkWindow "set_focus")


                Features that mGTK needs from a C-FFI
                =====================================
                    Ken Friis Larsen <kfl@it.edu>
                     Henning Niss <hniss@it.edu>

             Last modified: $Date: 2003/03/10 13:36:10 $



This note contains a brief overview of the features that mGTK need
from a C-FFI to work.  The note does not contain any background
information about the GNOME platform (that is, gtk+, glib, pango,
atk,...).   For information about GNOME and gtk+ see:

            http://gtk.org
            http://developer.gnome.org


Summary of the needed features in order of importance:

   * Callback (ie., call a SML function from C).  We have designed
     mGTK so that we only need to call two specific SML functions.
     ESSENTIAL!


   * Finalized values.  We need a way to hook-up the memory management
     from GObject with the SML GC.

   
   * Allocation of SML aggregate values (tuples, lists, vectors,
     arrays) from C.  Some C functions return a dynamically sized
     data structure (for example, a list of selected cells in a grid
     widget).


   * Dynamic loading of C libraries.  Not essential, but we use that
     feature from Moscow ML now.




Callback
--------

Gtk+ is a signal (or event) based toolkit.  This means that you
connect a callback function to an event from the GUI (or other
events).  

To handle the callback we have a hash-table with all callback
functions (implemented in pure SML).  And we have two functions that
we need to be able to call from C: one to dispatch the call to the
right callback function and one to remove the
callback functions from the table when a widget is disposed.

That is, in C all signals are connected to to the same C function
(mgtk_callback_dispatch), then mgtk_callback_dispatch call a specific
pre-registered SML function, dispatch, and finally dispatch
fetches the right function from the hash-table and call it with the
provided arguments.

Thus, we need to know how:
  * to register a SML function so that we can call it from C
  * to call this registered function



Finalized values
----------------

It is a chore to handle the life cycle of widgets yourself, when the
GC can handle it.  And gtk+ (through GObject) is nicely prepared to be
hooked up to a GC. 

This feature is not necessary to get something running.  But to build
large real applications is it needed.



Allocation of SML aggregate values from C
-----------------------------------------

The places we allocate aggregate values in C can be split into four
cases, in reverse order of importance:

  * The return value from gtk_init (not really essential, but it cause
    us some deep thinking).

  * We allocate a number of tuples to transfer some constants.  These
    cases can be eliminated by allocating an array in SML and let a C
    fill it out.

  * We allocate a triple each time we do a callback.  Again, this case
    can perhaps be eliminated depending on how callbacks from C to SML
    is implemented.

  * When a C function returns a dynamically sized data structure.



Dynamic loading of C libraries
------------------------------

Isn't important as such, but very convenient especially if you want to
be able to download a new mGTK widget from the net.

See also the documentation for the Moscow ML Dynlib library:
    http://www.dina.dk/~sestoft/mosmllib/Dynlib.html

